import{_ as e,c as t,o as r,a8 as i}from"./chunks/framework.B1-gFi6y.js";const p=JSON.parse('{"title":"前端基础架构","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/base.md","filePath":"architecture/base.md","lastUpdated":1716979096000}'),o={name:"architecture/base.md"};function l(n,a,s,h,d,c){return r(),t("div",null,a[0]||(a[0]=[i('<h1 id="前端基础架构" tabindex="-1">前端基础架构 <a class="header-anchor" href="#前端基础架构" aria-label="Permalink to &quot;前端基础架构&quot;">​</a></h1><h2 id="工作流" tabindex="-1">工作流 <a class="header-anchor" href="#工作流" aria-label="Permalink to &quot;工作流&quot;">​</a></h2><p>CICD（自动化构建、测试和部署）</p><h2 id="技术选型" tabindex="-1">技术选型 <a class="header-anchor" href="#技术选型" aria-label="Permalink to &quot;技术选型&quot;">​</a></h2><p>基础框架（如脚手架 cra，或者阿里的 ice，react or vue），基于这个框架结合项目引入某些工程化特殊配置（less or sass loader 、plugin 等）</p><h2 id="基础物料包" tabindex="-1">基础物料包 <a class="header-anchor" href="#基础物料包" aria-label="Permalink to &quot;基础物料包&quot;">​</a></h2><h4 id="ui-组件" tabindex="-1">ui 组件 <a class="header-anchor" href="#ui-组件" aria-label="Permalink to &quot;ui 组件&quot;">​</a></h4><p>antd elementui</p><p><strong>样式</strong> classnames <strong>原子化</strong> unocss</p><h4 id="工具类组件" tabindex="-1">工具类组件 <a class="header-anchor" href="#工具类组件" aria-label="Permalink to &quot;工具类组件&quot;">​</a></h4><p>ahooks loadsh</p><p><strong>react</strong> uuid</p><h4 id="icon-组件" tabindex="-1">icon 组件 <a class="header-anchor" href="#icon-组件" aria-label="Permalink to &quot;icon 组件&quot;">​</a></h4><p>阿里的 iconfont</p><h4 id="接口请求" tabindex="-1">接口请求 <a class="header-anchor" href="#接口请求" aria-label="Permalink to &quot;接口请求&quot;">​</a></h4><p>axios 阿里的 mtop</p><h4 id="静态资源加载" tabindex="-1">静态资源加载 <a class="header-anchor" href="#静态资源加载" aria-label="Permalink to &quot;静态资源加载&quot;">​</a></h4><p>使用 cdn 方式加载 需要一个统一管理图片的地方</p><h2 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h2><h4 id="编码风格" tabindex="-1">编码风格 <a class="header-anchor" href="#编码风格" aria-label="Permalink to &quot;编码风格&quot;">​</a></h4><ol><li>统一 stylelint 自动保存格式化（如缩紧、简写等）</li><li>文件和组件命名 （小驼峰和大驼峰）</li><li>文件目录结构</li></ol><h4 id="git-规范" tabindex="-1">git 规范 <a class="header-anchor" href="#git-规范" aria-label="Permalink to &quot;git 规范&quot;">​</a></h4><ol><li>开发阶段 基于 master 拉一个 develop-迭代分支 开发人员基于 develop 拉取名为 feature-data（迭代）-name 为分支</li><li>测试阶段 基于 develop 拉取 bugfix-name 分支 改完之后删除该分支</li><li>预演阶段 将 develop 合并到 master 修改代码预演问题代码 基于 master 拉取 bugfix-name 分支 改完之后删除该分支</li><li>上线 将 master 发布到 release 修改线上代码如上 基于 release</li><li>git 提交规范 husky feat fix 等</li></ol>',23)]))}const m=e(o,[["render",l]]);export{p as __pageData,m as default};
