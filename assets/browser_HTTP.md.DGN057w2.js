import{a as r,_ as o}from"./chunks/重定向.BAeFG-mr.js";import{_ as B,C as d,c,o as i,j as e,b as l,a8 as A,a as E,w as s,G as t,a9 as p}from"./chunks/framework.CrIyVKdD.js";const C="/Lyc-notes/assets/TCP%E5%92%8CHTTP%E7%9A%84%E5%85%B3%E7%B3%BB.BtUa3F8d.png",h="/Lyc-notes/assets/http%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.A93XdeQ9.png",u="/Lyc-notes/assets/%E8%B5%84%E6%BA%90%E7%BC%93%E5%AD%98.KPhcvxRH.png",b="/Lyc-notes/assets/HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.BF1e3bma.png",x=JSON.parse('{"title":"HTTP 请求流程详解","description":"","frontmatter":{},"headers":[],"relativePath":"browser/HTTP.md","filePath":"browser/HTTP.md","lastUpdated":1743670237000}'),g={name:"browser/HTTP.md"};function m(F,a,T,k,D,P){const n=d("Mermaid");return i(),c("div",null,[a[5]||(a[5]=e("h1",{id:"http-请求流程详解",tabindex:"-1"},[E("HTTP 请求流程详解 "),e("a",{class:"header-anchor",href:"#http-请求流程详解","aria-label":'Permalink to "HTTP 请求流程详解"'},"​")],-1)),a[6]||(a[6]=e("p",null,"HTTP（超文本传输协议）是Web应用程序的基础，理解其工作原理对于开发高效的Web应用至关重要。本文将详细解析HTTP请求的完整生命周期，从浏览器发起请求到服务器响应的全过程。",-1)),(i(),l(p,null,{default:s(()=>[t(n,{id:"mermaid-6",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20autonumber%0A%20%20%20%20participant%20%E7%94%A8%E6%88%B7%0A%20%20%20%20participant%20%E6%B5%8F%E8%A7%88%E5%99%A8%0A%20%20%20%20participant%20DNS%E7%B3%BB%E7%BB%9F%0A%20%20%20%20participant%20%E7%BC%93%E5%AD%98%E5%B1%82%0A%20%20%20%20participant%20%E6%9C%8D%E5%8A%A1%E5%99%A8%0A%20%20%20%20%0A%20%20%20%20%E7%94%A8%E6%88%B7-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%BE%93%E5%85%A5URL%E6%88%96%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%0A%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%A7%A3%E6%9E%90URL(%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9F%9F%E5%90%8D%E3%80%81%E8%B7%AF%E5%BE%84%E3%80%81%E5%8F%82%E6%95%B0%E7%AD%89)%0A%20%20%20%20%0A%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E7%BC%93%E5%AD%98%E5%B1%82%3A%20%E6%9F%A5%E6%89%BE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%0A%20%20%20%20alt%20%E6%89%BE%E5%88%B0%E6%9C%89%E6%95%88%E7%BC%93%E5%AD%98%0A%20%20%20%20%20%20%20%20%E7%BC%93%E5%AD%98%E5%B1%82--%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%BF%94%E5%9B%9E%E7%BC%93%E5%AD%98%E8%B5%84%E6%BA%90%0A%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8--%3E%3E%E7%94%A8%E6%88%B7%3A%20%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%0A%20%20%20%20else%20%E6%97%A0%E7%BC%93%E5%AD%98%E6%88%96%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%0A%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3EDNS%E7%B3%BB%E7%BB%9F%3A%20%E5%8F%91%E8%B5%B7DNS%E6%9F%A5%E8%AF%A2%0A%20%20%20%20%20%20%20%20DNS%E7%B3%BB%E7%BB%9F--%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%BF%94%E5%9B%9E%E7%9B%AE%E6%A0%87IP%E5%9C%B0%E5%9D%80%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20TCP%E9%98%9F%E5%88%97%E6%8E%92%E9%98%9F%E6%A3%80%E6%9F%A5(%E5%90%8C%E5%9F%9F%E5%90%8D%E6%9C%80%E5%A4%9A6%E4%B8%AA%E8%BF%9E%E6%8E%A5)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%0A%20%20%20%20%20%20%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8--%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82(%E8%AF%B7%E6%B1%82%E8%A1%8C%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E3%80%81%E8%AF%B7%E6%B1%82%E4%BD%93)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8-%3E%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%0A%20%20%20%20%20%20%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8--%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%BF%94%E5%9B%9EHTTP%E5%93%8D%E5%BA%94(%E7%8A%B6%E6%80%81%E8%A1%8C%E3%80%81%E5%93%8D%E5%BA%94%E5%A4%B4%E3%80%81%E5%93%8D%E5%BA%94%E4%BD%93)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20alt%20%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA%E9%87%8D%E5%AE%9A%E5%90%91(301%2F302%2F307%2F308%E7%AD%89)%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%8E%B7%E5%8F%96Location%E5%A4%B4%E9%83%A8%E6%96%B0%E5%9C%B0%E5%9D%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E9%87%8D%E6%96%B0%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%0A%20%20%20%20%20%20%20%20else%20%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA%E6%88%90%E5%8A%9F(200)%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E8%A7%A3%E6%9E%90%E5%93%8D%E5%BA%94%E5%86%85%E5%AE%B9%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E7%BC%93%E5%AD%98%E5%B1%82%3A%20%E6%A0%B9%E6%8D%AE%E5%93%8D%E5%BA%94%E5%A4%B4%E5%86%B3%E5%AE%9A%E6%98%AF%E5%90%A6%E7%BC%93%E5%AD%98%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8--%3E%3E%E7%94%A8%E6%88%B7%3A%20%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%0A%20%20%20%20%20%20%20%20else%20%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA%E9%94%99%E8%AF%AF(4xx%2F5xx)%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8--%3E%3E%E7%94%A8%E6%88%B7%3A%20%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20alt%20Connection%3A%20Keep-Alive%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%A4%8D%E7%94%A8%0A%20%20%20%20%20%20%20%20else%20Connection%3A%20Close%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%B5%8F%E8%A7%88%E5%99%A8-%3E%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%0A%20%20%20%20%20%20%20%20%20%20%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8--%3E%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3A%20%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A"})]),fallback:s(()=>[...a[0]||(a[0]=[E(" Loading... ",-1)])]),_:1})),a[7]||(a[7]=A(`<h2 id="一、浏览器端发起-http-请求流程" tabindex="-1">一、浏览器端发起 HTTP 请求流程 <a class="header-anchor" href="#一、浏览器端发起-http-请求流程" aria-label="Permalink to &quot;一、浏览器端发起 HTTP 请求流程&quot;">​</a></h2><h3 id="_1-1-url解析" tabindex="-1">1.1 URL解析 <a class="header-anchor" href="#_1-1-url解析" aria-label="Permalink to &quot;1.1 URL解析&quot;">​</a></h3><p>在用户输入URL或点击链接后，浏览器首先需要解析URL的各个组成部分：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://www.example.com:443/path/resource.html?query=example#section</span></span>
<span class="line"><span>|      |        |       |   |                   |           |</span></span>
<span class="line"><span>协议    子域名    主域名   端口  路径              查询参数     片段标识符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>协议：指定使用的通信协议，如HTTP或HTTPS</li><li>域名：标识资源所在的服务器</li><li>端口：指定服务器上的通信端口，HTTP默认80，HTTPS默认443</li><li>路径：指向服务器上的具体资源位置</li><li>查询参数：提供额外的请求信息</li><li>片段标识符：指向页面内的特定部分</li></ul><h3 id="_1-2-请求构建" tabindex="-1">1.2 请求构建 <a class="header-anchor" href="#_1-2-请求构建" aria-label="Permalink to &quot;1.2 请求构建&quot;">​</a></h3><p>浏览器根据解析后的URL信息构建HTTP请求，这包括三个核心部分： 请求行、请求头、请求体.</p><p><strong>请求行：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTP1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>HTTP方法（如GET、POST、PUT、DELETE等）</li><li>请求URL路径</li><li>HTTP协议版本</li></ul><p><strong>请求头</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host: www.example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User-Agent: Mozilla/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Windows NT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Win</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) AppleWebKit/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">537.36</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Accept: text/html,application/xhtml+xml,application/xml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Accept-Language: zh-CN,zh;q=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,en;q=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Accept-Encoding: gzip, deflate, br</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Connection: keep-alive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cookie: session=abc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; user_id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control: max-age=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>每个请求头字段都有特定的用途：</p><ul><li>Host: 指定请求的目标主机和端口</li><li>User-Agent: 标识发起请求的客户端软件</li><li>Accept: 表明客户端能够处理的内容类型</li><li>Cookie: 携带之前服务器设置的状态信息</li><li>Cache-Control: 指定缓存机制</li></ul><p><strong>请求体：</strong></p><p>对于POST、PUT等方法，请求体包含发送到服务器的数据内容：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 表单提交示例 (application/x-www-form-urlencoded)</span></span>
<span class="line"><span>username=johndoe&amp;password=secret</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// JSON数据示例 (application/json)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;username&quot;: &quot;johndoe&quot;,</span></span>
<span class="line"><span>  &quot;password&quot;: &quot;secret&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-3-查找缓存" tabindex="-1">1.3 查找缓存 <a class="header-anchor" href="#_1-3-查找缓存" aria-label="Permalink to &quot;1.3 查找缓存&quot;">​</a></h3><p>在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，<strong>浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术</strong>。</p><p>缓存的层级结构包括：</p><ol><li>内存缓存（Memory Cache）</li></ol><ul><li>存储位置：RAM内存中</li><li>特点：读取速度最快，但容量有限，且页面关闭后失效</li><li>适用场景：频繁访问的小型资源，如页面内多次引用的图片、脚本等</li><li>优先级：最高</li></ul><ol start="2"><li>磁盘缓存（Disk Cache）</li></ol><ul><li>存储位置：硬盘上</li><li>特点：容量大，持久化存储，但读取速度比内存慢</li><li>适用场景：大型资源和不太频繁访问的资源</li><li>优先级：次之</li></ul><ol start="3"><li>Service Worker 缓存</li></ol><ul><li>存储位置：由JavaScript控制的可编程缓存</li><li>特点：支持离线访问，可以精确控制缓存策略</li><li>适用场景：PWA应用，需要离线功能的网站</li><li>优先级：取决于Service Worker的具体实现</li></ul><ol start="4"><li>HTTP缓存（强缓存和协商缓存）</li></ol><ul><li>存储位置：通常在磁盘上</li><li>特点：由HTTP协议头部控制的标准缓存机制</li><li>适用场景：几乎所有Web资源</li></ul><p>浏览器判断缓存是否可用的流程：</p>`,29)),(i(),l(p,null,{default:s(()=>[t(n,{id:"mermaid-240",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5B%E5%BC%80%E5%A7%8B%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%5D%20--%3E%20B%7B%E6%A3%80%E6%9F%A5Service%20Worker%7D%0A%20%20%20%20B%20--%3E%7C%E6%9C%89%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%7C%20C%5B%E8%BF%94%E5%9B%9EService%20Worker%E6%8E%A7%E5%88%B6%E7%9A%84%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20B%20--%3E%7C%E6%97%A0%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%7C%20D%7B%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%7D%0A%20%20%20%20D%20--%3E%7C%E6%89%BE%E5%88%B0%E5%B9%B6%E6%9C%89%E6%95%88%7C%20E%5B%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20D%20--%3E%7C%E6%9C%AA%E6%89%BE%E5%88%B0%E6%88%96%E5%A4%B1%E6%95%88%7C%20F%7B%E6%A3%80%E6%9F%A5%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98%7D%0A%20%20%20%20F%20--%3E%7C%E6%89%BE%E5%88%B0%E5%B9%B6%E6%9C%89%E6%95%88%7C%20G%5B%E4%BD%BF%E7%94%A8%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20F%20--%3E%7C%E6%9C%AA%E6%89%BE%E5%88%B0%E6%88%96%E5%A4%B1%E6%95%88%7C%20H%7B%E6%A3%80%E6%9F%A5%E5%BC%BA%E7%BC%93%E5%AD%98%E6%98%AF%E5%90%A6%E6%9C%89%E6%95%88%7D%0A%20%20%20%20H%20--%3E%7C%E6%9C%89%E6%95%88%7C%20I%5B%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E8%B5%84%E6%BA%90%5D%0A%20%20%20%20H%20--%3E%7C%E6%97%A0%E6%95%88%7C%20J%7B%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E6%9C%89%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E4%BF%A1%E6%81%AF%7D%0A%20%20%20%20J%20--%3E%7C%E6%9C%89%7C%20K%5B%E5%8F%91%E9%80%81%E6%9D%A1%E4%BB%B6%E8%AF%B7%E6%B1%82%5D%0A%20%20%20%20J%20--%3E%7C%E6%97%A0%7C%20L%5B%E5%8F%91%E9%80%81%E6%99%AE%E9%80%9A%E8%AF%B7%E6%B1%82%5D%0A%20%20%20%20K%20--%3E%20M%7B%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9E304%3F%7D%0A%20%20%20%20M%20--%3E%7C%E6%98%AF%7C%20N%5B%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E6%97%B6%E9%97%B4%E6%88%B3%5Cn%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E8%B5%84%E6%BA%90%5D%0A%20%20%20%20M%20--%3E%7C%E5%90%A6%7C%20O%5B%E4%BD%BF%E7%94%A8%E6%96%B0%E5%93%8D%E5%BA%94%5Cn%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20L%20--%3E%20O%0A"})]),fallback:s(()=>[...a[1]||(a[1]=[E(" Loading... ",-1)])]),_:1})),a[8]||(a[8]=A(`<p>**强缓存(Strong Cache)：**强缓存是指在缓存有效期内，浏览器直接使用缓存而不与服务器进行任何交互。 特点：</p><ul><li>完全不向服务器发送请求，直接从本地加载资源</li><li>响应状态码显示为200（但通常带有&quot;from disk cache&quot;或&quot;from memory cache&quot;标记）</li><li>网络面板中可能显示为&quot;(disk cache)&quot;或&quot;(memory cache)&quot;</li></ul><p>控制方式：</p><ol><li>Cache-Control（HTTP/1.1）</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cache-Control: max-age=3600  // 缓存3600秒（1小时）</span></span>
<span class="line"><span>Cache-Control: public        // 可被任何缓存区缓存</span></span>
<span class="line"><span>Cache-Control: private       // 只能被浏览器缓存</span></span>
<span class="line"><span>Cache-Control: no-cache      // 每次使用前需要校验</span></span>
<span class="line"><span>Cache-Control: no-store      // 不缓存任何内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>Expires（HTTP/1.0）</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expires: Wed, 21 Oct 2023 07:28:00 GMT  // 具体过期时间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>优先级： Cache-Control 优先级高于 Expires</p><p>**协商缓存 (Negotiation Cache)：**协商缓存是指浏览器需要向服务器发送请求来确认缓存是否仍然有效。</p><p>特点：</p><ul><li>需要发送请求到服务器进行校验</li><li>如果资源未变化，返回304状态码，浏览器继续使用缓存</li><li>如果资源已变化，返回200状态码和最新资源内容</li></ul><p>控制方式：</p><ol><li>ETag/If-None-Match（优先级更高）</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ETag: 资源的唯一标识符，类似指纹</span></span>
<span class="line"><span>If-None-Match: 客户端发送的ETag值</span></span>
<span class="line"><span>服务器响应头：ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;（资源的唯一标识符，类似指纹）</span></span>
<span class="line"><span>浏览器请求头：If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>Last-Modified/If-Modified-Since</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Last-Modified: 资源的最后修改时间</span></span>
<span class="line"><span>If-Modified-Since: 客户端发送的最后修改时间</span></span>
<span class="line"><span>服务器响应头：Last-Modified: Wed, 21 Oct 2023 07:28:00 GMT（资源最后修改时间）</span></span>
<span class="line"><span>浏览器请求头：If-Modified-Since: Wed, 21 Oct 2023 07:28:00 GMT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。这样做的好处有：</p><ul><li>缓解服务器端压力，提升性能（获取资源的耗时更短了）</li><li>对于网站来说，缓存是实现快速资源加载的重要组成部分 当然，如果缓存查找失败，就会进入网络请求过程了。</li></ul><h3 id="_1-4-dns解析" tabindex="-1">1.4 DNS解析 <a class="header-anchor" href="#_1-4-dns解析" aria-label="Permalink to &quot;1.4  DNS解析&quot;">​</a></h3><p>浏览器使用<strong>HTTP 协议作为应用层协议</strong>，用来封装请求的文本信息；并使用<strong>TCP/IP 作传输层协议</strong>将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说<strong>HTTP 的内容是通过 TCP 的传输数据阶段来实现的</strong>，你可以结合下图更好地理解这二者的关系。</p><p><img src="`+C+'" alt="alt text"></p><ul><li>HTTP 网络请求的第一步是做什么呢？结合上图看，<strong>是和服务器建立 TCP 连接</strong>。</li><li>获取建立连接的信息，<strong>需要准备 IP 地址和端口号</strong>。</li><li>利用<strong>URL 地址来获取 IP 和端口信息</strong>，URL 域名映射为 IP 的系统就叫做“<strong>域名系统</strong>”，简称<strong>DNS</strong></li></ul><p><strong>第一步浏览器会请求 DNS 返回域名对应的 IP</strong>。当然浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求。</p><p>拿到 IP 之后，接下来就需要获取端口号了。通常情况下，如果 URL 没有特别指明端口号，那么 HTTP 协议默认是 80 端口。</p><p>DNS查询遵循一个分层的解析过程：</p>',25)),(i(),l(p,null,{default:s(()=>[t(n,{id:"mermaid-375",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5B%E5%BC%80%E5%A7%8BDNS%E8%A7%A3%E6%9E%90%5D%20--%3E%20B%7B%E6%B5%8F%E8%A7%88%E5%99%A8DNS%E7%BC%93%E5%AD%98%3F%7D%0A%20%20%20%20B%20--%3E%7C%E6%9C%89%7C%20Z%5B%E8%BF%94%E5%9B%9E%E7%BC%93%E5%AD%98%E7%9A%84IP%5D%0A%20%20%20%20B%20--%3E%7C%E6%97%A0%7C%20C%7B%E6%9C%AC%E5%9C%B0hosts%E6%96%87%E4%BB%B6%3F%7D%0A%20%20%20%20C%20--%3E%7C%E6%9C%89%7C%20Z%0A%20%20%20%20C%20--%3E%7C%E6%97%A0%7C%20D%7B%E7%B3%BB%E7%BB%9FDNS%E7%BC%93%E5%AD%98%3F%7D%0A%20%20%20%20D%20--%3E%7C%E6%9C%89%7C%20Z%0A%20%20%20%20D%20--%3E%7C%E6%97%A0%7C%20E%7B%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%3F%7D%0A%20%20%20%20E%20--%3E%7C%E6%9C%89%7C%20Z%0A%20%20%20%20E%20--%3E%7C%E6%97%A0%7C%20F%7B%E6%A0%B9%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%3F%7D%0A%20%20%20%20F%20--%3E%20G%7B%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%3F%7D%0A%20%20%20%20G%20--%3E%20H%7B%E6%9D%83%E5%A8%81%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%3F%7D%0A%20%20%20%20H%20--%3E%20I%5B%E8%8E%B7%E5%8F%96IP%E5%9C%B0%E5%9D%80%5D%0A%20%20%20%20I%20--%3E%20J%5B%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%9C%5D%0A%20%20%20%20J%20--%3E%20Z%0A"})]),fallback:s(()=>[...a[2]||(a[2]=[E(" Loading... ",-1)])]),_:1})),a[9]||(a[9]=A('<p>DNS解析过程是递归和迭代相结合的：</p><ol><li>递归查询：本地DNS服务器代表客户端进行完整的域名解析</li><li>迭代查询：DNS服务器返回下一级名称服务器的地址，客户端逐级查询</li></ol><p><strong>DNS优化技术</strong></p><ul><li>DNS预解析：通过<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://example.com&quot;&gt;</code>提前解析域名</li><li>DNS缓存：将解析结果缓存，减少重复查询</li><li>并行DNS查询：同时发起多个DNS请求</li><li>智能DNS决策：基于网络情况选择最佳DNS服务器</li></ul><h3 id="_1-5-tcp连接建立" tabindex="-1">1.5 TCP连接建立 <a class="header-anchor" href="#_1-5-tcp连接建立" aria-label="Permalink to &quot;1.5 TCP连接建立&quot;">​</a></h3><p>现在已经把端口和 IP 地址都准备好了，那么下一步是不是可以建立 TCP 连接了呢？</p><p>答案依然是“不行”。Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</p><p><strong>TCP队列管理</strong></p><p>现代浏览器限制对同一域名的并发连接数（通常为6个），这是为了：</p><ul><li>防止对服务器造成过大压力</li><li>避免网络拥塞</li><li>公平分配网络资源</li></ul><p>当存在超过限制的请求时，浏览器将剩余请求放入队列中等待：</p>',11)),(i(),l(p,null,{default:s(()=>[t(n,{id:"mermaid-451",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20A%5B%E6%96%B0HTTP%E8%AF%B7%E6%B1%82%5D%20--%3E%20B%7B%E5%BD%93%E5%89%8D%E8%BF%9E%E6%8E%A5%E6%95%B0%3C6%3F%7D%0A%20%20%20%20B%20--%3E%7C%E6%98%AF%7C%20C%5B%E7%AB%8B%E5%8D%B3%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%5D%0A%20%20%20%20B%20--%3E%7C%E5%90%A6%7C%20D%5B%E6%94%BE%E5%85%A5%E7%AD%89%E5%BE%85%E9%98%9F%E5%88%97%5D%0A%20%20%20%20D%20--%3E%20E%5B%E7%9B%91%E5%90%AC%E8%BF%9E%E6%8E%A5%E9%87%8A%E6%94%BE%5D%0A%20%20%20%20E%20--%3E%20F%7B%E6%9C%89%E7%A9%BA%E9%97%B2%E8%BF%9E%E6%8E%A5%3F%7D%0A%20%20%20%20F%20--%3E%7C%E6%98%AF%7C%20C%0A"})]),fallback:s(()=>[...a[3]||(a[3]=[E(" Loading... ",-1)])]),_:1})),a[10]||(a[10]=e("p",null,"当然，如果当前请求数量少于 6，会直接进入下一步，建立 TCP 连接。",-1)),a[11]||(a[11]=e("p",null,[E("TCP建立连接的过程包括以下关键步骤("),e("a",{href:"./TCP协议"},"详情见TCP"),E(")：")],-1)),(i(),l(p,null,{default:s(()=>[t(n,{id:"mermaid-458",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20Client%20as%20%E6%B5%8F%E8%A7%88%E5%99%A8%0A%20%20%20%20participant%20Server%20as%20%E6%9C%8D%E5%8A%A1%E5%99%A8%0A%20%20%20%20%0A%20%20%20%20Note%20over%20Client%2CServer%3A%20TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%0A%20%20%20%20Client-%3E%3EServer%3A%20SYN%3D1%2C%20Seq%3Dx%0A%20%20%20%20Note%20right%20of%20Client%3A%20%E7%AC%AC1%E6%AC%A1%E6%8F%A1%E6%89%8B%3A%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81SYN%E6%8A%A5%E6%96%87%EF%BC%8C%E8%BF%9B%E5%85%A5SYN_SENT%E7%8A%B6%E6%80%81%0A%20%20%20%20Server-%3E%3EClient%3A%20SYN%3D1%2C%20ACK%3D1%2C%20Seq%3Dy%2C%20Ack%3Dx%2B1%0A%20%20%20%20Note%20left%20of%20Server%3A%20%E7%AC%AC2%E6%AC%A1%E6%8F%A1%E6%89%8B%3A%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%9E%E5%BA%94SYN%2BACK%E6%8A%A5%E6%96%87%EF%BC%8C%E8%BF%9B%E5%85%A5SYN_RCVD%E7%8A%B6%E6%80%81%0A%20%20%20%20Client-%3E%3EServer%3A%20ACK%3D1%2C%20Seq%3Dx%2B1%2C%20Ack%3Dy%2B1%0A%20%20%20%20Note%20right%20of%20Client%3A%20%E7%AC%AC3%E6%AC%A1%E6%8F%A1%E6%89%8B%3A%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81ACK%E6%8A%A5%E6%96%87%EF%BC%8C%E5%8F%8C%E6%96%B9%E8%BF%9B%E5%85%A5ESTABLISHED%E7%8A%B6%E6%80%81%0A%20%20%20%20%0A%20%20%20%20Note%20over%20Client%2CServer%3A%20%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%88%90%EF%BC%8C%E5%BC%80%E5%A7%8B%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%0A"})]),fallback:s(()=>[...a[4]||(a[4]=[E(" Loading... ",-1)])]),_:1})),a[12]||(a[12]=A('<h3 id="_1-6-发送-http-请求" tabindex="-1">1.6 发送 HTTP 请求 <a class="header-anchor" href="#_1-6-发送-http-请求" aria-label="Permalink to &quot;1.6 发送 HTTP 请求&quot;">​</a></h3><p>一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。</p><p><img src="'+h+`" alt="alt text"></p><p>发送<strong>请求行</strong>，就是告诉服务器浏览器需要什么资源，最常用的请求方法是 Get。比如，直接在浏览器地址栏键入极客时间的域名（time.geekbang.org），这就是告诉服务器要 Get 它的首页资源。</p><p>另外一个常用的请求方法是 POST，它用于发送一些数据给服务器，比如登录一个网站，就需要通过 POST 方法把用户信息发送给服务器。如果使用 POST 方法，那么浏览器还要准备数据给服务器，这里准备的数据是通过请求体来发送。</p><p>在浏览器发送请求行命令之后，还要以请求头形式发送其他一些信息，把浏览器的一些基础信息告诉服务器。比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等。</p><p>常见HTTP方法及其用途：</p><ul><li>GET：获取资源，参数在URL中，幂等</li><li>POST：创建资源，数据在请求体中</li><li>PUT：更新资源，数据在请求体中，幂等</li><li>DELETE：删除资源，幂等</li><li>PATCH：部分更新资源</li><li>HEAD：仅获取响应头，不返回响应体</li><li>OPTIONS：询问服务器支持的方法和选项</li></ul><p>除了基本请求头外，现代Web应用还会使用许多特殊用途的请求头：</p><p>安全相关：</p><ul><li>Authorization: 身份验证凭证</li><li>Content-Security-Policy: 内容安全策略</li><li>X-CSRF-Token: 跨站请求伪造保护令牌</li></ul><p>内容协商：</p><ul><li>Accept-Language: 首选语言</li><li>Accept-Encoding: 支持的压缩算法</li></ul><p>跨域资源共享：</p><ul><li>Origin: 请求源</li><li>Access-Control-Request-Method: 预检请求中声明的HTTP方法</li><li>Access-Control-Request-Headers: 预检请求中声明的HTTP头</li></ul><p>性能优化：</p><ul><li>Connection: keep-alive: 保持连接以复用</li><li>Upgrade-Insecure-Requests: 告知服务器客户端支持HTTPS</li></ul><h2 id="二、服务器端处理-http-请求流程" tabindex="-1">二、服务器端处理 HTTP 请求流程 <a class="header-anchor" href="#二、服务器端处理-http-请求流程" aria-label="Permalink to &quot;二、服务器端处理 HTTP 请求流程&quot;">​</a></h2><h3 id="_2-1-接收与解析请求" tabindex="-1">2.1 接收与解析请求 <a class="header-anchor" href="#_2-1-接收与解析请求" aria-label="Permalink to &quot;2.1 接收与解析请求&quot;">​</a></h3><p>当服务器接收到来自客户端的HTTP请求后，首先需要进行请求的解析工作：</p><ol><li>解析请求行：提取HTTP方法、URL路径和协议版本</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /index.html HTTP/1.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>解析请求头：将头部信息转换成键值对形式</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Host: example.com</span></span>
<span class="line"><span>User-Agent: Mozilla/5.0 ...</span></span>
<span class="line"><span>Cookie: sessionid=abc123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>解析请求体（如果存在）：根据Content-Type头部确定如何解析</li></ol><ul><li>application/x-www-form-urlencoded: 表单数据</li><li>application/json: JSON数据</li><li>multipart/form-data: 文件上传</li><li>其他格式数据</li></ul><h3 id="_2-2-返回请求" tabindex="-1">2.2 返回请求 <a class="header-anchor" href="#_2-2-返回请求" aria-label="Permalink to &quot;2.2 返回请求&quot;">​</a></h3><p><img src="`+r+'" alt="alt text"></p><p>首先服务器会返回响应行，包括协议版本和状态码。</p><p>但并不是所有的请求都可以被服务器处理的，那么一些无法处理或者处理出错的信息，怎么办呢？服务器会通过请求行的状态码来告诉浏览器它的处理结果，比如：</p><ul><li>最常用的状态码是 200，表示处理成功；</li><li>如果没有找到页面，则会返回 404。</li></ul><p>随后，正如浏览器会随同请求发送请求头一样，服务器也会随同响应向浏览器发送<strong>响应头</strong>。响应头包含了服务器自身的一些信息，比如服务器生成返回数据的时间、返回的数据类型（JSON、HTML、流媒体等类型），以及服务器要在客户端保存的 Cookie 等信息。</p><p>发送完响应头后，服务器就可以继续发送响应体的数据，通常，响应体就包含了 HTML 的实际内容。</p><h3 id="_2-3-断开连接" tabindex="-1">2.3 断开连接 <a class="header-anchor" href="#_2-3-断开连接" aria-label="Permalink to &quot;2.3 断开连接&quot;">​</a></h3><p>通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Connection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Keep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。<strong>保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度</strong>。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。</p><h3 id="_2-4-重定向" tabindex="-1">2.4 重定向 <a class="header-anchor" href="#_2-4-重定向" aria-label="Permalink to &quot;2.4 重定向&quot;">​</a></h3><p><img src="'+o+'" alt="alt text"></p><p>响应行返回的状态码是 301，状态 301 就是告诉浏览器，我需要重定向到另外一个网址，而需要重定向的网址正是包含在响应头的 Location 字段中，接下来，浏览器获取 Location 字段中的地址，并使用该地址重新导航，这就是一个完整重定向的执行流程。</p><h2 id="为什么很多站点第二次打开速度会很快" tabindex="-1">为什么很多站点第二次打开速度会很快？ <a class="header-anchor" href="#为什么很多站点第二次打开速度会很快" aria-label="Permalink to &quot;为什么很多站点第二次打开速度会很快？&quot;">​</a></h2><p>如果第二次页面打开很快，主要原因是第一次加载页面过程中，缓存了一些耗时的数据。</p><p><strong>DNS 缓存</strong>和<strong>页面资源缓存</strong>这两块数据是会被浏览器缓存的。</p><p><img src="'+u+'" alt="alt text"></p><p>当服务器返回 HTTP 响应头给浏览器时，浏览器是<strong>通过响应头中的 Cache-Control 字段来设置是否缓存该资源</strong>。</p><p>通常，我们还需要为这个资源设置一个缓存过期时长，而这个时长是通过 Cache-Control 中的 Max-age 参数来设置的，比如上图设置的缓存过期时间是 2000 秒。<code>Cache-Control:Max-age=2000</code></p><p>这也就意味着，在该缓存资源还未过期的情况下, 如果再次请求该资源，会直接返回缓存中的资源给浏览器。</p><p>但如果缓存过期了，浏览器则会继续发起网络请求，并且在 HTTP 请求头中带上：<code>If-None-Match:&quot;4f80f-13c-3a1xb12a&quot;</code></p><p>服务器收到请求头后，会根据 If-None-Match 的值来判断请求的资源是否有更新。</p><ul><li>如果没有更新，就返回 304 状态码，相当于服务器告诉浏览器：“这个缓存可以继续使用，这次就不重复发送数据给你了。”</li><li>如果资源有更新，服务器就直接返回最新资源给浏览器。</li></ul><p>详细查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching</a></p><p>简要来说，很多网站第二次访问能够秒开，是因为这些网站把很多资源都缓存在了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。同时，DNS 数据也被浏览器缓存了，这又省去了 DNS 查询环节。</p><h2 id="登录状态是如何保持的" tabindex="-1">登录状态是如何保持的？ <a class="header-anchor" href="#登录状态是如何保持的" aria-label="Permalink to &quot;登录状态是如何保持的？&quot;">​</a></h2><ul><li><p>用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 POST 方法提交用户登录信息给服务器。</p></li><li><p>服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set-Cookie 字段里，如下所示，然后把响应头发送给浏览器。<code>Set-Cookie: UID=3431uad;</code></p></li><li><p>浏览器在接收到服务器的响应头后，开始解析响应头，如果遇到响应头里含有 Set-Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把<code>UID=3431uad</code>保持到本地。</p></li><li><p>当用户再次访问时，浏览器会发起 HTTP 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。<code>Cookie: UID=3431uad;</code></p></li><li><p>服务器在收到 HTTP 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含 UID=3431uad 的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。</p></li><li><p>浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了。</p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><img src="'+b+'" alt="alt text"></p>',56))])}const f=B(g,[["render",m]]);export{x as __pageData,f as default};
