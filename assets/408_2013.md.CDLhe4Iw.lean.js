import{_ as a,c as o,o as _,m as e,a as t,aa as c}from"./chunks/framework.CAVwB9kQ.js";const y=JSON.parse('{"title":"2013","description":"","frontmatter":{},"headers":[],"relativePath":"408/2013.md","filePath":"408/2013.md","lastUpdated":1732525627000}'),s={name:"408/2013.md"},d=e("h1",{id:"_2013",tabindex:"-1"},[t("2013 "),e("a",{class:"header-anchor",href:"#_2013","aria-label":'Permalink to "2013"'},"​")],-1),n=e("h2",{id:"_1-合并两个升序链表为m-n的降序链表",tabindex:"-1"},[t("1. 合并两个升序链表为m+n的降序链表 "),e("a",{class:"header-anchor",href:"#_1-合并两个升序链表为m-n的降序链表","aria-label":'Permalink to "1. 合并两个升序链表为m+n的降序链表"'},"​")],-1),r=e("p",{"m,n":""},"利用空间换时间：遍历链表max{m,n}，输出到一个空数组当中，再对该数组遍历，输出到新链表中。最大时间复杂度max",-1),h=e("h2",{id:"_2-带权路径长度",tabindex:"-1"},[t("2. 带权路径长度 "),e("a",{class:"header-anchor",href:"#_2-带权路径长度","aria-label":'Permalink to "2. 带权路径长度"'},"​")],-1),l=e("p",null,"各结点权值x路径长度 求和 = 带权路径长度",-1),i=e("p",null,"带权路径长度最小即为哈夫曼树，每次从最小的权值开始构造",-1),p=e("p",null,"三叉树{2,3,4,5,6,7}构造哈夫曼树",-1),m=e("p",{"4,5,5,6,7":""},"（1）构造一个空结点0，分别与2，3相加的新结点权值 = 5 ，集合",-1),u=e("p",{"6，7，14":""},"（2）4,5,5构造新结点 = 14，集合",-1),b=e("p",null,"（3）6+7+14 = 27",-1),f=e("p",null,[t("故带权路径长度 = "),e("code",null,"(2+3)*3 + (4+5)*2 + (6+7)*1"),t(" = 46")],-1),x=e("h2",{id:"_3-关键路径缩短工期",tabindex:"-1"},[t("3. "),e("a",{href:"/Lyc-notes/dataStructure/chapter6#关键路径"},"关键路径缩短工期"),t(),e("a",{class:"header-anchor",href:"#_3-关键路径缩短工期","aria-label":'Permalink to "3. [关键路径缩短工期](/dataStructure/chapter6#关键路径)"'},"​")],-1),B=e("p",null,"关键路径不唯一，故需要缩短所有关键路径上共有的活动才能减少关键路径上的工期",-1),P=e("p",{"b、f、h":""},"关键路径{b、d、c、g}、{b、d、e、h}、",-1),S=c("",4),k=[d,n,r,h,l,i,p,m,u,b,f,x,B,P,S];function T(N,V,$,A,g,q){return _(),o("div",null,k)}const C=a(s,[["render",T]]);export{y as __pageData,C as default};
