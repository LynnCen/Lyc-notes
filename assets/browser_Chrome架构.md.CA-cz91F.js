import{_ as a,c as i,o as t,a8 as e}from"./chunks/framework.CrIyVKdD.js";const n="/Lyc-notes/assets/1.BWCz9gsZ.png",r="/Lyc-notes/assets/%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%AF%B9%E6%AF%94%E5%9B%BE.DKJpu3dq.png",l="/Lyc-notes/assets/%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE.BsI66bEo.png",p="/Lyc-notes/assets/%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.CxgcMZDf.png",o="/Lyc-notes/assets/%E6%97%A9%E6%9C%9FChrome%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84.DzsxPq3n.png",h="/Lyc-notes/assets/%E7%9B%AE%E5%89%8D%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84.BOJfCzF6.png",c="/Lyc-notes/assets/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.CdsQcwoD.png",k="/Lyc-notes/assets/%E6%9C%8D%E5%8A%A1%E5%90%88%E5%B9%B6.Mb-8R6Hz.png",A=JSON.parse('{"title":"Chrome 架构","description":"","frontmatter":{},"headers":[],"relativePath":"browser/Chrome架构.md","filePath":"browser/Chrome架构.md","lastUpdated":1716883163000}'),d={name:"browser/Chrome架构.md"};function E(g,s,m,b,u,C){return t(),i("div",null,[...s[0]||(s[0]=[e('<h1 id="chrome-架构" tabindex="-1">Chrome 架构 <a class="header-anchor" href="#chrome-架构" aria-label="Permalink to &quot;Chrome 架构&quot;">​</a></h1><h2 id="chrome-架构-仅仅打开了-1-个页面-为什么有-4-个进程" tabindex="-1">Chrome 架构：仅仅打开了 1 个页面，为什么有 4 个进程？ <a class="header-anchor" href="#chrome-架构-仅仅打开了-1-个页面-为什么有-4-个进程" aria-label="Permalink to &quot;Chrome 架构：仅仅打开了 1 个页面，为什么有 4 个进程？&quot;">​</a></h2><p>Chrome 打开一个页面需要启动多少进程</p><p><img src="'+n+`" alt="alt text"></p><h2 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h2><h3 id="什么是并行处理" tabindex="-1">什么是并行处理 <a class="header-anchor" href="#什么是并行处理" aria-label="Permalink to &quot;什么是并行处理&quot;">​</a></h3><blockquote><p>并行处理就是同一时刻处理多个任务</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>任务 1 是计算 A=1+2；</li><li>任务 2 是计算 B=20/5；</li><li>任务 3 是计算 C=7*8；</li><li>任务 4 是显示最后计算的结果。</li></ul><p>正常情况下程序可以使用<strong>单线程</strong>来处理，也就是分四步按照顺序分别执行这四个任务。</p><p>如果采用<strong>多线程</strong>，会怎么样呢？我们只需分“两步走”： 第一步，使用三个线程同时执行前三个任务； 第二步，再执行第四个显示任务。</p><p>使用并行处理能大大提升性能。</p><h3 id="线程-vs-进程" tabindex="-1">线程 VS 进程 <a class="header-anchor" href="#线程-vs-进程" aria-label="Permalink to &quot;线程 VS 进程&quot;">​</a></h3><p><strong>线程</strong>是不能单独存在的，它是由进程来启动和管理的，线程是上 cpu 上执行的最小单位。</p><p><strong>一个进程</strong>就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存 PCB，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。进程是 IO 分配的最小单位。</p><p><img src="`+r+'" alt="alt text"></p><p><strong>线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率</strong></p><h3 id="进程和线程的关系" tabindex="-1">进程和线程的关系 <a class="header-anchor" href="#进程和线程的关系" aria-label="Permalink to &quot;进程和线程的关系&quot;">​</a></h3><ol><li><p><strong>进程中的任意一线程执行出错，都会导致整个进程的崩溃</strong></p></li><li><p><strong>线程之间共享进程中的数据</strong>。</p></li></ol><p>线程之间可以对进程的公共数据进行读写操作。 <img src="'+l+'" alt="alt text"></p><ol start="3"><li><strong>当一个进程关闭之后，操作系统会回收进程所占用的内存</strong>。</li></ol><p>当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</p><ol start="4"><li><strong>进程之间的内容相互隔离</strong>。</li></ol><p>进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。</p><h2 id="单进程浏览器时代" tabindex="-1">单进程浏览器时代 <a class="header-anchor" href="#单进程浏览器时代" aria-label="Permalink to &quot;单进程浏览器时代&quot;">​</a></h2><p>单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。其实早在 2007 年之前，市面上浏览器都是单进程的。单进程浏览器的架构如下图所示：</p><p><img src="'+p+`" alt="alt text"></p><p>如此多的功能模块运行在一个进程里，是导致单进程浏览器不稳定、不流畅和不安全的一个主要因素。下面我就来一一分析下出现这些问题的原因。</p><h3 id="问题-1-不稳定" tabindex="-1">问题 1：不稳定 <a class="header-anchor" href="#问题-1-不稳定" aria-label="Permalink to &quot;问题 1：不稳定&quot;">​</a></h3><p>早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程之中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。</p><p>除了插件之外，渲染引擎模块也是不稳定的，通常一些复杂的 JavaScript 代码就有可能引起渲染引擎模块的崩溃。和插件一样，渲染引擎的崩溃也会导致整个浏览器的崩溃。</p><h3 id="问题-2-不流畅" tabindex="-1">问题 2：不流畅 <a class="header-anchor" href="#问题-2-不流畅" aria-label="Permalink to &quot;问题 2：不流畅&quot;">​</a></h3><p>从上面的“单进程浏览器架构示意图”可以看出，所有页面的渲染模块、JavaScript 执行环境以及插件都是运行在同一个线程中的，这就意味着同一时刻只能有一个模块可以执行。</p><p>比如，下面这个无限循环的脚本：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;freeze&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果让这个脚本运行在一个单进程浏览器的页面里，你感觉会发生什么？</p><p>因为这个脚本是无限循环的，所以当其执行时，它会独占整个线程，这样导致其他运行在该线程中的模块就没有机会被执行。因为浏览器中所有的页面都运行在该线程中，所以这些页面都没有机会去执行任务，这样就会导致整个浏览器失去响应，变卡顿。 页面的内存泄漏也是单进程变慢的一个重要原因。通常浏览器的内核都是非常复杂的，运行一个复杂点的页面再关闭页面，会存在内存不能完全回收的情况，这样导致的问题是使用时间越长，内存占用越高，浏览器会变得越慢。</p><h3 id="问题-3-不安全" tabindex="-1">问题 3：不安全 <a class="header-anchor" href="#问题-3-不安全" aria-label="Permalink to &quot;问题 3：不安全&quot;">​</a></h3><p>这里依然可以从插件和页面脚本两个方面来解释该原因。</p><p>插件可以使用 C/C++等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑。如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全性问题。</p><p>至于页面脚本，它可以通过浏览器的漏洞来获取系统权限，这些脚本获取系统权限之后也可以对你的电脑做一些恶意的事情，同样也会引发安全问题。</p><h2 id="多进程浏览器时代" tabindex="-1">多进程浏览器时代 <a class="header-anchor" href="#多进程浏览器时代" aria-label="Permalink to &quot;多进程浏览器时代&quot;">​</a></h2><h3 id="早期多进程架构" tabindex="-1">早期多进程架构 <a class="header-anchor" href="#早期多进程架构" aria-label="Permalink to &quot;早期多进程架构&quot;">​</a></h3><p><img src="`+o+'" alt="alt text"></p><p>Chrome 的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程之中，而进程之间是通过 IPC 机制进行通信（如图中虚线部分）。</p><ol><li><strong>解决不稳定问题</strong></li></ol><p>由于进程是<strong>相互隔离</strong>的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就完美地解决了页面或者插件的崩溃会导致整个浏览器崩溃，也就是不稳定的问题。</p><ol start="2"><li><strong>解决不流畅问题</strong></li></ol><p>JavaScript 也是运行在渲染进程中的，所以即使 JavaScript 阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。所以当我们再在 Chrome 中运行上面那个死循环的脚本时，没有响应的仅仅是当前的页面。</p><p>对于内存泄漏的解决方法那就更简单了，因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。</p><ol start="3"><li><strong>解决安全问题</strong></li></ol><p>采用多进程架构的额外好处是可以使用安全沙箱，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</p><h2 id="目前多进程架构" tabindex="-1">目前多进程架构 <a class="header-anchor" href="#目前多进程架构" aria-label="Permalink to &quot;目前多进程架构&quot;">​</a></h2><p><img src="'+h+'" alt="alt text"></p><ul><li><p><strong>浏览器进程</strong>。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p></li><li><p><strong>渲染进程</strong>。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在<strong>沙箱模式</strong>下。</p></li><li><p><strong>GPU 进程</strong>。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p></li><li><p><strong>网络进程</strong>。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</p></li><li><p><strong>插件进程</strong>。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><p>讲到这里，现在你应该就可以回答文章开头提到的问题了：仅仅打开了 1 个页面，为什么有 4 个进程？因为打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</p><p>不过凡事都有两面性，虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：</p></li></ul><blockquote><ul><li><p><strong>更高的资源占用</strong>。因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</p></li><li><p><strong>更复杂的体系架构</strong>。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</p></li></ul></blockquote><h2 id="未来面向服务的架构" tabindex="-1">未来面向服务的架构 <a class="header-anchor" href="#未来面向服务的架构" aria-label="Permalink to &quot;未来面向服务的架构&quot;">​</a></h2><p>为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。</p><p>Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图：</p><p><img src="'+c+'" alt="alt text"></p><p>同时 Chrome 还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome 会将很多服务整合到一个进程中，从而节省内存占用。</p><p><img src="'+k+'" alt="alt text"></p>',62)])])}const y=a(d,[["render",E]]);export{A as __pageData,y as default};
