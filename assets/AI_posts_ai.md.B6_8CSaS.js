import{_ as o,C as p,c as g,o as i,a8 as e,b as l,j as n,w as a,a as E,G as A,a9 as r}from"./chunks/framework.CrIyVKdD.js";const F=JSON.parse('{"title":"现代AI驱动应用的架构解析：Agent、Prompt、MCP与Function Calling","description":"","frontmatter":{},"headers":[],"relativePath":"AI/posts/ai.md","filePath":"AI/posts/ai.md","lastUpdated":1755617389000}'),B={name:"AI/posts/ai.md"};function h(d,s,c,k,u,C){const t=p("Mermaid");return i(),g("div",null,[s[2]||(s[2]=e('<h1 id="现代ai驱动应用的架构解析-agent、prompt、mcp与function-calling" tabindex="-1">现代AI驱动应用的架构解析：Agent、Prompt、MCP与Function Calling <a class="header-anchor" href="#现代ai驱动应用的架构解析-agent、prompt、mcp与function-calling" aria-label="Permalink to &quot;现代AI驱动应用的架构解析：Agent、Prompt、MCP与Function Calling&quot;">​</a></h1><p>在现代人工智能领域，大型语言模型（LLM）已从单纯的文本生成器，演变为能够执行复杂推理的精密引擎。这一演进催生了一种全新的架构范式，其核心是<strong>AI Agent（AI 智能体）</strong>——一种能够自主执行复杂、多步骤任务的系统。本文将深入探讨构成此架构的核心组件：提示（Prompts）、函数调用（Function Calling）、智能体（Agents）以及多智能体通信协议（MCP）。</p><h2 id="核心概念深度解析" tabindex="-1">核心概念深度解析 <a class="header-anchor" href="#核心概念深度解析" aria-label="Permalink to &quot;核心概念深度解析&quot;">​</a></h2><h3 id="_1-提示-prompts-人机交互的指令接口" tabindex="-1">1. 提示（Prompts）：人机交互的指令接口 <a class="header-anchor" href="#_1-提示-prompts-人机交互的指令接口" aria-label="Permalink to &quot;1. 提示（Prompts）：人机交互的指令接口&quot;">​</a></h3><p>提示是指导LLM执行任务的主要机制。它是一种结构化的文本输入，旨在引导模型产生特定且受约束的响应。提示的质量直接决定了输出的质量，这一领域被称为<strong>提示工程（Prompt Engineering）</strong>。</p><ul><li><strong>系统提示（System Prompt）</strong>: 此提示为AI模型设定了上下文、约束条件和“角色性格”。它通常由开发者定义，并在用户的整个会话周期内保持不变。它建立了操作的边界，例如：“你是一个专注于软件开发的得力助手”或“你必须仅以合法的JSON格式进行回应”。</li><li><strong>用户提示（User Prompt）</strong>: 这是由最终用户在对话的每个回合中提供的动态输入，例如：“编写一个Python函数来计算斐波那契数列”。</li></ul><p><strong>解决了什么问题</strong>: 提示为引导一个非确定性系统提供了一种标准化且灵活的方法。它将一个原始的概率模型，转变为一个可控的、能够执行特定任务的工具。高质量的提示能够显著减少模型输出的随机性，使其行为更加符合预期。</p><p><strong>现存的挑战与技术深化</strong>:</p><ul><li><strong>敏感性（Sensitivity）</strong>: LLM对提示的措辞、结构甚至标点符号都表现出高度敏感性。微小的变动可能导致输出结果的巨大差异。</li><li><strong>复杂性（Complexity）</strong>: 针对复杂的推理链（Reasoning Chains）构建有效的提示是一项具有挑战性的工程任务。高级提示技术，如思维链（Chain-of-Thought, CoT）、零样本（Zero-shot）和少样本（Few-shot）提示，虽然能提升模型性能，但设计和调试成本高昂。</li><li><strong>安全性（Security）</strong>: 约束不佳的系统容易受到“提示注入（Prompt Injection）”攻击。在这种攻击中，恶意的用户输入可以覆盖或绕过系统提示的原始指令，导致模型行为偏离预期，甚至造成安全漏洞。</li></ul><h3 id="_2-函数调用-function-calling-连接llm与外部世界的桥梁" tabindex="-1">2. 函数调用（Function Calling）：连接LLM与外部世界的桥梁 <a class="header-anchor" href="#_2-函数调用-function-calling-连接llm与外部世界的桥梁" aria-label="Permalink to &quot;2. 函数调用（Function Calling）：连接LLM与外部世界的桥梁&quot;">​</a></h3><p>函数调用是一种使LLM能够以结构化方式请求调用外部工具或API的机制。模型不再生成自然语言回复，而是输出一个机器可读的JSON对象，其中明确指定了函数名称及其所需参数。</p><p><strong>解决了什么问题</strong>: 它解决了LLM无法与外部世界直接交互的根本限制。函数调用提供了一座可靠的桥梁，允许模型查询数据库、调用Web API或与本地系统资源互动。这彻底改变了以往需要通过复杂的自然语言处理（NLP）技术来解析模型意图并触发程序化操作的模式，极大地提升了系统的稳定性和可靠性。</p><p><strong>现存的挑战与技术深化</strong>:</p><ul><li><strong>工具定义（Tool Definition）</strong>: 开发者必须向模型提供清晰、准确且无歧义的函数定义（通常以JSON Schema的形式）。对于拥有复杂参数或多种行为的API，如何精确地描述其功能是一大挑战。</li><li><strong>幻觉（Hallucination）</strong>: 模型有时会尝试调用不存在的函数，或为现有函数提供结构错误、类型不符的参数。因此，调用端应用必须具备强大的错误处理和参数校验机制。</li><li><strong>执行责任（Execution Responsibility）</strong>: LLM仅<em>建议</em>调用哪个函数，实际的执行、状态管理以及将结果返回给模型的责任，完全由宿主应用程序承担。这意味着开发者需要设计一个健壮的执行循环来处理这个过程。</li></ul><h3 id="_3-ai-智能体-ai-agents-实现任务执行的自主系统" tabindex="-1">3. AI 智能体（AI Agents）：实现任务执行的自主系统 <a class="header-anchor" href="#_3-ai-智能体-ai-agents-实现任务执行的自主系统" aria-label="Permalink to &quot;3. AI 智能体（AI Agents）：实现任务执行的自主系统&quot;">​</a></h3><p>AI Agent是一个以LLM为核心推理引擎的自主系统。它通过一个循环（Loop）来运作，将一个高级别的目标分解为一系列可执行的任务。在每个任务中，它会选择并利用合适的工具（通过函数调用），观察执行结果，并基于结果规划下一步行动，直至最终目标达成。这个过程通常遵循**ReAct（Reason + Act）**框架，即在每一步都进行推理，然后行动。</p><p><strong>解决了什么问题</strong>: Agent使得完成那些需要与外部数据和系统进行多次交互的复杂、长期任务成为可能。它引入了规划（Planning）、记忆（Memory）和工具使用（Tool Use）等高级能力，使AI系统超越了简单的“一问一答”模式。</p><p><strong>现存的challenge与技术深化</strong>:</p><ul><li><strong>上下文管理（Context Management）</strong>: 在漫长而复杂的任务链中维持连贯的状态和记忆，对计算资源消耗巨大，且技术上极具挑战性。如何有效管理短期记忆（会话历史）和长期记忆（知识库）是Agent设计的核心问题。</li><li><strong>错误恢复（Error Recovery）</strong>: Agent可能会陷入无效的循环中，或者在工具执行失败后无法有效恢复。设计具有鲁棒性的错误处理和自我修正能力的Agent是当前研究的热点。</li><li><strong>安全性与控制（Security and Control）</strong>: 赋予一个自主Agent访问强大工具（如文件系统、数据库、API）的权限带来了巨大的安全风险。必须通过精细的沙箱环境、权限管理和操作审计来确保Agent的行为在可控范围内。</li></ul><h3 id="_4-多智能体通信协议-mcp" tabindex="-1">4. 多智能体通信协议（MCP） <a class="header-anchor" href="#_4-多智能体通信协议-mcp" aria-label="Permalink to &quot;4. 多智能体通信协议（MCP）&quot;">​</a></h3><p>随着基于Agent的系统规模不断扩大，对标准化通信层的需求变得至关重要。多智能体通信协议（MCP）旨在将Agent（智能体）与其使用的工具（Tools）进行解耦。在此模型下，工具被作为独立的服务（MCP Server）暴露出来，而Agent则扮演MCP Client的角色。</p><p><strong>解决了什么问题</strong>: MCP促进了一种模块化、可扩展且具有互操作性的架构。它允许工具提供者独立开发和部署他们的服务，任何遵循MCP标准的Agent都可以动态地发现并使用这些工具。这与HTTP协议如何实现Web浏览器和Web服务器之间的通信有异曲同工之妙。通信可以基于多种渠道，包括标准输入/输出（stdio）或HTTP。</p><p><strong>现存的挑战与技术深化</strong>:</p><ul><li><strong>协议成熟度（Protocol Maturity）</strong>: MCP的标准仍在发展初期，尚未形成一个被普遍接受的统一协议。</li><li><strong>网络开销（Network Overhead）</strong>: 与紧密耦合的进程内函数调用相比，引入网络层会增加延迟和复杂性。</li><li><strong>分布式状态（Distributed State）</strong>: 在多个独立的工具服务之间管理事务、确保数据一致性，是一个复杂的分布式系统问题。</li></ul><h2 id="系统工作流图" tabindex="-1">系统工作流图 <a class="header-anchor" href="#系统工作流图" aria-label="Permalink to &quot;系统工作流图&quot;">​</a></h2><p>以下图表展示了在一个典型的Agent工作流中，这些组件之间是如何交互的。</p>',26)),(i(),l(r,null,{default:a(()=>[A(t,{id:"mermaid-143",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20User%20as%20%E7%94%A8%E6%88%B7%0A%20%20%20%20participant%20Agent%20as%20%E6%99%BA%E8%83%BD%E4%BD%93%20(MCP%E5%AE%A2%E6%88%B7%E7%AB%AF)%0A%20%20%20%20participant%20LLM%20as%20LLM%E6%8E%A8%E7%90%86%E6%A0%B8%E5%BF%83%0A%20%20%20%20participant%20MCPServer%20as%20MCP%E6%9C%8D%E5%8A%A1%E5%99%A8%20(%E5%B7%A5%E5%85%B7%E9%9B%86)%0A%0A%20%20%20%20User-%3E%3EAgent%3A%20%E6%8F%90%E4%BA%A4%E5%A4%8D%E6%9D%82%E7%9B%AE%E6%A0%87%20(%E4%BE%8B%E5%A6%82%3A%20%22%E5%B8%AE%E6%88%91%E8%A7%84%E5%88%92%E4%B8%80%E6%AC%A1%E5%B7%B4%E9%BB%8E%E4%B9%8B%E6%97%85%22)%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%9E%84%E9%80%A0%E5%8C%85%E5%90%AB%E7%9B%AE%E6%A0%87%E5%92%8C%E5%8F%AF%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E7%9A%84%E6%8F%90%E7%A4%BA%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E5%88%9D%E6%AD%A5%E8%AE%A1%E5%88%92%E5%8F%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%20(%E4%BE%8B%E5%A6%82%3A%20%60search_flights%60)%0A%20%20%20%20Agent-%3E%3EMCPServer%3A%20%E9%80%9A%E8%BF%87MCP%E5%8D%8F%E8%AE%AE%E6%89%A7%E8%A1%8C%20%60search_flights%60%20%E5%B7%A5%E5%85%B7%0A%20%20%20%20MCPServer--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E8%88%AA%E7%8F%AD%E6%95%B0%E6%8D%AE%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%8F%90%E4%BA%A4%E8%88%AA%E7%8F%AD%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%AF%B7%E6%B1%82%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%8C%87%E4%BB%A4%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E8%AE%A1%E5%88%92%E5%8F%8A%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%20(%E4%BE%8B%E5%A6%82%3A%20%60book_hotel%60)%0A%20%20%20%20Agent-%3E%3EMCPServer%3A%20%E9%80%9A%E8%BF%87MCP%E5%8D%8F%E8%AE%AE%E6%89%A7%E8%A1%8C%20%60book_hotel%60%20%E5%B7%A5%E5%85%B7%0A%20%20%20%20MCPServer--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E9%85%92%E5%BA%97%E9%A2%84%E8%AE%A2%E7%A1%AE%E8%AE%A4%E4%BF%A1%E6%81%AF%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%8F%90%E4%BA%A4%E7%A1%AE%E8%AE%A4%E4%BF%A1%E6%81%AF%E5%B9%B6%E8%AF%B7%E6%B1%82%E7%94%9F%E6%88%90%E6%9C%80%E7%BB%88%E6%91%98%E8%A6%81%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E7%94%9F%E6%88%90%E5%AE%8C%E6%95%B4%E7%9A%84%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92%0A%20%20%20%20Agent--%3E%3EUser%3A%20%E5%91%88%E7%8E%B0%E6%9C%80%E7%BB%88%E7%9A%84%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92%0A"})]),fallback:a(()=>[...s[0]||(s[0]=[E(" Loading... ",-1)])]),_:1})),s[3]||(s[3]=n("h2",{id:"场景分析-一个实际案例",tabindex:"-1"},[E("场景分析：一个实际案例 "),n("a",{class:"header-anchor",href:"#场景分析-一个实际案例","aria-label":'Permalink to "场景分析：一个实际案例"'},"​")],-1)),s[4]||(s[4]=n("p",null,[E("让我们通过一个看似简单的用户请求，来解析这些技术之间复杂的协同工作："),n("strong",null,"“提醒我女朋友喝水，并给她发一张可爱的猫咪图片。”")],-1)),(i(),l(r,null,{default:a(()=>[A(t,{id:"mermaid-150",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20User%20as%20%E7%94%A8%E6%88%B7%0A%20%20%20%20participant%20Agent%20as%20%E6%99%BA%E8%83%BD%E4%BD%93%0A%20%20%20%20participant%20LLM%20as%20LLM%E6%8E%A8%E7%90%86%E6%A0%B8%E5%BF%83%0A%20%20%20%20participant%20ContactsTool%20as%20%E8%81%94%E7%B3%BB%E4%BA%BA%E5%B7%A5%E5%85%B7%20(MCP%E6%9C%8D%E5%8A%A1)%0A%20%20%20%20participant%20ImageTool%20as%20%E5%9B%BE%E7%89%87%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%20(MCP%E6%9C%8D%E5%8A%A1)%0A%20%20%20%20participant%20MMSTool%20as%20%E5%BD%A9%E4%BF%A1%E5%B7%A5%E5%85%B7%20(MCP%E6%9C%8D%E5%8A%A1)%0A%0A%20%20%20%20User-%3E%3EAgent%3A%20%22%E6%8F%90%E9%86%92%E6%88%91%E5%A5%B3%E6%9C%8B%E5%8F%8B%E5%96%9D%E6%B0%B4%EF%BC%8C%E5%B9%B6%E7%BB%99%E5%A5%B9%E5%8F%91%E5%BC%A0%E7%8C%AB%E5%92%AA%E5%9B%BE%E7%89%87%22%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%8F%90%E4%BA%A4%E7%9B%AE%E6%A0%87%E5%92%8C%5Bcontacts%2C%20image%2C%20mms%5D%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E8%AE%A1%E5%88%92%EF%BC%9A1.%E6%89%BE%E8%81%94%E7%B3%BB%E4%BA%BA%202.%E6%89%BE%E5%9B%BE%203.%E5%8F%91%E9%80%81.%20%3Cbr%2F%3E%20%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%3A%20%60contacts.find('girlfriend')%60%0A%20%20%20%20Agent-%3E%3EContactsTool%3A%20%E6%89%A7%E8%A1%8C%20%60find('girlfriend')%60%0A%20%20%20%20ContactsTool--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F%20%60%2B1234567890%60%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%8F%90%E4%BA%A4%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8B%E4%B8%80%E6%AD%A5%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%3A%20%60image_search.find('cute%20cat')%60%0A%20%20%20%20Agent-%3E%3EImageTool%3A%20%E6%89%A7%E8%A1%8C%20%60find('cute%20cat')%60%0A%20%20%20%20ImageTool--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E5%9B%BE%E7%89%87URL%20%60...%2Fcat.jpg%60%0A%20%20%20%20Agent-%3E%3ELLM%3A%20%E6%8F%90%E4%BA%A4%E5%9B%BE%E7%89%87URL%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8B%E4%B8%80%E6%AD%A5%0A%20%20%20%20LLM--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%3A%20%60mms.send('%2B1234567890'%2C%20'%E5%96%9D%E6%B0%B4%E6%8F%90%E9%86%92'%2C%20'...%2Fcat.jpg')%60%0A%20%20%20%20Agent-%3E%3EMMSTool%3A%20%E6%89%A7%E8%A1%8C%20%60mms.send(...)%60%0A%20%20%20%20MMSTool--%3E%3EAgent%3A%20%E8%BF%94%E5%9B%9E%20%60%7B%22status%22%3A%20%22success%22%7D%60%0A%20%20%20%20Agent-%3E%3EUser%3A%20%22%E4%BB%BB%E5%8A%A1%E5%B7%B2%E5%AE%8C%E6%88%90%22%0A"})]),fallback:a(()=>[...s[1]||(s[1]=[E(" Loading... ",-1)])]),_:1})),s[5]||(s[5]=e(`<ol><li><strong>用户提示</strong>: 用户在一个由AI Agent驱动的应用中输入此请求。</li><li><strong>Agent与LLM推理</strong>: Agent接收到提示后，将此目标连同其可访问的工具描述（如 <code>contacts.find(name)</code>、<code>mms.send(contact, text, attachment_url)</code> 和 <code>image_search.find(query)</code>）一起转发给其LLM核心。LLM推理出此任务需要多个步骤，并制定一个行动计划。</li><li><strong>首次函数调用</strong>: LLM确定首先需要获取女友的联系方式。它生成一个结构化的JSON输出：<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tool_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;contacts.find&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;girlfriend&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><strong>MCP通信与工具执行</strong>: Agent（作为MCP客户端）将此请求发送到托管 <code>contacts</code> 工具的MCP服务器。服务器执行该函数，查询本地联系人数据库，并返回联系方式。</li><li><strong>二次函数调用</strong>: Agent用获取到的联系方式更新其内部状态，并将进展情况反馈给LLM。LLM的计划进入下一步：寻找图片。它输出：<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tool_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image_search.find&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cute cat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><strong>工具执行</strong>: Agent将此请求发送给相应的MCP服务器，该服务器调用一个外部的图像搜索API，并返回一张猫咪图片的URL。</li><li><strong>最终函数调用</strong>: Agent现在同时拥有了联系方式和图片URL，它将这些信息再次报告给LLM。LLM生成完成任务所需的最终函数调用：<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tool_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mms.send&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;contact&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好呀！提醒你记得喝水哦。:)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;attachment_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://.../cute_cat.jpg&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><strong>最终执行与响应</strong>: Agent通过MCP服务器执行这最后一次调用，发送彩信。在收到成功回执后，Agent向用户报告任务已成功完成。</li></ol>`,1))])}const b=o(B,[["render",h]]);export{F as __pageData,b as default};
