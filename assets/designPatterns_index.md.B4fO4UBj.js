import{_ as a,c as r,o as e,a8 as d}from"./chunks/framework.5lfeZbzV.js";const b=JSON.parse('{"title":"设计模式专栏","description":"","frontmatter":{},"headers":[],"relativePath":"designPatterns/index.md","filePath":"designPatterns/index.md","lastUpdated":1749997183000}'),l={name:"designPatterns/index.md"};function i(o,t,n,s,h,c){return e(),r("div",null,[...t[0]||(t[0]=[d('<h1 id="设计模式专栏" tabindex="-1">设计模式专栏 <a class="header-anchor" href="#设计模式专栏" aria-label="Permalink to &quot;设计模式专栏&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>欢迎来到设计模式专栏！这里将系统性地介绍软件设计中的经典设计模式，帮助你写出更优雅、更可维护的代码。</p></div><h2 id="🎯-专栏简介" tabindex="-1">🎯 专栏简介 <a class="header-anchor" href="#🎯-专栏简介" aria-label="Permalink to &quot;🎯 专栏简介&quot;">​</a></h2><p>设计模式是软件工程中解决常见问题的可复用解决方案。它们代表了最佳实践，是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>本专栏将深入浅出地介绍 23 种经典的 GoF（Gang of Four）设计模式，以及一些现代开发中常用的其他模式。每个模式都会包含：</p><ul><li>📖 <strong>模式定义</strong>：清晰的概念解释</li><li>🎯 <strong>使用场景</strong>：什么时候使用这个模式</li><li>💡 <strong>实现方式</strong>：多种编程语言的代码示例</li><li>⚖️ <strong>优缺点分析</strong>：客观评价模式的利弊</li><li>🌟 <strong>实际应用</strong>：真实项目中的使用案例</li><li>🔄 <strong>相关模式</strong>：与其他模式的关系和区别</li></ul><h2 id="🏗️-设计模式分类" tabindex="-1">🏗️ 设计模式分类 <a class="header-anchor" href="#🏗️-设计模式分类" aria-label="Permalink to &quot;🏗️ 设计模式分类&quot;">​</a></h2><p>根据 GoF 的分类方法，设计模式主要分为三大类：</p><h3 id="🏭-创建型模式-creational-patterns" tabindex="-1">🏭 创建型模式 (Creational Patterns) <a class="header-anchor" href="#🏭-创建型模式-creational-patterns" aria-label="Permalink to &quot;🏭 创建型模式 (Creational Patterns)&quot;">​</a></h3><blockquote><p>关注对象的创建过程，使系统独立于如何创建、组合和表示对象</p></blockquote><table tabindex="0"><thead><tr><th>模式名称</th><th>核心思想</th><th>使用频率</th><th>难度等级</th></tr></thead><tbody><tr><td><a href="./creational/singleton">单例模式 (Singleton)</a></td><td>确保一个类只有一个实例</td><td>⭐⭐⭐⭐⭐</td><td>🟢 简单</td></tr><tr><td><a href="./creational/factory-method">工厂方法 (Factory Method)</a></td><td>创建对象的接口，让子类决定实例化哪个类</td><td>⭐⭐⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./creational/abstract-factory">抽象工厂 (Abstract Factory)</a></td><td>创建相关对象家族的接口</td><td>⭐⭐⭐</td><td>🔴 困难</td></tr><tr><td><a href="./creational/builder">建造者模式 (Builder)</a></td><td>分步骤构建复杂对象</td><td>⭐⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./creational/prototype">原型模式 (Prototype)</a></td><td>通过复制现有实例创建新对象</td><td>⭐⭐</td><td>🟡 中等</td></tr></tbody></table><h3 id="🔗-结构型模式-structural-patterns" tabindex="-1">🔗 结构型模式 (Structural Patterns) <a class="header-anchor" href="#🔗-结构型模式-structural-patterns" aria-label="Permalink to &quot;🔗 结构型模式 (Structural Patterns)&quot;">​</a></h3><blockquote><p>关注类和对象的组合，形成更大的结构</p></blockquote><table tabindex="0"><thead><tr><th>模式名称</th><th>核心思想</th><th>使用频率</th><th>难度等级</th></tr></thead><tbody><tr><td><a href="./structural/adapter">适配器模式 (Adapter)</a></td><td>让不兼容的接口能够合作</td><td>⭐⭐⭐⭐</td><td>🟢 简单</td></tr><tr><td><a href="./structural/bridge">桥接模式 (Bridge)</a></td><td>将抽象与实现分离</td><td>⭐⭐</td><td>🔴 困难</td></tr><tr><td><a href="./structural/composite">组合模式 (Composite)</a></td><td>将对象组合成树形结构</td><td>⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./structural/decorator">装饰器模式 (Decorator)</a></td><td>动态地给对象添加新功能</td><td>⭐⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./structural/facade">外观模式 (Facade)</a></td><td>为复杂子系统提供简单接口</td><td>⭐⭐⭐⭐⭐</td><td>🟢 简单</td></tr><tr><td><a href="./structural/flyweight">享元模式 (Flyweight)</a></td><td>通过共享减少内存使用</td><td>⭐</td><td>🔴 困难</td></tr><tr><td><a href="./structural/proxy">代理模式 (Proxy)</a></td><td>为其他对象提供代理以控制访问</td><td>⭐⭐⭐⭐</td><td>🟡 中等</td></tr></tbody></table><h3 id="🎭-行为型模式-behavioral-patterns" tabindex="-1">🎭 行为型模式 (Behavioral Patterns) <a class="header-anchor" href="#🎭-行为型模式-behavioral-patterns" aria-label="Permalink to &quot;🎭 行为型模式 (Behavioral Patterns)&quot;">​</a></h3><blockquote><p>关注对象之间的通信和职责分配</p></blockquote><table tabindex="0"><thead><tr><th>模式名称</th><th>核心思想</th><th>使用频率</th><th>难度等级</th></tr></thead><tbody><tr><td><a href="./behavioral/chain-of-responsibility">责任链模式 (Chain of Responsibility)</a></td><td>将请求沿着处理者链传递</td><td>⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/command">命令模式 (Command)</a></td><td>将请求封装为对象</td><td>⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/interpreter">解释器模式 (Interpreter)</a></td><td>定义语言的语法表示</td><td>⭐</td><td>🔴 困难</td></tr><tr><td><a href="./behavioral/iterator">迭代器模式 (Iterator)</a></td><td>顺序访问集合元素</td><td>⭐⭐⭐⭐⭐</td><td>🟢 简单</td></tr><tr><td><a href="./behavioral/mediator">中介者模式 (Mediator)</a></td><td>定义对象间的交互方式</td><td>⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/memento">备忘录模式 (Memento)</a></td><td>保存和恢复对象状态</td><td>⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/observer">观察者模式 (Observer)</a></td><td>定义对象间的一对多依赖</td><td>⭐⭐⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/state">状态模式 (State)</a></td><td>根据内部状态改变行为</td><td>⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/strategy">策略模式 (Strategy)</a></td><td>定义算法家族并可互换</td><td>⭐⭐⭐⭐</td><td>🟢 简单</td></tr><tr><td><a href="./behavioral/template-method">模板方法 (Template Method)</a></td><td>定义算法骨架，子类实现细节</td><td>⭐⭐⭐</td><td>🟡 中等</td></tr><tr><td><a href="./behavioral/visitor">访问者模式 (Visitor)</a></td><td>在不修改类的前提下定义新操作</td><td>⭐</td><td>🔴 困难</td></tr></tbody></table><h2 id="🚀-现代设计模式" tabindex="-1">🚀 现代设计模式 <a class="header-anchor" href="#🚀-现代设计模式" aria-label="Permalink to &quot;🚀 现代设计模式&quot;">​</a></h2><p>除了经典的 GoF 模式，现代软件开发中还涌现出许多新的模式：</p><h3 id="📱-前端开发模式" tabindex="-1">📱 前端开发模式 <a class="header-anchor" href="#📱-前端开发模式" aria-label="Permalink to &quot;📱 前端开发模式&quot;">​</a></h3><ul><li><a href="./modern/mvc">MVC 模式</a> - 模型-视图-控制器架构</li><li><a href="./modern/mvp">MVP 模式</a> - 模型-视图-展示器架构</li><li><a href="./modern/mvvm">MVVM 模式</a> - 模型-视图-视图模型架构</li><li><a href="./modern/pub-sub">发布订阅模式 (Pub/Sub)</a> - 事件驱动</li><li><a href="./modern/dependency-injection">依赖注入 (Dependency Injection)</a> - 控制反转</li></ul><h3 id="🌐-后端开发模式" tabindex="-1">🌐 后端开发模式 <a class="header-anchor" href="#🌐-后端开发模式" aria-label="Permalink to &quot;🌐 后端开发模式&quot;">​</a></h3><ul><li><a href="./microservices/cqrs">CQRS</a> - 命令查询职责分离</li></ul><h3 id="☁️-微服务模式" tabindex="-1">☁️ 微服务模式 <a class="header-anchor" href="#☁️-微服务模式" aria-label="Permalink to &quot;☁️ 微服务模式&quot;">​</a></h3><ul><li><a href="./microservices/api-gateway">API 网关 (API Gateway)</a> - 统一入口</li><li><a href="./microservices/circuit-breaker">断路器 (Circuit Breaker)</a> - 故障隔离</li><li><a href="./microservices/service-discovery">服务发现 (Service Discovery)</a> - 动态定位</li><li><a href="./microservices/event-sourcing">事件溯源 (Event Sourcing)</a> - 状态重建</li></ul><h2 id="📚-学习路径" tabindex="-1">📚 学习路径 <a class="header-anchor" href="#📚-学习路径" aria-label="Permalink to &quot;📚 学习路径&quot;">​</a></h2><h3 id="🌱-初学者路径" tabindex="-1">🌱 初学者路径 <a class="header-anchor" href="#🌱-初学者路径" aria-label="Permalink to &quot;🌱 初学者路径&quot;">​</a></h3><p>推荐按以下顺序学习，从简单到复杂：</p><ol><li><p><strong>基础模式</strong> (必学)</p><ul><li><a href="./creational/singleton">单例模式</a> - 最简单的创建型模式</li><li><a href="./creational/factory-method">工厂方法</a> - 理解对象创建的抽象</li><li><a href="./behavioral/strategy">策略模式</a> - 算法封装的典型例子</li><li><a href="./behavioral/observer">观察者模式</a> - 事件驱动编程基础</li></ul></li><li><p><strong>实用模式</strong> (常用)</p><ul><li><a href="./structural/decorator">装饰器模式</a> - 功能扩展</li><li><a href="./structural/adapter">适配器模式</a> - 接口兼容</li><li><a href="./structural/facade">外观模式</a> - 简化复杂接口</li><li><a href="./behavioral/command">命令模式</a> - 操作封装</li></ul></li><li><p><strong>进阶模式</strong> (深入)</p><ul><li><a href="./creational/builder">建造者模式</a> - 复杂对象构建</li><li><a href="./structural/proxy">代理模式</a> - 访问控制</li><li><a href="./behavioral/state">状态模式</a> - 状态管理</li><li><a href="./behavioral/template-method">模板方法</a> - 算法框架</li></ul></li></ol><h3 id="🚀-进阶开发者路径" tabindex="-1">🚀 进阶开发者路径 <a class="header-anchor" href="#🚀-进阶开发者路径" aria-label="Permalink to &quot;🚀 进阶开发者路径&quot;">​</a></h3><p>如果你已有一定经验，可以重点关注：</p><ol><li><p><strong>架构级模式</strong></p><ul><li><a href="./creational/abstract-factory">抽象工厂</a> - 产品族创建</li><li><a href="./structural/bridge">桥接模式</a> - 抽象与实现分离</li><li><a href="./behavioral/mediator">中介者模式</a> - 复杂交互管理</li></ul></li><li><p><strong>性能优化模式</strong></p><ul><li><a href="./structural/flyweight">享元模式</a> - 内存优化</li><li><a href="./creational/prototype">原型模式</a> - 创建优化</li></ul></li><li><p><strong>现代开发模式</strong></p><ul><li><a href="./modern/dependency-injection">依赖注入</a> - 现代框架基础</li><li><a href="./microservices/cqrs">CQRS</a> - 高性能架构</li><li><a href="./microservices/event-sourcing">事件溯源</a> - 分布式系统</li></ul></li></ol><h2 id="🛠️-编程语言支持" tabindex="-1">🛠️ 编程语言支持 <a class="header-anchor" href="#🛠️-编程语言支持" aria-label="Permalink to &quot;🛠️ 编程语言支持&quot;">​</a></h2><p>本专栏提供多种编程语言的实现示例：</p><table tabindex="0"><thead><tr><th>语言</th><th>支持程度</th><th>特色</th></tr></thead><tbody><tr><td><strong>JavaScript/TypeScript</strong></td><td>🟢 完整支持</td><td>现代前端开发</td></tr><tr><td><strong>Java</strong></td><td>🟢 完整支持</td><td>企业级开发</td></tr><tr><td><strong>Python</strong></td><td>🟢 完整支持</td><td>简洁易懂</td></tr><tr><td><strong>C#</strong></td><td>🟡 主要模式</td><td>.NET 生态</td></tr><tr><td><strong>Go</strong></td><td>🟡 主要模式</td><td>云原生开发</td></tr><tr><td><strong>Rust</strong></td><td>🟡 部分模式</td><td>系统级编程</td></tr></tbody></table><h2 id="🎯-如何使用本专栏" tabindex="-1">🎯 如何使用本专栏 <a class="header-anchor" href="#🎯-如何使用本专栏" aria-label="Permalink to &quot;🎯 如何使用本专栏&quot;">​</a></h2><h3 id="📖-阅读建议" tabindex="-1">📖 阅读建议 <a class="header-anchor" href="#📖-阅读建议" aria-label="Permalink to &quot;📖 阅读建议&quot;">​</a></h3><ol><li><strong>按需学习</strong>：根据实际项目需求选择相关模式</li><li><strong>动手实践</strong>：每学一个模式都要写代码实现</li><li><strong>对比分析</strong>：理解不同模式的适用场景和区别</li><li><strong>项目应用</strong>：在实际项目中尝试应用学到的模式</li></ol><h3 id="🔍-查找方式" tabindex="-1">🔍 查找方式 <a class="header-anchor" href="#🔍-查找方式" aria-label="Permalink to &quot;🔍 查找方式&quot;">​</a></h3><ul><li><strong>按分类浏览</strong>：根据创建型、结构型、行为型分类查找</li><li><strong>按难度筛选</strong>：从简单模式开始，逐步提升</li><li><strong>按使用频率</strong>：优先学习高频使用的模式</li><li><strong>按应用场景</strong>：根据前端、后端、微服务等场景选择</li></ul><h3 id="💡-学习技巧" tabindex="-1">💡 学习技巧 <a class="header-anchor" href="#💡-学习技巧" aria-label="Permalink to &quot;💡 学习技巧&quot;">​</a></h3><ul><li><strong>理解问题</strong>：每个模式都是为了解决特定问题而生</li><li><strong>记住结构</strong>：掌握模式的类图和交互图</li><li><strong>关注变化</strong>：理解模式如何应对需求变化</li><li><strong>避免滥用</strong>：不要为了使用模式而使用模式</li></ul><h2 id="🤝-贡献指南" tabindex="-1">🤝 贡献指南 <a class="header-anchor" href="#🤝-贡献指南" aria-label="Permalink to &quot;🤝 贡献指南&quot;">​</a></h2><p>欢迎为本专栏贡献内容！你可以：</p><ul><li>🐛 <strong>报告错误</strong>：发现文档或代码错误</li><li>💡 <strong>提出建议</strong>：改进现有内容的建议</li><li>📝 <strong>补充内容</strong>：添加新的示例或解释</li><li>🌍 <strong>翻译支持</strong>：提供其他语言版本</li><li>🔧 <strong>代码优化</strong>：改进示例代码质量</li></ul><h2 id="📞-联系方式" tabindex="-1">📞 联系方式 <a class="header-anchor" href="#📞-联系方式" aria-label="Permalink to &quot;📞 联系方式&quot;">​</a></h2><p>如果你有任何问题或建议，欢迎通过以下方式联系：</p><ul><li>📧 <strong>邮箱</strong>：[your-email@example.com]</li><li>💬 <strong>讨论区</strong>：[GitHub Discussions]</li><li>🐦 <strong>社交媒体</strong>：[@your-handle]</li></ul><h2 id="📈-更新日志" tabindex="-1">📈 更新日志 <a class="header-anchor" href="#📈-更新日志" aria-label="Permalink to &quot;📈 更新日志&quot;">​</a></h2><ul><li><strong>2024-01-15</strong>：专栏正式上线，包含 23 种 GoF 模式</li><li><strong>2024-01-20</strong>：添加现代设计模式章节</li><li><strong>2024-01-25</strong>：增加微服务模式内容</li><li><strong>2024-02-01</strong>：完善代码示例和实际应用案例</li></ul><hr><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>�� <strong>学习建议</strong>：设计模式不是银弹，关键是理解其背后的设计思想。在实际开发中，要根据具体情况选择合适的模式，避免过度设计。</p></div><p><strong>开始你的设计模式学习之旅吧！</strong> 🚀</p><hr><p><em>最后更新：2024年2月1日</em></p>',55)])])}const g=a(l,[["render",i]]);export{b as __pageData,g as default};
