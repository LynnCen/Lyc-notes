import{_ as F,C as i,c as o,o as e,a8 as _,b as r,w as t,a as n,G as d,a9 as s}from"./chunks/framework.CrIyVKdD.js";const q=JSON.parse('{"title":"动态规划","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/dp.md","filePath":"algorithm/dp.md","lastUpdated":1745912431000}'),A={name:"algorithm/dp.md"};function h(p,a,c,m,u,D){const l=i("Mermaid");return e(),o("div",null,[a[1]||(a[1]=_('<h1 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h1><h2 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-label="Permalink to &quot;核心思想&quot;">​</a></h2><p>**动态规划(Dynamic Programming，简称DP)**是解决具有重叠子问题和最优子结构问题的算法范式。与分治法不同，动态规划会保存已解决子问题的结果，避免重复计算，从而大幅提高效率。</p><p>适用条件：</p><ul><li>最优子结构：问题的最优解包含其子问题的最优解。换言之，可以通过组合子问题的最优解得到原问题的最优解。</li><li>重叠子问题：在求解过程中，相同的子问题会被重复计算多次。动态规划通过&quot;记忆化&quot;避免这种重复计算。</li></ul><h2 id="解题步骤" tabindex="-1">解题步骤 <a class="header-anchor" href="#解题步骤" aria-label="Permalink to &quot;解题步骤&quot;">​</a></h2><ol><li>定义状态：明确表示&quot;问题规模缩小&quot;的状态变量</li><li>确定状态转移方程：找出状态之间的递推关系</li><li>确定边界条件：最小规模问题的解</li><li>确定计算顺序：通常从小到大或从大到小</li><li>实现代码：自顶向下（递归+记忆化）或自底向上（迭代）</li></ol><h2 id="经典问题" tabindex="-1">经典问题 <a class="header-anchor" href="#经典问题" aria-label="Permalink to &quot;经典问题&quot;">​</a></h2><h3 id="斐波那契数列" tabindex="-1">斐波那契数列 <a class="header-anchor" href="#斐波那契数列" aria-label="Permalink to &quot;斐波那契数列&quot;">​</a></h3><p>斐波那契数列的定义：</p><ul><li>F(0) = 0</li><li>F(1) = 1</li><li>F(n) = F(n-1) + F(n-2) (n &gt;= 2)</li></ul><blockquote><p>求斐波那契数列F(n) = F(n-1) + F(n-2)时，F(5)计算过程中，F(2)、F(3)会被重复计算多次。</p></blockquote><p>// 画出F(5)的树结构（二叉树表示）</p>',13)),(e(),r(s,null,{default:t(()=>[d(l,{id:"mermaid-88",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20F5%5BF(5)%5D%20%20%0A%20%20%20%20F4_1%5BF(4)%5D%0A%20%20%20%20F3_1%5BF(3)%5D%0A%20%20%20%20F2_1%5BF(2)%5D%0A%20%20%20%20F1_1%5BF(1)%5D%0A%20%20%20%20F0_1%5BF(0)%5D%0A%20%20%20%20F2_2%5BF(2)%5D%0A%20%20%20%20F1_2%5BF(1)%5D%0A%20%20%20%20F0_2%5BF(0)%5D%0A%20%20%20%20F3_2%5BF(3)%5D%0A%20%20%20%20F2_3%5BF(2)%5D%0A%20%20%20%20F1_3%5BF(1)%5D%0A%20%20%20%20F0_3%5BF(0)%5D%0A%20%20%20%20F1_4%5BF(1)%5D%0A%0A%20%20%20%20F5%20--%3E%20F4_1%0A%20%20%20%20F5%20--%3E%20F3_2%0A%0A%20%20%20%20F4_1%20--%3E%20F3_1%0A%20%20%20%20F4_1%20--%3E%20F2_2%0A%0A%20%20%20%20F3_1%20--%3E%20F2_1%0A%20%20%20%20F3_1%20--%3E%20F1_2%0A%0A%20%20%20%20F2_1%20--%3E%20F1_1%0A%20%20%20%20F2_1%20--%3E%20F0_1%0A%0A%20%20%20%20F2_2%20--%3E%20F1_3%0A%20%20%20%20F2_2%20--%3E%20F0_2%0A%0A%20%20%20%20F3_2%20--%3E%20F2_3%0A%20%20%20%20F3_2%20--%3E%20F1_4%0A%0A%20%20%20%20F2_3%20--%3E%20F1_4%0A%20%20%20%20F2_3%20--%3E%20F0_3%0A"})]),fallback:t(()=>[...a[0]||(a[0]=[n(" Loading... ",-1)])]),_:1}))])}const E=F(A,[["render",h]]);export{q as __pageData,E as default};
