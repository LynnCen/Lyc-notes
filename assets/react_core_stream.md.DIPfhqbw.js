import{_ as i,c as a,o as e,a8 as n}from"./chunks/framework.5lfeZbzV.js";const d=JSON.parse('{"title":"React 流式渲染与选择性注水详解","description":"","frontmatter":{},"headers":[],"relativePath":"react/core/stream.md","filePath":"react/core/stream.md","lastUpdated":1744799993000}'),t={name:"react/core/stream.md"};function l(r,s,p,h,o,c){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="react-流式渲染与选择性注水详解" tabindex="-1">React 流式渲染与选择性注水详解 <a class="header-anchor" href="#react-流式渲染与选择性注水详解" aria-label="Permalink to &quot;React 流式渲染与选择性注水详解&quot;">​</a></h1><h2 id="一、背景-传统-ssr-的局限性" tabindex="-1">一、背景：传统 SSR 的局限性 <a class="header-anchor" href="#一、背景-传统-ssr-的局限性" aria-label="Permalink to &quot;一、背景：传统 SSR 的局限性&quot;">​</a></h2><p>在深入流式渲染之前，我们先回顾一下传统的服务器端渲染（Server-Side Rendering, SSR）及其面临的挑战。</p><h3 id="_1-什么是传统-ssr" tabindex="-1">1. 什么是传统 SSR？ <a class="header-anchor" href="#_1-什么是传统-ssr" aria-label="Permalink to &quot;1. 什么是传统 SSR？&quot;">​</a></h3><p>传统 SSR 的核心思想是在服务器端将 React 组件渲染成 HTML 字符串，然后将这个 HTML 发送给浏览器。浏览器接收到 HTML 后可以立即显示页面内容，即使用户的 JavaScript 还没有下载或执行。这对于提升<strong>首次内容绘制 (FCP)</strong> 和<strong>搜索引擎优化 (SEO)</strong> 非常有利。</p><h3 id="_2-传统-ssr-的-瀑布流-瓶颈" tabindex="-1">2. 传统 SSR 的&quot;瀑布流&quot;瓶颈 <a class="header-anchor" href="#_2-传统-ssr-的-瀑布流-瓶颈" aria-label="Permalink to &quot;2. 传统 SSR 的&quot;瀑布流&quot;瓶颈&quot;">​</a></h3><p>尽管 SSR 能让用户更快看到内容，但传统的 React SSR 流程存在一个固有的&quot;瀑布流&quot;问题，主要体现在以下几个步骤 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">[1]</a>：</p><ol><li><strong>数据获取 (Server)</strong>：服务器需要等待<strong>整个应用</strong>所需的所有数据都获取完毕。</li><li><strong>HTML 渲染 (Server)</strong>：服务器将<strong>整个应用</strong>渲染成一个完整的 HTML 字符串。</li><li><strong>代码加载 (Client)</strong>：浏览器下载<strong>整个应用</strong>所需的 JavaScript 代码（React 库 + 应用代码）。</li><li><strong>注水 (Hydration) (Client)</strong>：浏览器执行 JavaScript 代码，将事件监听器和交互逻辑附加到服务器生成的<strong>整个应用</strong>的 HTML 上，使其变得可交互。</li></ol><p><img src="https://camo.githubusercontent.com/9940d500dbf0d3724068af8b6e658a14b43c9080cf8b4cec4112f1b2ca0e2272/68747470733a2f2f717569702e636f6d2f626c6f622f5963474141416b314234322f39656b30786570614f5a653842764679503244652d773f613d6131796c464577695264317a79476353464a4451676856726161375839334c6c726134303732794c49724d61" alt="传统 SSR 流程"><em>（图片来源：<a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">React 18 Working Group Discussion #37</a>）</em></p><p>这里的关键问题是&quot;<strong>整个应用</strong>&quot;：</p><ul><li><strong>All-or-Nothing 数据获取</strong>：如果应用中任何一个数据请求很慢，都会阻塞整个页面的 HTML 生成。</li><li><strong>All-or-Nothing HTML 渲染</strong>：服务器必须等待整个应用渲染完成才能发送 HTML。</li><li><strong>All-or-Nothing 代码加载</strong>：浏览器必须下载完所有 JavaScript 才能开始注水。</li><li><strong>All-or-Nothing 注水</strong>：React 必须一次性为整个应用注水，如果任何一部分代码或逻辑复杂，都会拖慢整个页面的可交互时间 (TTI)。</li></ul><p>这导致即使页面的大部分内容很快准备好了，用户也必须等待最慢的部分完成后才能看到或与之交互。</p><h2 id="二、react-18-的新架构-流式-ssr-与选择性注水" tabindex="-1">二、React 18+ 的新架构：流式 SSR 与选择性注水 <a class="header-anchor" href="#二、react-18-的新架构-流式-ssr-与选择性注水" aria-label="Permalink to &quot;二、React 18+ 的新架构：流式 SSR 与选择性注水&quot;">​</a></h2><p>为了解决传统 SSR 的瓶颈，React 18 引入了全新的并发渲染架构，其核心是<strong>流式 SSR (Streaming SSR)</strong> 和<strong>选择性注水 (Selective Hydration)</strong>，并与 <code>&lt;Suspense&gt;</code> 组件紧密结合 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">[1]</a>。</p><h3 id="_1-流式-ssr-streaming-ssr" tabindex="-1">1. 流式 SSR (Streaming SSR) <a class="header-anchor" href="#_1-流式-ssr-streaming-ssr" aria-label="Permalink to &quot;1. 流式 SSR (Streaming SSR)&quot;">​</a></h3><p>流式 SSR 允许你在服务器上<strong>边渲染边发送</strong> HTML 片段到浏览器，而不是等待整个页面渲染完成。</p><p><strong>核心思想</strong>：</p><ul><li><strong>尽早发送 HTML Shell</strong>：服务器不再需要等待所有数据和渲染完成，而是先发送页面的基本骨架（Shell），包括那些不需要异步数据的部分。</li><li><strong>利用 <code>&lt;Suspense&gt;</code> 解耦</strong>：将应用中需要异步加载数据或代码的部分用 <code>&lt;Suspense&gt;</code> 包裹起来。在服务器端，当遇到 <code>&lt;Suspense&gt;</code> 边界且其内容尚未准备好时，React 会先发送其 <code>fallback</code> UI（通常是加载状态指示器）对应的 HTML。</li><li><strong>流式注入内容</strong>：一旦 <code>&lt;Suspense&gt;</code> 包裹的内容（包括数据和代码）在服务器端准备就绪，React 会通过同一个流（stream）将这部分内容的 HTML 和一个内联的 <code>&lt;script&gt;</code> 标签发送到浏览器。这个脚本负责将 HTML 精确地插入到之前 <code>fallback</code> 的位置。</li></ul><p><img src="https://camo.githubusercontent.com/cbaa6f4d2c5395c4e4e3ca736d98f5dc492f693d67c6c73b852baddd226d5f92/68747470733a2f2f717569702e636f6d2f626c6f622f5963474141416b314234322f534f76496e4f2d73625973566d5166334159372d52413f613d675a6461346957316f5061434668644e36414f48695a396255644e78715373547a7a42326c32686b744a3061" alt="流式 SSR 过程"><em>（图片来源：<a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">React 18 Working Group Discussion #37</a>）</em></p><p><strong>优势</strong>：</p><ul><li><strong>更快的 TTFB (Time to First Byte)</strong>：浏览器能更快地接收到初始 HTML。</li><li><strong>更快的 FCP (First Contentful Paint)</strong>：用户能更快地看到页面的主要结构和非异步内容。</li><li><strong>更快的 LCP (Largest Contentful Paint)</strong>：关键内容（如果不在 Suspense 边界内或其数据很快可用）可以更快地绘制。</li><li><strong>不受慢速数据拖累</strong>：应用中某个慢速的数据请求不会阻塞其他快速部分的 HTML 发送。</li></ul><h3 id="_2-选择性注水-selective-hydration" tabindex="-1">2. 选择性注水 (Selective Hydration) <a class="header-anchor" href="#_2-选择性注水-selective-hydration" aria-label="Permalink to &quot;2. 选择性注水 (Selective Hydration)&quot;">​</a></h3><p>选择性注水与流式 SSR 相辅相成，它允许浏览器在接收到 HTML 片段和对应的 JavaScript 代码后，<strong>逐步地、非阻塞地</strong>对页面的不同部分进行注水，而不是像以前那样必须一次性完成整个页面的注水。</p><p><strong>核心思想</strong>：</p><ul><li><strong>独立注水单元</strong>：<code>&lt;Suspense&gt;</code> 边界不仅定义了流式渲染的单元，也定义了选择性注水的单元。每个 <code>&lt;Suspense&gt;</code> 包裹的内容可以独立于应用的其他部分进行注水。</li><li><strong>代码分割集成</strong>：当使用 <code>React.lazy()</code> 进行代码分割时，React 会自动等待组件代码加载完成后再尝试对其 <code>&lt;Suspense&gt;</code> 边界进行注水，并且这不会阻塞其他部分的注水。</li><li><strong>中断与恢复</strong>：注水过程是可中断的。如果在注水过程中发生更高优先级的任务（如用户交互），React 会暂停当前的注水，优先处理用户事件，稍后再恢复注水。</li><li><strong>优先级注水</strong>：React 会根据用户交互来动态提升注水的优先级。例如，如果用户点击了某个尚未完成注水的 <code>&lt;Suspense&gt;</code> 区域，React 会优先为这个区域进行注水，使其尽快变得可交互。</li></ul><p><img src="https://camo.githubusercontent.com/b433615733974db344b793492137f86a2edfb32c878ed03d47fc365e8c8fc46c/68747470733a2f2f717569702e636f6d2f626c6f622f5963474141416b314234322f715377594e765a58514856423970704e7045344659673f613d6c3150774c4844306b664a61495971474930646a53567173574a345544324c516134764f6a6f4b7249785161" alt="选择性注水"><em>（图片来源：<a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">React 18 Working Group Discussion #37</a>）</em></p><p><strong>优势</strong>：</p><ul><li><strong>更快的 TTI (Time to Interactive)</strong>：用户可以更早地与页面的关键部分进行交互，即使某些次要部分或代码仍在加载/注水。</li><li><strong>更好的用户体验</strong>：即使在慢速网络或低端设备上，页面也能更快地响应用户输入，避免长时间冻结。</li><li><strong>主线程解冻</strong>：将冗长的注水过程分解成小块，穿插在事件循环中执行，避免长时间阻塞主线程。</li></ul><h2 id="三、实现原理与底层机制" tabindex="-1">三、实现原理与底层机制 <a class="header-anchor" href="#三、实现原理与底层机制" aria-label="Permalink to &quot;三、实现原理与底层机制&quot;">​</a></h2><h3 id="_1-rendertopipeablestream-与-rendertoreadablestream" tabindex="-1">1. <code>renderToPipeableStream</code> 与 <code>renderToReadableStream</code> <a class="header-anchor" href="#_1-rendertopipeablestream-与-rendertoreadablestream" aria-label="Permalink to &quot;1. \`renderToPipeableStream\` 与 \`renderToReadableStream\`&quot;">​</a></h3><p>React 18 提供了新的服务端渲染 API 来支持流式渲染：</p><ul><li><p><strong><code>renderToPipeableStream</code> (Node.js 环境)</strong>：</p><ul><li>设计用于 Node.js 后端。</li><li>返回一个可管道化 (pipeable) 的流，可以将其 pipe 到 HTTP 响应流 (<code>response</code>)。</li><li>提供了 <code>onShellReady</code>、<code>onShellError</code>、<code>onAllReady</code>、<code>onError</code> 等回调来控制流的发送时机和处理错误。</li><li><strong><code>onShellReady</code></strong>: 当初始 Shell（<code>Suspense</code> fallback 之外的部分）渲染完成后触发，此时可以将流 pipe 到响应中，让浏览器尽早接收 HTML。</li><li><strong><code>onAllReady</code></strong>: 当所有内容（包括所有 <code>Suspense</code> 边界内的异步内容）都渲染完成时触发。这对于需要完整 HTML 的爬虫或静态生成场景很有用。</li><li><strong>底层</strong>：利用 Node.js 的 <code>stream.Readable</code> 和 <code>stream.Writable</code> 接口，以及 HTTP 的 <strong>Chunked Transfer Encoding</strong> 机制，将渲染产生的 HTML 片段逐步发送给客户端。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// server/render.js (简化示例)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { renderToPipeableStream } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom/server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> didError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderToPipeableStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onShellReady</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Shell 准备好了，开始发送 HTML</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> didError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onShellError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Shell 渲染出错，发送错误状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;h1&gt;Something went wrong&lt;/h1&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onAllReady</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 整个页面（包括 Suspense 内容）都渲染完了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果是爬虫请求，可以在这里结束响应</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对于普通用户，流已经 pipe 到 res 了，这里通常不需要做什么</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    didError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li><li><p><strong><code>renderToReadableStream</code> (Web Streams / Edge Runtimes)</strong>：</p><ul><li>设计用于支持 Web Streams API 的现代 Edge 运行时环境（如 Cloudflare Workers, Deno, Vercel Edge Functions）。</li><li>返回一个 <code>ReadableStream</code>。</li><li>通常与 <code>Response</code> 对象结合使用。</li><li><strong>底层</strong>：基于标准的 Web Streams API (<code>ReadableStream</code>, <code>WritableStream</code>)。</li></ul></li></ul><h3 id="_2-suspense-的角色" tabindex="-1">2. <code>&lt;Suspense&gt;</code> 的角色 <a class="header-anchor" href="#_2-suspense-的角色" aria-label="Permalink to &quot;2. \`&lt;Suspense&gt;\` 的角色&quot;">​</a></h3><p><code>&lt;Suspense&gt;</code> 是这一切的核心协调者：</p><ul><li><strong>服务器端</strong>： <ul><li>当 React 渲染到 <code>&lt;Suspense&gt;</code> 边界时，如果其内部组件需要挂起（例如，等待数据加载或 <code>React.lazy</code> 组件的代码加载），React 不会等待。</li><li>它会立即渲染 <code>fallback</code> prop 指定的 UI，并记录下来&quot;这里需要稍后插入真实内容&quot;。</li><li>当挂起的操作完成后，React 会在后台渲染真实内容，并将对应的 HTML 和一个 JavaScript 调用（用于替换 fallback）发送到流中。</li></ul></li><li><strong>客户端</strong>： <ul><li>浏览器接收到包含 fallback 的初始 HTML 并显示。</li><li>当包含真实内容的 HTML 片段和替换脚本通过流到达时，浏览器执行脚本，将真实内容无缝插入 DOM。</li><li>JavaScript 代码加载后，React 会进行选择性注水。<code>&lt;Suspense&gt;</code> 边界内的内容作为一个独立的单元进行注水。如果它在初始加载时显示了 fallback，那么它的注水会被推迟，直到其代码和内容都准备好。</li></ul></li></ul><h3 id="_3-选择性注水的内部机制" tabindex="-1">3. 选择性注水的内部机制 <a class="header-anchor" href="#_3-选择性注水的内部机制" aria-label="Permalink to &quot;3. 选择性注水的内部机制&quot;">​</a></h3><ul><li><strong>事件捕获与优先级</strong>：在页面完成注水之前，React 会在根节点捕获所有事件。当事件发生时，React 知道用户正在与哪个组件交互。</li><li><strong>优先注水</strong>：如果用户交互发生在一个尚未注水的区域，React 会记录这个事件，并<strong>同步地、优先地</strong>为该区域及其父级 <code>&lt;Suspense&gt;</code> 边界进行注水。注水完成后，React 会重新派发（replay）被捕获的事件，确保交互逻辑正确执行。</li><li><strong>后台注水</strong>：对于没有用户交互的 <code>&lt;Suspense&gt;</code> 边界，React 会在浏览器的空闲时间（利用 <code>requestIdleCallback</code> 或类似机制）以较低优先级进行注水，避免阻塞主线程。</li><li><strong>中断与恢复</strong>：注水过程被设计为可以被更高优先级的任务（如用户输入处理或优先注水）中断。React 会将工作分解成小单元，执行一部分后检查是否有更高优先级的任务，如果有则让出主线程，稍后再恢复执行。这依赖于 React 内部的并发调度器 (Scheduler)。</li></ul><h3 id="_4-html-结构与内联脚本" tabindex="-1">4. HTML 结构与内联脚本 <a class="header-anchor" href="#_4-html-结构与内联脚本" aria-label="Permalink to &quot;4. HTML 结构与内联脚本&quot;">​</a></h3><p>流式渲染生成的 HTML 包含一些特殊的标记和内联脚本：</p><ul><li><strong>Fallback HTML</strong>: 初始发送的 HTML 包含 Suspense 的 <code>fallback</code> 内容，通常带有隐藏的标记或特定 ID。<div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;comments-fallback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Loading comments...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;comments-container&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;display:none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>内联脚本</strong>: 当 Suspense 内容准备好后，服务器发送包含真实 HTML 和替换脚本的片段。<div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;comments-html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- Comments 真实 HTML 内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Comment 1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Comment 2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 简单示意，实际脚本更复杂</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;comments-container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;comments-html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  container.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template.innerHTML;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  container.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;comments-fallback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可能还包含用于注水的数据或指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><strong>注水数据</strong>: 可能包含序列化的数据，用于客户端注水时恢复状态或避免重复请求。</li></ul><h2 id="四、react-19-的优化与演进" tabindex="-1">四、React 19 的优化与演进 <a class="header-anchor" href="#四、react-19-的优化与演进" aria-label="Permalink to &quot;四、React 19 的优化与演进&quot;">​</a></h2><p>React 19 在 React 18 建立的并发渲染和流式架构基础上，进一步引入了多项优化和新特性，使得流式渲染更加强大和易用。</p><h3 id="_1-server-components-rsc-的深度融合" tabindex="-1">1. Server Components (RSC) 的深度融合 <a class="header-anchor" href="#_1-server-components-rsc-的深度融合" aria-label="Permalink to &quot;1. Server Components (RSC) 的深度融合&quot;">​</a></h3><p>虽然 Server Components 在 React 18 中已有实验性支持，但在 React 19 中它们成为了构建流式应用的核心部分（尤其是在 Next.js 等框架中）。</p><ul><li><strong>天生流式友好</strong>：Server Components 在服务器上执行，可以直接访问数据源（数据库、API 等），并将渲染结果（可以是 HTML 或特殊指令）流式传输到客户端。它们不需要注水，因为它们没有客户端交互逻辑。</li><li><strong>与 <code>&lt;Suspense&gt;</code> 结合</strong>：Server Components 可以自然地与 <code>&lt;Suspense&gt;</code> 结合。如果一个 Server Component 需要异步获取数据，可以将其包裹在 <code>&lt;Suspense&gt;</code> 中。服务器会先发送 fallback，数据准备好后再流式发送该组件的渲染结果。</li><li><strong>减少客户端负载</strong>：将非交互式组件移到服务器执行，显著减少了发送到客户端的 JavaScript 代码量，加快了代码加载和注水过程。</li></ul><h3 id="_2-actions-server-actions" tabindex="-1">2. Actions (Server Actions) <a class="header-anchor" href="#_2-actions-server-actions" aria-label="Permalink to &quot;2. Actions (Server Actions)&quot;">​</a></h3><p>Actions 简化了客户端与服务器之间的数据交互，特别是在表单提交和数据变更场景下，与流式渲染结合得很好。</p><ul><li><strong>表单的流式处理</strong>：使用 Actions，表单提交可以在不阻塞客户端导航的情况下在服务器上处理。服务器处理 Action 后，可以流式返回更新后的 UI 部分，或者指示客户端进行状态更新。</li><li><strong>乐观更新 (Optimistic Updates)</strong>：结合 <code>useOptimistic</code> Hook，可以在 Action 发送到服务器并等待响应期间，立即在客户端显示一个预期的最终状态，等服务器确认后再更新为实际状态。这在流式更新的场景下提供了更平滑的交互体验。</li></ul><h3 id="_3-改进的资源加载-link-style-script" tabindex="-1">3. 改进的资源加载 (<code>&lt;link&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;script&gt;</code>) <a class="header-anchor" href="#_3-改进的资源加载-link-style-script" aria-label="Permalink to &quot;3. 改进的资源加载 (\`&lt;link&gt;\`, \`&lt;style&gt;\`, \`&lt;script&gt;\`)&quot;">​</a></h3><p>React 19 对资源加载进行了重大改进，使其与 Suspense 和流式渲染更好地集成：</p><ul><li><strong>Suspense 感知</strong>：React 现在能够理解 <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code> 和异步 <code>&lt;script&gt;</code> 何时加载完成。如果一个组件在 <code>&lt;Suspense&gt;</code> 边界内渲染了这些标签，React 会等待对应的资源（如 CSS）加载完成后，再显示该组件，而不是显示 fallback 后因为样式未加载而出现布局抖动 (CLS)。</li><li><strong>资源去重</strong>：React 会自动对渲染过程中出现的相同资源（如同一份 CSS 或 JS）进行去重，确保只加载一次。</li><li><strong>流式资源注入</strong>：即使资源是在 <code>&lt;Suspense&gt;</code> 边界内或由 Server Component 渲染的，React 也能确保它们被正确地、流式地注入到 HTML 的 <code>&lt;head&gt;</code> 中。</li></ul><h3 id="_4-document-metadata-支持-title-meta" tabindex="-1">4. Document Metadata 支持 (<code>&lt;title&gt;</code>, <code>&lt;meta&gt;</code>) <a class="header-anchor" href="#_4-document-metadata-支持-title-meta" aria-label="Permalink to &quot;4. Document Metadata 支持 (\`&lt;title&gt;\`, \`&lt;meta&gt;\`)&quot;">​</a></h3><p>React 19 内置了对文档元数据（<code>title</code>, <code>meta</code> 标签）的支持。</p><ul><li><strong>内置组件</strong>：可以直接在任何组件（包括 Server Components）中渲染 <code>&lt;title&gt;</code> 和 <code>&lt;meta&gt;</code> 标签。</li><li><strong>自动提升与去重</strong>：React 会自动将这些标签提升到文档的 <code>&lt;head&gt;</code> 中，并处理重复标签（例如，确保只有一个 <code>&lt;title&gt;</code>)。</li><li><strong>流式友好</strong>：即使元数据标签在 <code>&lt;Suspense&gt;</code> 边界内渲染，React 也能确保它们最终正确出现在 <code>&lt;head&gt;</code> 中，解决了之前需要 Helmet 等库且在流式场景下可能出现问题的痛点。</li></ul><h3 id="_5-useoptimistic-hook" tabindex="-1">5. <code>useOptimistic</code> Hook <a class="header-anchor" href="#_5-useoptimistic-hook" aria-label="Permalink to &quot;5. \`useOptimistic\` Hook&quot;">​</a></h3><p>如前所述，<code>useOptimistic</code> 允许在异步操作（如 Server Action）期间提供即时的 UI 反馈，这对于保持流式更新时的用户体验至关重要。</p><h3 id="_6-错误处理改进" tabindex="-1">6. 错误处理改进 <a class="header-anchor" href="#_6-错误处理改进" aria-label="Permalink to &quot;6. 错误处理改进&quot;">​</a></h3><p>React 19 改进了服务器端渲染和服务端组件中的错误处理机制，使其与流式传输和恢复更加协调。</p><h2 id="五、收益总结" tabindex="-1">五、收益总结 <a class="header-anchor" href="#五、收益总结" aria-label="Permalink to &quot;五、收益总结&quot;">​</a></h2><p>采用 React 流式渲染与选择性注水架构带来了显著的好处：</p><ul><li><strong>用户感知性能提升</strong>： <ul><li><strong>更快的首屏可见时间 (FCP, LCP)</strong>：用户能更快看到内容。</li><li><strong>更快的可交互时间 (TTI)</strong>：用户能更快地与页面交互。</li></ul></li><li><strong>更好的资源利用</strong>： <ul><li><strong>服务器</strong>：无需等待最慢的数据，可以更早开始发送响应，减少空闲等待。</li><li><strong>客户端</strong>：分解注水任务，避免长时间阻塞主线程；按需加载代码和数据。</li></ul></li><li><strong>提升开发体验</strong>： <ul><li><code>&lt;Suspense&gt;</code> 提供了一种声明式的方式来处理加载状态。</li><li><code>React.lazy</code> 与 SSR 无缝集成。</li><li>Server Components 和 Actions 简化了数据获取和变更逻辑。</li></ul></li><li><strong>更好的容错性</strong>：即使应用的某个部分出错或数据加载失败，也不会完全阻塞整个页面的渲染和交互。</li></ul><h2 id="六、注意事项与权衡" tabindex="-1">六、注意事项与权衡 <a class="header-anchor" href="#六、注意事项与权衡" aria-label="Permalink to &quot;六、注意事项与权衡&quot;">​</a></h2><ul><li><strong>SEO</strong>：虽然流式传输的 HTML 包含了所有内容，但搜索引擎爬虫对这种动态注入内容的理解程度仍在发展中。Googlebot 通常能较好地处理，但对于其他爬虫，可能仍需考虑使用 <code>onAllReady</code> 回调提供完整 HTML，或采用动态渲染 (Dynamic Rendering) 策略，即为爬虫提供一个完全渲染好的非流式版本 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">[1]</a>。React 19 的资源和元数据加载改进有助于提升 SEO 兼容性。</li><li><strong>缓存</strong>：流式响应的缓存策略比单个 HTML 文件更复杂。通常需要依赖 HTTP 缓存头（如 <code>Cache-Control</code>）并可能需要 CDN 支持 Edge Side Includes (ESI) 或类似的片段缓存技术。</li><li><strong>实现复杂度</strong>：虽然 React 本身提供了 API，但手动实现完整的流式 SSR 和数据管理可能比较复杂。使用像 Next.js、Remix 这样的元框架可以极大地简化这个过程，它们内置了对流式渲染、数据获取、代码分割等的最佳实践。</li><li><strong>监控与调试</strong>：流式应用的监控和调试可能需要新的工具和方法来跟踪分布在服务器和客户端的异步操作。</li></ul><h2 id="七、总结" tabindex="-1">七、总结 <a class="header-anchor" href="#七、总结" aria-label="Permalink to &quot;七、总结&quot;">​</a></h2><p>React 18 和 19 带来的流式渲染与选择性注水是服务器端渲染领域的一次重大革新。通过将应用分解为独立的单元，并利用 <code>&lt;Suspense&gt;</code>、并发特性以及 React 19 的 Server Components、Actions 和资源加载优化，React 能够显著提升应用的感知性能和真实性能，为用户提供更快、更流畅的体验。虽然直接使用底层 API 可能有一定复杂度，但现代 React 框架已经将这些能力整合其中，使得开发者能够更容易地享受到流式渲染带来的好处。</p><p><strong>参考资料:</strong></p><ul><li><a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noreferrer">[1]</a> New Suspense SSR Architecture in React 18 - React 18 Working Group Discussion</li></ul>`,67)])])}const g=i(t,[["render",l]]);export{d as __pageData,g as default};
