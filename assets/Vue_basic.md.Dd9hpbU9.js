import{_ as s,c as t,o,j as a,a8 as d,a as i,t as r}from"./chunks/framework.B1-gFi6y.js";const m=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/basic.md","filePath":"Vue/basic.md","lastUpdated":1747275459000}'),l={name:"Vue/basic.md"};function n(c,e,p,h,v,u){return o(),t("div",null,[e[0]||(e[0]=a("h1",{id:"基础",tabindex:"-1"},[i("基础 "),a("a",{class:"header-anchor",href:"#基础","aria-label":'Permalink to "基础"'},"​")],-1)),e[1]||(e[1]=a("h3",{id:"插值语法",tabindex:"-1"},[i("插值语法 "),a("a",{class:"header-anchor",href:"#插值语法","aria-label":'Permalink to "插值语法"'},"​")],-1)),a("p",null,[a("code",null,r(),1)]),e[2]||(e[2]=d('<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ msg }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="ref和reactive" tabindex="-1">ref和reactive <a class="header-anchor" href="#ref和reactive" aria-label="Permalink to &quot;ref和reactive&quot;">​</a></h3><p>ref用于存储基本类型的数据，如：数字、字符串、布尔值等。使用ref创建的响应式对象，需要通过.value访问和修改其值。</p><p>reactive用于存储复杂对象类型的数据，如：数组、对象、函数等。使用reactive创建的响应式对象，可以直接访问和修改其属性。</p><h3 id="绑定事件v-on和按键修饰符" tabindex="-1">绑定事件v-on和按键修饰符 <a class="header-anchor" href="#绑定事件v-on和按键修饰符" aria-label="Permalink to &quot;绑定事件v-on和按键修饰符&quot;">​</a></h3><p><code>v-on:click = &#39;edit&#39;</code></p><p>简写：<code>@click = &#39;edit&#39;</code></p><p>回车： <code>@keyup.enter = &#39;add(xx,xx)&#39;</code></p><p>空格： <code>@keyup.space = &#39;add(xx,xx)&#39;</code></p><p>Tab： <code>@keyup.tab = &#39;add(xx,xx)&#39;</code></p><p>w： <code>@keyup.w = &#39;add(xx,xx)&#39;</code></p><p>组合快捷键：</p><ul><li>ctrl+ enter：<code>@keyup.ctrl.enter = &#39;add(xx,xx)&#39;</code></li><li>ctrl+ shift+ enter：<code>@keyup.ctrl.shift.enter = &#39;add(xx,xx)&#39;</code></li></ul><h3 id="显示和隐藏-v-show" tabindex="-1">显示和隐藏 v-show <a class="header-anchor" href="#显示和隐藏-v-show" aria-label="Permalink to &quot;显示和隐藏 v-show&quot;">​</a></h3><p><code>v-show = &#39;isShow&#39;</code>，isShow为true时显示，为false时隐藏。</p><h3 id="显示和隐藏-v-if" tabindex="-1">显示和隐藏 v-if <a class="header-anchor" href="#显示和隐藏-v-if" aria-label="Permalink to &quot;显示和隐藏 v-if&quot;">​</a></h3><p><code>v-if = &#39;isShow&#39;</code>，isShow为true时显示，为false时隐藏。</p><p><code>v-else-if = &#39;isShow&#39;</code>，当v-if的条件不满足时，显示v-else-if的内容。</p><p><code>v-else</code>，当v-if的条件不满足时，显示v-else的内容。</p><h3 id="动态属性-v-bind" tabindex="-1">动态属性 v-bind <a class="header-anchor" href="#动态属性-v-bind" aria-label="Permalink to &quot;动态属性 v-bind&quot;">​</a></h3><p><code>v-bind:src = &#39;imgUrl&#39;</code></p><p>简写：<code>:src = &#39;imgUrl&#39;</code></p><h3 id="列表渲染-v-for" tabindex="-1">列表渲染 v-for <a class="header-anchor" href="#列表渲染-v-for" aria-label="Permalink to &quot;列表渲染 v-for&quot;">​</a></h3><p><code>v-for = &#39;item in items&#39;</code>，item为当前遍历的元素，items为要遍历的数组。</p><p><code>v-for = &#39;(item, index) in items&#39;</code>，item为当前遍历的元素，index为当前遍历的索引。</p><h3 id="双向绑定-v-model" tabindex="-1">双向绑定 v-model <a class="header-anchor" href="#双向绑定-v-model" aria-label="Permalink to &quot;双向绑定 v-model&quot;">​</a></h3><p><code>v-model = &#39;msg&#39;</code>，msg为要绑定的数据，msg的值会实时更新。</p>',27))])}const x=s(l,[["render",n]]);export{m as __pageData,x as default};
