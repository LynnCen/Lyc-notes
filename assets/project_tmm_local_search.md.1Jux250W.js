import{_ as r,C as E,c as d,o as l,j as i,b as e,a8 as k,a as n,w as a,G as h,a9 as t}from"./chunks/framework.B1-gFi6y.js";const A=JSON.parse('{"title":"本地化搜索引擎实现","description":"","frontmatter":{},"headers":[],"relativePath":"project/tmm/local_search.md","filePath":"project/tmm/local_search.md","lastUpdated":1742461871000}'),g={name:"project/tmm/local_search.md"};function c(y,s,o,b,F,m){const p=E("Mermaid");return l(),d("div",null,[s[3]||(s[3]=i("h1",{id:"本地化搜索引擎实现",tabindex:"-1"},[n("本地化搜索引擎实现 "),i("a",{class:"header-anchor",href:"#本地化搜索引擎实现","aria-label":'Permalink to "本地化搜索引擎实现"'},"​")],-1)),s[4]||(s[4]=i("p",null,"在现代前端应用中，特别是即时通讯（IM）类应用，本地搜索功能对用户体验至关重要。随着离线优先和数据本地化的趋势，基于浏览器存储的本地搜索引擎变得越来越重要。本文将探讨如何利用 IndexedDB、位运算和 Web Worker 构建高效的本地搜索引擎。",-1)),s[5]||(s[5]=i("h2",{id:"一、跨表查询的背景与必要性",tabindex:"-1"},[n("一、跨表查询的背景与必要性 "),i("a",{class:"header-anchor",href:"#一、跨表查询的背景与必要性","aria-label":'Permalink to "一、跨表查询的背景与必要性"'},"​")],-1)),(l(),e(t,null,{default:a(()=>[h(p,{id:"mermaid-9",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E6%90%9C%E7%B4%A2%E6%80%A7%E8%83%BD%5D%20--%3E%20B%5B%E6%95%B0%E6%8D%AE%E9%87%8F%E5%A4%A7%5D%0A%20%20%20%20A%20--%3E%20C%5B%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94%5D%0A%20%20%20%20A%20--%3E%20D%5B%E5%AE%9E%E6%97%B6%E6%80%A7%E8%A6%81%E6%B1%82%5D%0A%20%20%20%20%0A%20%20%20%20E%5B%E5%AD%98%E5%82%A8%E4%BC%98%E5%8C%96%5D%20--%3E%20F%5B%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%5D%0A%20%20%20%20E%20--%3E%20G%5B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5D%0A%20%20%20%20E%20--%3E%20H%5B%E5%8E%8B%E7%BC%A9%E7%AD%96%E7%95%A5%5D%0A%20%20%20%20%0A%20%20%20%20I%5B%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%5D%20--%3E%20J%5B%E6%90%9C%E7%B4%A2%E5%BB%B6%E8%BF%9F%5D%0A%20%20%20%20I%20--%3E%20K%5B%E7%95%8C%E9%9D%A2%E5%93%8D%E5%BA%94%5D%0A%20%20%20%20I%20--%3E%20L%5B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%5D%0A%0A"})]),fallback:a(()=>s[0]||(s[0]=[n(" Loading... ")])),_:1})),s[6]||(s[6]=k(`<h3 id="_1-1-本地化搜索的挑战" tabindex="-1">1.1 本地化搜索的挑战 <a class="header-anchor" href="#_1-1-本地化搜索的挑战" aria-label="Permalink to &quot;1.1 本地化搜索的挑战&quot;">​</a></h3><p>在浏览器端构建本地化搜索引擎时，面临三大核心挑战：</p><ul><li><p><strong>海量异构数据</strong>：用户行为数据、内容索引、会话记录等多维度数据需要分类存储</p></li><li><p><strong>实时响应要求</strong>：搜索延迟需控制在100ms以内，避免用户感知卡顿</p></li><li><p><strong>资源受限环境</strong>：浏览器内存限制（通常&lt;4GB）与单线程运行限制</p></li></ul><h3 id="_1-2-传统方案的瓶颈" tabindex="-1">1.2 传统方案的瓶颈 <a class="header-anchor" href="#_1-2-传统方案的瓶颈" aria-label="Permalink to &quot;1.2 传统方案的瓶颈&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 典型低效查询模式示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> searchLegacy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keywords</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全表扫描用户数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全表扫描内容数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doComplexFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userData, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentData]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内存计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这种模式会产生三个致命问题：</p><ul><li><p><strong>O(n)时间复杂度</strong>：双重全表扫描导致性能随数据量线性下降</p></li><li><p><strong>内存压力</strong>：大数据量合并导致内存峰值，可能触发浏览器垃圾回收卡顿</p></li><li><p><strong>阻塞主线程</strong>：复杂过滤计算会阻塞UI渲染</p></li></ul><h3 id="_1-3-im应用的数据特性与跨表查询需求" tabindex="-1">1.3 IM应用的数据特性与跨表查询需求 <a class="header-anchor" href="#_1-3-im应用的数据特性与跨表查询需求" aria-label="Permalink to &quot;1.3 IM应用的数据特性与跨表查询需求&quot;">​</a></h3><p>即时通讯应用的数据模型通常包括多个相互关联的实体：</p><ul><li><strong>会话表（conversations）</strong>：存储会话元数据、状态标志和最后活跃时间</li><li><strong>消息表（messages）</strong>：存储具体的聊天内容，关联到特定会话</li><li><strong>用户表（users）</strong>：存储联系人信息，与会话和消息相关联</li><li><strong>附件表（attachments）</strong>：存储媒体文件引用，关联到具体消息</li></ul><p>这些表之间存在复杂的多对多关系，用户搜索行为往往跨越多个实体，例如：</p><ul><li>&quot;查找与张三讨论财务报表的所有消息&quot;（涉及用户、会话、消息三张表）</li><li>&quot;查找所有包含图片附件的未读消息&quot;（涉及消息和附件两张表）</li><li>&quot;在所有置顶会话中搜索包含关键词的消息&quot;（涉及会话标志位过滤和消息内容搜索）</li></ul><h2 id="二、联合索引的深度解析" tabindex="-1">二、联合索引的深度解析 <a class="header-anchor" href="#二、联合索引的深度解析" aria-label="Permalink to &quot;二、联合索引的深度解析&quot;">​</a></h2><h3 id="_2-1-联合索引的基本原理" tabindex="-1">2.1 联合索引的基本原理 <a class="header-anchor" href="#_2-1-联合索引的基本原理" aria-label="Permalink to &quot;2.1 联合索引的基本原理&quot;">​</a></h3><p>联合索引（Composite Index）是对多个字段联合创建的索引结构，在IndexedDB中表现为对多个属性的组合索引。与单字段索引不同，联合索引能够同时加速基于多个条件的查询操作。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Dexie.js中声明联合索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  messages: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id, conversationId, [conversationId+timestamp]&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                            ^联合索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>联合索引的核心原理在于将多个字段值按照固定顺序组合成一个复合键值，这些键值在存储时保持有序排列，从而支持高效的范围查询和等值查询。</p><p>从本质上看，联合索引是一种特殊的排序结构，具有以下特点：</p><ul><li>有序性：复合键按照字段定义顺序排序，先按第一个字段排序，值相同时再按第二个字段排序，以此类推</li><li>前缀匹配特性：联合索引<code>[A+B+C]</code>可以用于查询模式A、A+B和A+B+C，但不适用于B+C或C</li><li>等值查询适配性：适用于等值查询及第一个字段的范围查询</li><li>基数关系：通常具有比单字段索引更高的选择性</li></ul><h3 id="_2-2-b-树在indexeddb中的应用" tabindex="-1">2.2 B+树在IndexedDB中的应用 <a class="header-anchor" href="#_2-2-b-树在indexeddb中的应用" aria-label="Permalink to &quot;2.2 B+树在IndexedDB中的应用&quot;">​</a></h3><p>虽然IndexedDB规范并未强制规定底层存储引擎的具体实现，但大多数浏览器（如Chrome的LevelDB、Firefox的SQLite）都采用基于B+树的变种结构来实现索引。</p><p>B+树是一种多路平衡搜索树，具有以下特点：</p><ul><li>所有数据存储在叶子节点：非叶子节点只存储索引键，不存储实际数据</li><li>叶子节点形成有序链表：便于范围查询</li><li>树高平衡：所有叶子节点到根的距离相同，通常为3-4层</li><li>分支因子大：每个节点可以包含多个键值，减少I/O操作</li></ul><p>联合索引的B+树实现：</p><p>当创建如<code>[conversationId+timestamp]</code>的联合索引时，存储引擎会构建一棵特殊的B+树，其中：</p><ul><li>复合键构造：每个索引项由[conversationId, timestamp]组合构成一个复合键</li><li>键排序规则：先按conversationId排序，相同时再按timestamp排序</li><li>存储结构：叶子节点存储复合键及对应记录的引用（通常是主键）</li></ul>`,26)),(l(),e(t,null,{default:a(()=>[h(p,{id:"mermaid-197",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20Root%5B%E6%A0%B9%E8%8A%82%E7%82%B9%5D%20--%3E%20L1%5B%E5%86%85%E9%83%A8%E8%8A%82%E7%82%B91%5D%0A%20%20%20%20Root%20--%3E%20L2%5B%E5%86%85%E9%83%A8%E8%8A%82%E7%82%B92%5D%0A%20%20%20%20L1%20--%3E%20Leaf1%5B%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B91%5D%0A%20%20%20%20L1%20--%3E%20Leaf2%5B%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B92%5D%0A%20%20%20%20L2%20--%3E%20Leaf3%5B%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B93%5D%0A%20%20%20%20L2%20--%3E%20Leaf4%5B%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B94%5D%0A"})]),fallback:a(()=>s[1]||(s[1]=[n(" Loading... ")])),_:1})),s[7]||(s[7]=k(`<h3 id="_2-3-联合索引的查询优化原理" tabindex="-1">2.3 联合索引的查询优化原理 <a class="header-anchor" href="#_2-3-联合索引的查询优化原理" aria-label="Permalink to &quot;2.3 联合索引的查询优化原理&quot;">​</a></h3><p>联合索引发挥作用的关键在于其高效的查询路径剪枝能力，特别是在IM场景的跨表查询中。</p><p><strong>范围查询优化</strong></p><p>以&quot;查找指定会话中的消息时间范围&quot;为例：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用联合索引的范围查询</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[conversationId+timestamp]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [conversationId, startTime],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [conversationId, endTime]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行流程：</p><ol><li>B+树从根节点开始，定位到conversationId对应的分支</li><li>子树中继续按timestamp的范围进行查找</li><li>在找到的叶子节点链表上顺序扫描符合范围的记录</li></ol><p>优化效果：</p><ol><li>索引选择性提高：仅扫描特定会话的索引项</li><li>访问路径缩短：直接定位到目标范围，避免全表扫描</li><li>I/O减少：仅读取必要的索引页</li></ol><p><strong>前缀匹配原则</strong></p><p>联合索引的查询效率与前缀匹配原则紧密相关：</p><ol><li>最左前缀原则：必须使用索引的第一个字段作为查询条件</li><li>顺序敏感性：联合索引<code>[A+B+C]</code>无法优化仅包含B或C的查询</li><li>索引覆盖查询：当查询只需要索引包含的字段时，可以直接从索引返回数据，不需要访问原表</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有效利用联合索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 符合前缀原则，高效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.messages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[conversationId+timestamp]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([conversationId, timestamp]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 符合前缀原则，高效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.messages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[conversationId+timestamp]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conversationId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不符合前缀原则，低效，将退化为全表扫描</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.messages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timestamp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timestamp);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-4-联合索引的性能优化策略" tabindex="-1">2.4 联合索引的性能优化策略 <a class="header-anchor" href="#_2-4-联合索引的性能优化策略" aria-label="Permalink to &quot;2.4 联合索引的性能优化策略&quot;">​</a></h3><p>在基于Dexie.js的IM本地搜索引擎中，联合索引的性能可通过以下策略优化：</p><p><strong>索引设计原则</strong></p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化的索引设计示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 核心索引优先，覆盖主要查询路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  conversations: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id, flags, lastModified, [flags+lastModified]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 热点查询路径专用索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  messages: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id, conversationId, senderId, [conversationId+timestamp], [senderId+conversationId]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 搜索专用索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  searchIndex: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id, term, [term+refType], [refId+refType]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>关键优化原则：</p><ol><li>查询驱动设计：根据常见查询模式设计索引</li><li>选择性优先：高选择性字段放在联合索引前面（如ID类字段）</li><li>覆盖查询优化：在联合索引中包含常用的输出字段</li><li>避免冗余索引：控制索引数量，避免存储和维护开销</li><li>位标志组合：将多个布尔标志组合为位标志字段，减少索引数量</li></ol><p><strong>查询路径优化</strong></p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化前：两步查询，需要加载全表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inefficientSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> conversations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.conversations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pinnedIds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conversations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.isPinned)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.messages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pinnedIds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m.conversationId) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m.content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyword)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化后：使用联合索引和位运算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> efficientSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用位运算直接过滤置顶会话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pinnedConvs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.conversations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;flags&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">above</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c.flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PINNED_FLAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用联合索引并行查询每个会话的消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> messagePromises</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedConvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">conv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    db.messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[conversationId+timestamp]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([conv.id, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [conv.id, Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyword))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messagePromises)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_2-5-联合索引与全文搜索的融合" tabindex="-1">2.5 联合索引与全文搜索的融合 <a class="header-anchor" href="#_2-5-联合索引与全文搜索的融合" aria-label="Permalink to &quot;2.5 联合索引与全文搜索的融合&quot;">​</a></h3><p>在IM场景的本地搜索中，联合索引通常与倒排索引结合，形成高效的全文搜索解决方案：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于联合索引的高效全文搜索</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fullTextSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用term+refType联合索引查找匹配记录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> indexResults</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.searchIndex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[term+refType]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([term, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\uffff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取匹配的消息ID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> messageIds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(indexResults.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.refId))];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 高效批量获取原始消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.messages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bulkGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messageIds);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="三、位运算" tabindex="-1">三、位运算 <a class="header-anchor" href="#三、位运算" aria-label="Permalink to &quot;三、位运算&quot;">​</a></h2><h2 id="四、-技术架构概览" tabindex="-1">四、 技术架构概览 <a class="header-anchor" href="#四、-技术架构概览" aria-label="Permalink to &quot;四、 技术架构概览&quot;">​</a></h2><p>本地搜索引擎的核心架构包括三大模块：</p>`,27)),(l(),e(t,null,{default:a(()=>[h(p,{id:"mermaid-335",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%B1%82%5D%20--%3E%20B%5B%E7%B4%A2%E5%BC%95%E6%9E%84%E5%BB%BA%E5%B1%82%5D%0A%20%20%20%20B%20--%3E%20C%5B%E6%90%9C%E7%B4%A2%E6%89%A7%E8%A1%8C%E5%B1%82%5D%0A%20%20%20%20C%20--%3E%20D%5B%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA%E5%B1%82%5D%0A%20%20%20%20E%5BWeb%20Worker%5D%20-.-%3E%20C%0A"})]),fallback:a(()=>s[2]||(s[2]=[n(" Loading... ")])),_:1})),s[8]||(s[8]=i("ul",null,[i("li",null,"数据存储层：基于 IndexedDB 存储会话、消息等数据"),i("li",null,"索引构建层：建立和维护高效的搜索索引"),i("li",null,"搜索执行层：执行搜索查询，过滤和排序结果"),i("li",null,"结果展示层：向用户呈现搜索结果"),i("li",null,"Web Worker：并行处理搜索计算，避免主线程阻塞")],-1))])}const B=r(g,[["render",c]]);export{A as __pageData,B as default};
