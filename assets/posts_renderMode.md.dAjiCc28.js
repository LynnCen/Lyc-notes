import{_ as e,c as s,o as l,a8 as o}from"./chunks/framework.5lfeZbzV.js";const m=JSON.parse('{"title":"现代前端渲染模式","description":"","frontmatter":{},"headers":[],"relativePath":"posts/renderMode.md","filePath":"posts/renderMode.md","lastUpdated":1742265646000}'),r={name:"posts/renderMode.md"};function a(i,t,n,c,d,h){return l(),s("div",null,[...t[0]||(t[0]=[o('<h1 id="现代前端渲染模式" tabindex="-1">现代前端渲染模式 <a class="header-anchor" href="#现代前端渲染模式" aria-label="Permalink to &quot;现代前端渲染模式&quot;">​</a></h1><blockquote><ul><li><p>参考：<a href="https://juejin.cn/post/7241027834490437669" target="_blank" rel="noreferrer">https://juejin.cn/post/7241027834490437669</a></p></li><li><p><a href="/Lyc-notes/browser/加载阶段性能#根据性能报告优化-web-性能">浏览器加载阶段性能</a></p></li></ul></blockquote><h1 id="csr、ssr和ssg的联系和区别" tabindex="-1">CSR、SSR和SSG的联系和区别 <a class="header-anchor" href="#csr、ssr和ssg的联系和区别" aria-label="Permalink to &quot;CSR、SSR和SSG的联系和区别&quot;">​</a></h1><blockquote><p><a href="./renderMode">现代前端框架的渲染模式</a></p></blockquote><h2 id="csr" tabindex="-1">CSR <a class="header-anchor" href="#csr" aria-label="Permalink to &quot;CSR&quot;">​</a></h2><p><strong>传统csr模式下，页面的加载过程设计以下：</strong></p><ol><li>使用打包插件(webpack、vite)将业务代码打包成html、js和css文件，放在服务器的指定目录下。</li><li>浏览器请求html、js和css文件。</li><li>浏览器解析html文件，此时html只包含一个含<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>的dom，此时需要执行js渲染整个dom。</li></ol><p><strong>弊端：</strong></p><ol><li>由于页面显示过程要进行JS文件拉取和React代码执行，首屏加载时间会比较慢。</li><li>对于SEO(Search Engine Optimazition,即搜索引擎优化)，完全无能为力，因为搜索引擎爬虫只认识html结构的内容，而不能识别JS代码内容。</li></ol><h2 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h2><blockquote><p>由于csr下，请求的html仅包含一个根节点，首屏加载白屏时间长，SEO不友好，所以ssr要解决的就是提前生成完整的html，保证首屏加载。</p></blockquote><p><strong>ssr模式下，页面的加载过程设计以下：</strong></p><ol><li>服务器运行一个node环境，对应的资源通过next或者react-ssr编写的业务代码，执行在node环境。</li><li>浏览器生请求对应资源，服务器接收到请求之后，实时运行业务代码jsx，并将jsx生成为html并返回给浏览器。</li><li>此时的html已经包含页面的所有内容，此时不需要执行js渲染整个dom，首屏即可查看内容，首屏加载时间会比较快。</li><li>加载完html之后，还需要执行react对应的js文件进行水合，挂载一些IO事件，进行二次执行，这个过程是非常快的，进行对比更新。</li></ol><p><strong>弊端：</strong></p><ol><li>由于服务器运行node环境，需要部署服务器，成本较高。</li><li>占用服务器资源，渲染工作都在服务端渲染。</li></ol><h2 id="ssg" tabindex="-1">SSG <a class="header-anchor" href="#ssg" aria-label="Permalink to &quot;SSG&quot;">​</a></h2><blockquote><p>ssg结合了ssr和csr的优点，利用服务端渲染，在编译阶段就生成完整的html，首屏加载快，SEO友好，并且服务端仅存放编译后的静态资源，不需要服务端实时生成html，减少了服务器压力。</p></blockquote><p><strong>ssg模式下，页面的加载过程设计以下：</strong></p><ol><li>在打包编译阶段生成完成的html文件、js文件以及css文件，放在服务器指定目录下，故对应的代码执行在node环境下。</li><li>浏览器请求html、js和css文件，此时html已经包含页面的所有内容，此时不需要执行js渲染整个dom，首屏即可查看内容，首屏加载时间会比较快。</li><li>加载完html之后，还需要执行react对应的js文件进行水合，挂载一些IO事件，进行二次执行，这个过程是非常快的，进行对比更新。</li></ol>',19)])])}const S=e(r,[["render",a]]);export{m as __pageData,S as default};
