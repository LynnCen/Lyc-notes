import{_ as k,C as E,c as d,o as e,j as a,b as t,a8 as h,a as n,w as i,G as p,a9 as r}from"./chunks/framework.5lfeZbzV.js";const A=JSON.parse('{"title":"Vite 为什么比 Webpack 快：深度对比分析","description":"","frontmatter":{},"headers":[],"relativePath":"posts/compareViteAndWebpack.md","filePath":"posts/compareViteAndWebpack.md","lastUpdated":1744645602000}'),b={name:"posts/compareViteAndWebpack.md"};function o(c,s,g,u,F,B){const l=E("Mermaid");return e(),d("div",null,[s[6]||(s[6]=a("h1",{id:"vite-为什么比-webpack-快-深度对比分析",tabindex:"-1"},[n("Vite 为什么比 Webpack 快：深度对比分析 "),a("a",{class:"header-anchor",href:"#vite-为什么比-webpack-快-深度对比分析","aria-label":'Permalink to "Vite 为什么比 Webpack 快：深度对比分析"'},"​")],-1)),s[7]||(s[7]=a("p",null,'在现代前端开发中，构建工具的选择对开发效率和项目性能有着决定性影响。虽然"新"并不总是意味着"更好"，但当谈到 Vite 和 Webpack 这两个流行的构建工具时，Vite 确实展现出了令人印象深刻的性能优势。本文将深入剖析 Vite 为何比 Webpack 快，并帮助您为项目选择最合适的构建工具。',-1)),s[8]||(s[8]=a("h2",{id:"什么是-javascript-构建工具",tabindex:"-1"},[n("什么是 JavaScript 构建工具？ "),a("a",{class:"header-anchor",href:"#什么是-javascript-构建工具","aria-label":'Permalink to "什么是 JavaScript 构建工具？"'},"​")],-1)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-9",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%5D%20--%3E%20B%5B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%5D%0A%20%20%20%20C%5B%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%5D%20--%3E%20B%0A%20%20%20%20D%5B%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%5D%20--%3E%20B%0A%20%20%20%20B%20--%3E%20E%5B%E4%BC%98%E5%8C%96%E5%90%8E%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%5D%0A"})]),fallback:i(()=>[...s[0]||(s[0]=[n(" Loading... ",-1)])]),_:1})),s[9]||(s[9]=h('<p>JavaScript 构建工具是前端开发中不可或缺的一部分，它们负责将开发者编写的模块化代码转换成浏览器可以高效运行的格式。构建工具的主要功能包括：</p><ul><li><strong>依赖管理</strong>：解析和处理模块间的依赖关系</li><li><strong>代码转换</strong>：将现代 JavaScript（ES6+）转换为兼容性更好的版本</li><li><strong>资源优化</strong>：压缩代码、优化图片等资源</li><li><strong>开发服务器</strong>：提供热更新等提升开发体验的功能</li></ul><p>尽管现代浏览器已经支持 ES 模块和 HTTP/2 等技术，构建工具仍然是前端开发流程中的关键环节，它们确保代码在生产环境中的最佳性能和兼容性。</p><h2 id="webpack-模块打包的经典之选" tabindex="-1">Webpack：模块打包的经典之选 <a class="header-anchor" href="#webpack-模块打包的经典之选" aria-label="Permalink to &quot;Webpack：模块打包的经典之选&quot;">​</a></h2><p>Webpack 作为前端构建工具的老牌霸主，自 2012 年问世以来持续进化，已经成为许多企业级项目的标准选择。</p><h3 id="webpack-核心概念" tabindex="-1">Webpack 核心概念 <a class="header-anchor" href="#webpack-核心概念" aria-label="Permalink to &quot;Webpack 核心概念&quot;">​</a></h3><p>Webpack 将一切视为模块，不仅仅是 JavaScript 文件，还包括 CSS、图片、字体等资源。它的核心概念包括：</p><ul><li><strong>Entry（入口）</strong>：打包过程的起点</li><li><strong>Output（输出）</strong>：打包结果的存放位置</li><li><strong>Loaders（加载器）</strong>：处理非 JavaScript 文件的转换器</li><li><strong>Plugins（插件）</strong>：扩展 Webpack 功能的工具</li><li><strong>Chunks（代码块）</strong>：将代码分割为可单独加载的单元</li></ul><h3 id="webpack-工作流程" tabindex="-1">Webpack 工作流程 <a class="header-anchor" href="#webpack-工作流程" aria-label="Permalink to &quot;Webpack 工作流程&quot;">​</a></h3>',9)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-80",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%5D%20--%3E%20B%5B%E6%9E%84%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%9B%BE%5D%0A%20%20%20%20B%20--%3E%20C%5B%E8%BD%AC%E6%8D%A2%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20C%20--%3E%20D%5B%E5%90%88%E5%B9%B6%E4%BC%98%E5%8C%96%5D%0A%20%20%20%20D%20--%3E%20E%5B%E8%BE%93%E5%87%BAbundle%5D%0A"})]),fallback:i(()=>[...s[1]||(s[1]=[n(" Loading... ",-1)])]),_:1})),s[10]||(s[10]=h(`<ol><li><strong>读取配置</strong>：解析 webpack.config.js 文件</li><li><strong>确定入口</strong>：从配置文件中找到入口点</li><li><strong>递归解析</strong>：从入口开始，递归解析所有依赖，构建完整依赖图</li><li><strong>模块转换</strong>：使用适当的 loader 转换每个模块</li><li><strong>合并打包</strong>：将转换后的模块组合成一个或多个 bundle 文件</li><li><strong>输出文件</strong>：将最终的 bundle 写入配置中指定的输出目录</li></ol><h3 id="webpack-示例配置" tabindex="-1">Webpack 示例配置 <a class="header-anchor" href="#webpack-示例配置" aria-label="Permalink to &quot;Webpack 示例配置&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="vite-下一代前端构建工具" tabindex="-1">Vite：下一代前端构建工具 <a class="header-anchor" href="#vite-下一代前端构建工具" aria-label="Permalink to &quot;Vite：下一代前端构建工具&quot;">​</a></h2><p>Vite（法语中&quot;快速&quot;的意思，发音为 /vit/）由 Vue.js 的创建者尤雨溪开发，旨在提供更快的开发体验。它的设计理念是利用现代浏览器已经支持的功能，避免不必要的工作。</p><h3 id="vite-核心理念" tabindex="-1">Vite 核心理念 <a class="header-anchor" href="#vite-核心理念" aria-label="Permalink to &quot;Vite 核心理念&quot;">​</a></h3><ul><li><strong>按需编译</strong>：只编译当前页面需要的模块</li><li><strong>利用浏览器能力</strong>：充分利用现代浏览器对 ES 模块的原生支持</li><li><strong>极速热更新</strong>：只更新修改的模块，无需重新打包整个应用</li><li><strong>优化的构建</strong>：在生产环境使用 Rollup 进行高效打包</li></ul><h3 id="vite-开发服务器原理" tabindex="-1">Vite 开发服务器原理 <a class="header-anchor" href="#vite-开发服务器原理" aria-label="Permalink to &quot;Vite 开发服务器原理&quot;">​</a></h3>`,8)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-151",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%5D%20--%3E%20B%5BVite%20%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%5D%0A%20%20%20%20B%20--%3E%20C%7B%E9%9C%80%E8%A6%81%E7%BC%96%E8%AF%91%3F%7D%0A%20%20%20%20C%20--%3E%7C%E6%98%AF%7C%20D%5B%E7%BC%96%E8%AF%91%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20C%20--%3E%7C%E5%90%A6%7C%20E%5B%E6%8F%90%E4%BE%9B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20D%20--%3E%20F%5B%E8%BF%94%E5%9B%9EES%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20E%20--%3E%20F%0A"})]),fallback:i(()=>[...s[2]||(s[2]=[n(" Loading... ",-1)])]),_:1})),s[11]||(s[11]=h(`<p>Vite 的开发服务器不会在启动时打包整个应用，而是采用基于原生 ES 模块的开发服务器。当浏览器请求一个模块时，Vite 才会按需编译该模块。这种按需编译的方式大大减少了启动时间和热更新的延迟。</p><h3 id="vite-示例配置" tabindex="-1">Vite 示例配置 <a class="header-anchor" href="#vite-示例配置" aria-label="Permalink to &quot;Vite 示例配置&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    open: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        manualChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          vendor: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="vite-vs-webpack-性能对比" tabindex="-1">Vite vs Webpack：性能对比 <a class="header-anchor" href="#vite-vs-webpack-性能对比" aria-label="Permalink to &quot;Vite vs Webpack：性能对比&quot;">​</a></h2><p>下面我们将从多个角度对比 Vite 和 Webpack 的性能表现。</p><h3 id="冷启动时间" tabindex="-1">冷启动时间 <a class="header-anchor" href="#冷启动时间" aria-label="Permalink to &quot;冷启动时间&quot;">​</a></h3>`,6)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-168",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20subgraph%20Webpack%0A%20%20%20%20%20%20%20%20W%5B%E5%85%A8%E9%87%8F%E6%89%93%E5%8C%85%5D%20--%3E%20WB%5B%E7%94%9F%E6%88%90bundle%5D%0A%20%20%20%20%20%20%20%20WB%20--%3E%20WS%5B%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20Vite%0A%20%20%20%20%20%20%20%20VS%5B%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5D%20--%3E%20VL%5B%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20Webpack%20fill%3A%23f9d6d6%0A%20%20%20%20style%20Vite%20fill%3A%23d6f9d6%0A"})]),fallback:i(()=>[...s[3]||(s[3]=[n(" Loading... ",-1)])]),_:1})),s[12]||(s[12]=a("p",null,[a("strong",null,"Webpack"),n(": 在开发服务器启动前需要打包整个应用 "),a("strong",null,"Vite"),n(": 立即启动服务器，按需编译模块")],-1)),s[13]||(s[13]=a("p",null,"在一个有数百个模块的中型项目中：",-1)),s[14]||(s[14]=a("ul",null,[a("li",null,"Webpack 启动时间：约 20-30 秒"),a("li",null,"Vite 启动时间：约 1-2 秒")],-1)),s[15]||(s[15]=a("h3",{id:"热更新速度",tabindex:"-1"},[n("热更新速度 "),a("a",{class:"header-anchor",href:"#热更新速度","aria-label":'Permalink to "热更新速度"'},"​")],-1)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-190",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20subgraph%20Webpack%0A%20%20%20%20%20%20%20%20W%5B%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%5D%20--%3E%20WI%5B%E5%A4%B1%E6%95%88%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20%20%20%20%20WI%20--%3E%20WR%5B%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%5D%0A%20%20%20%20%20%20%20%20WR%20--%3E%20WU%5B%E6%9B%B4%E6%96%B0%E6%B5%8F%E8%A7%88%E5%99%A8%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20Vite%0A%20%20%20%20%20%20%20%20V%5B%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4%5D%20--%3E%20VI%5B%E7%B2%BE%E7%A1%AE%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20%20%20%20%20VI%20--%3E%20VU%5B%E7%9B%B4%E6%8E%A5%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20Webpack%20fill%3A%23f9d6d6%0A%20%20%20%20style%20Vite%20fill%3A%23d6f9d6%0A"})]),fallback:i(()=>[...s[4]||(s[4]=[n(" Loading... ",-1)])]),_:1})),s[16]||(s[16]=h('<p><strong>Webpack</strong>: 需要重新构建受影响的 bundle <strong>Vite</strong>: 只需重新编译修改的模块，基于精确的 HMR</p><p>在开发一个典型的单页应用时：</p><ul><li>Webpack 热更新时间：约 1-2 秒</li><li>Vite 热更新时间：约 100 毫秒以内</li></ul><h3 id="内存占用" tabindex="-1">内存占用 <a class="header-anchor" href="#内存占用" aria-label="Permalink to &quot;内存占用&quot;">​</a></h3><p>由于 Webpack 需要在内存中保存完整的依赖图和打包结果，而 Vite 只需处理当前请求的模块，因此在大型项目中，Vite 的内存占用往往显著低于 Webpack。</p><h3 id="构建速度对比表" tabindex="-1">构建速度对比表 <a class="header-anchor" href="#构建速度对比表" aria-label="Permalink to &quot;构建速度对比表&quot;">​</a></h3><table tabindex="0"><thead><tr><th>构建工具</th><th>冷启动时间</th><th>热更新速度</th><th>内存占用</th><th>开发体验</th></tr></thead><tbody><tr><td>Webpack</td><td>★★☆☆☆</td><td>★★★☆☆</td><td>★★☆☆☆</td><td>★★★☆☆</td></tr><tr><td>Vite</td><td>★★★★★</td><td>★★★★★</td><td>★★★★☆</td><td>★★★★★</td></tr></tbody></table><h2 id="vite-为什么比-webpack-快" tabindex="-1">Vite 为什么比 Webpack 快？ <a class="header-anchor" href="#vite-为什么比-webpack-快" aria-label="Permalink to &quot;Vite 为什么比 Webpack 快？&quot;">​</a></h2><p>通过对比分析，我们可以总结出 Vite 比 Webpack 快的主要原因：</p><h3 id="_1-按需加载-避免全量打包" tabindex="-1">1. 按需加载，避免全量打包 <a class="header-anchor" href="#_1-按需加载-避免全量打包" aria-label="Permalink to &quot;1. 按需加载，避免全量打包&quot;">​</a></h3><p><strong>Webpack 的问题</strong>：在开发模式下，Webpack 需要预先打包整个应用，随着应用规模增长，打包时间呈指数级增长。</p><p><strong>Vite 的解决方案</strong>：利用浏览器原生 ES 模块能力，实现真正的按需加载。只有当浏览器请求某个模块时，Vite 才会编译该模块。这种按需编译的方式大大减少了启动时间。</p><h3 id="_2-高效的热模块替换-hmr" tabindex="-1">2. 高效的热模块替换（HMR） <a class="header-anchor" href="#_2-高效的热模块替换-hmr" aria-label="Permalink to &quot;2. 高效的热模块替换（HMR）&quot;">​</a></h3><p><strong>Webpack 的问题</strong>：当一个文件被修改时，Webpack 需要重新构建受影响的 bundle，这在大型应用中可能涉及数百个模块。</p><p><strong>Vite 的解决方案</strong>：Vite 的 HMR 直接在浏览器中替换修改的模块，无需重新打包。这使得无论应用规模多大，HMR 速度都保持极快。</p><h3 id="_3-esbuild-预构建依赖" tabindex="-1">3. esbuild 预构建依赖 <a class="header-anchor" href="#_3-esbuild-预构建依赖" aria-label="Permalink to &quot;3. esbuild 预构建依赖&quot;">​</a></h3><p><strong>Webpack 的问题</strong>：Webpack 使用基于 JavaScript 的转换器和压缩器，处理速度相对较慢。</p><p><strong>Vite 的解决方案</strong>：Vite 使用 esbuild 预构建依赖，esbuild 是用 Go 语言编写的，比传统的 JavaScript 打包器快 10-100 倍。</p>',18)),(e(),t(r,null,{default:i(()=>[p(l,{id:"mermaid-308",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E4%BE%9D%E8%B5%96%E9%A2%84%E6%9E%84%E5%BB%BA%5D%20--%3E%20B%5Besbuild%5D%0A%20%20%20%20B%20--%3E%7C10-100%E5%80%8D%E9%80%9F%E5%BA%A6%7C%20C%5BCommonJS%E8%BD%ACES%E6%A8%A1%E5%9D%97%5D%0A%20%20%20%20B%20--%3E%20D%5B%E5%90%88%E5%B9%B6%E5%B0%8F%E6%A8%A1%E5%9D%97%5D%0A"})]),fallback:i(()=>[...s[5]||(s[5]=[n(" Loading... ",-1)])]),_:1})),s[17]||(s[17]=h(`<h3 id="_4-基于-rollup-的优化生产构建" tabindex="-1">4. 基于 Rollup 的优化生产构建 <a class="header-anchor" href="#_4-基于-rollup-的优化生产构建" aria-label="Permalink to &quot;4. 基于 Rollup 的优化生产构建&quot;">​</a></h3><p><strong>Webpack 的问题</strong>：Webpack 在生产构建中对大型应用的处理效率不够理想。</p><p><strong>Vite 的解决方案</strong>：Vite 在生产环境使用经过优化的 Rollup 配置，针对静态资源部署进行了特别优化，生成更小、更高效的生产包。</p><h3 id="_5-更少的配置复杂度" tabindex="-1">5. 更少的配置复杂度 <a class="header-anchor" href="#_5-更少的配置复杂度" aria-label="Permalink to &quot;5. 更少的配置复杂度&quot;">​</a></h3><p><strong>Webpack 的问题</strong>：Webpack 配置复杂，学习曲线陡峭，容易造成配置不当导致的性能问题。</p><p><strong>Vite 的解决方案</strong>：Vite 采用约定优于配置的理念，提供合理的默认设置，大多数项目无需复杂配置即可获得出色性能。</p><h2 id="vite-和-webpack-各自的优势" tabindex="-1">Vite 和 Webpack 各自的优势 <a class="header-anchor" href="#vite-和-webpack-各自的优势" aria-label="Permalink to &quot;Vite 和 Webpack 各自的优势&quot;">​</a></h2><h3 id="vite-的优势" tabindex="-1">Vite 的优势 <a class="header-anchor" href="#vite-的优势" aria-label="Permalink to &quot;Vite 的优势&quot;">​</a></h3><ol><li><strong>极速的开发服务器启动</strong>：无需等待打包完成即可开始开发</li><li><strong>快速的热更新</strong>：即使在大型应用中也能保持毫秒级的更新速度</li><li><strong>对现代浏览器优化</strong>：充分利用现代浏览器的能力</li><li><strong>内置功能丰富</strong>：TypeScript、JSX、CSS 预处理器等开箱即用</li><li><strong>优化的构建输出</strong>：基于 Rollup 的构建默认启用代码分割和树摇</li></ol><h3 id="webpack-的优势" tabindex="-1">Webpack 的优势 <a class="header-anchor" href="#webpack-的优势" aria-label="Permalink to &quot;Webpack 的优势&quot;">​</a></h3><ol><li><strong>成熟的生态系统</strong>：丰富的 loader 和插件满足各种需求</li><li><strong>灵活的配置</strong>：几乎可以配置构建过程的每个方面</li><li><strong>更好的浏览器兼容性</strong>：可以轻松支持旧版浏览器</li><li><strong>成熟的社区支持</strong>：大量的文档、教程和问题解决方案</li><li><strong>更适合复杂应用</strong>：对于有特殊需求的大型企业应用可能更适合</li></ol><h2 id="如何选择-vite-还是-webpack" tabindex="-1">如何选择：Vite 还是 Webpack？ <a class="header-anchor" href="#如何选择-vite-还是-webpack" aria-label="Permalink to &quot;如何选择：Vite 还是 Webpack？&quot;">​</a></h2><p>选择构建工具应基于项目的具体需求和团队的熟悉程度：</p><table tabindex="0"><thead><tr><th>选择 Vite，如果...</th><th>选择 Webpack，如果...</th></tr></thead><tbody><tr><td>你正在开发一个新项目</td><td>你需要维护一个现有的 Webpack 项目</td></tr><tr><td>你的目标是现代浏览器</td><td>你需要支持 IE11 等旧版浏览器</td></tr><tr><td>你重视开发速度和体验</td><td>你需要高度定制化的构建流程</td></tr><tr><td>你的团队愿意尝试新技术</td><td>你的团队更熟悉 Webpack 配置</td></tr><tr><td>你使用 Vue、React、Svelte 等现代框架</td><td>你有特殊的构建需求</td></tr></tbody></table><h2 id="实用代码示例" tabindex="-1">实用代码示例 <a class="header-anchor" href="#实用代码示例" aria-label="Permalink to &quot;实用代码示例&quot;">​</a></h2><h3 id="vite-创建项目" tabindex="-1">Vite 创建项目 <a class="header-anchor" href="#vite-创建项目" aria-label="Permalink to &quot;Vite 创建项目&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vite-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 yarn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vite-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vite-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svelte-ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="webpack-创建项目" tabindex="-1">Webpack 创建项目 <a class="header-anchor" href="#webpack-创建项目" aria-label="Permalink to &quot;Webpack 创建项目&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 webpack</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-dev-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加脚本到 package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;scripts&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;dev&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;webpack serve --mode development&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;build&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;webpack --mode production&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="总结与展望" tabindex="-1">总结与展望 <a class="header-anchor" href="#总结与展望" aria-label="Permalink to &quot;总结与展望&quot;">​</a></h2><p>Vite 通过创新的架构和现代化的方法，在开发速度方面显著超越了 Webpack。但这并不意味着 Webpack 已经过时——它仍然是一个成熟、灵活的解决方案，适合有特殊需求的复杂项目。</p><p>随着 Web 技术的不断发展，我们可以期待构建工具也会继续演进。未来的趋势可能包括：</p><ul><li>更智能的代码分割和预加载策略</li><li>更好的构建缓存机制</li><li>与 WebAssembly 的深度集成</li><li>对边缘计算的优化支持</li></ul><p>无论您选择 Vite 还是 Webpack，重要的是根据项目的具体需求做出明智的选择，并持续关注这一领域的最新发展。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite 官方文档</a></li><li><a href="https://webpack.js.org/" target="_blank" rel="noreferrer">Webpack 官方文档</a></li><li><a href="https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358" target="_blank" rel="noreferrer">JavaScript 模块化的历史</a></li><li><a href="https://caniuse.com/es6-module" target="_blank" rel="noreferrer">ES 模块浏览器兼容性</a></li></ul>`,26))])}const y=k(b,[["render",o]]);export{A as __pageData,y as default};
