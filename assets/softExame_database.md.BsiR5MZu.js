import{_ as B,C as s,c as n,o as a,a8 as p,b as i,j as A,w as E,a as e,G as r,a9 as o}from"./chunks/framework.B1xsROTH.js";const S=JSON.parse('{"title":"数据库","description":"","frontmatter":{},"headers":[],"relativePath":"softExame/database.md","filePath":"softExame/database.md","lastUpdated":1747062220000}'),d={name:"softExame/database.md"};function u(C,l,h,b,c,f){const t=s("Mermaid");return a(),n("div",null,[l[3]||(l[3]=p('<h1 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h1><h2 id="数据库三级模式两级映射" tabindex="-1">数据库三级模式两级映射 <a class="header-anchor" href="#数据库三级模式两级映射" aria-label="Permalink to &quot;数据库三级模式两级映射&quot;">​</a></h2><p><strong>三级模式解释</strong></p><ol><li>外模式（External Schema）/ 用户模式</li></ol><ul><li>也称为子模式或用户视图</li><li>描述数据库中局部数据的逻辑结构</li><li>是用户能看见和使用的局部数据的逻辑结构描述</li><li>一个数据库可以有多个外模式，一个应用程序只能使用一个外模式</li></ul><ol start="2"><li>概念模式（Conceptual Schema）/ 逻辑模式</li></ol><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>是所有用户的公共数据视图</li><li>与具体的存储设备和存取方法无关</li><li>一个数据库只有一个概念模式</li></ul><ol start="3"><li>内模式（Internal Schema）/ 物理模式</li></ol><ul><li>数据物理结构和存储方式的描述</li><li>描述数据在存储设备上的存储方式和存取方法</li><li>一个数据库只有一个内模式</li></ul><p><strong>两级映射解释</strong></p><ol><li>外模式/概念模式映射</li></ol><ul><li>定义外模式与概念模式之间的对应关系</li><li>保证数据的逻辑独立性</li><li>当概念模式改变时，通过修改映射关系可以保持外模式不变</li></ul><ol start="2"><li>概念模式/内模式映射</li></ol><ul><li>定义概念模式与内模式之间的对应关系</li><li>保证数据的物理独立性</li><li>当内模式改变时，通过修改映射关系可以保持概念模式不变</li></ul>',14)),(a(),i(o,null,{default:E(()=>[r(t,{id:"mermaid-142",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F%22%0A%20%20%20%20%20%20%20%20A%5B%E5%A4%96%E6%A8%A1%E5%BC%8F%2F%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F%3Cbr%3EExternal%20Schema%5D%20%0A%20%20%20%20%20%20%20%20B%5B%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%BC%8F%2F%E9%80%BB%E8%BE%91%E6%A8%A1%E5%BC%8F%3Cbr%3EConceptual%20Schema%5D%0A%20%20%20%20%20%20%20%20C%5B%E5%86%85%E6%A8%A1%E5%BC%8F%2F%E7%89%A9%E7%90%86%E6%A8%A1%E5%BC%8F%3Cbr%3EInternal%20Schema%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E4%B8%A4%E7%BA%A7%E6%98%A0%E5%B0%84%22%0A%20%20%20%20%20%20%20%20D%5B%E5%A4%96%E6%A8%A1%E5%BC%8F%2F%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%BC%8F%E6%98%A0%E5%B0%84%3Cbr%3EExternal%2FConceptual%20Mapping%5D%0A%20%20%20%20%20%20%20%20E%5B%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%BC%8F%2F%E5%86%85%E6%A8%A1%E5%BC%8F%E6%98%A0%E5%B0%84%3Cbr%3EConceptual%2FInternal%20Mapping%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%7C%E6%98%A0%E5%B0%84%7C%20B%0A%20%20%20%20B%20--%3E%7C%E6%98%A0%E5%B0%84%7C%20C%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23f9f%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20style%20B%20fill%3A%23bbf%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20style%20C%20fill%3A%23bfb%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A"})]),fallback:E(()=>l[0]||(l[0]=[e(" Loading... ")])),_:1})),l[4]||(l[4]=A("h2",{id:"数据库的设计过程",tabindex:"-1"},[e("数据库的设计过程 "),A("a",{class:"header-anchor",href:"#数据库的设计过程","aria-label":'Permalink to "数据库的设计过程"'},"​")],-1)),(a(),i(o,null,{default:E(()=>[r(t,{id:"mermaid-146",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%22%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%22%5D%20--%3E%7C%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE%3Cbr%3E%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%3Cbr%3E%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E%E4%B9%A6%7C%20B%5B%22%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%22%5D%0A%20%20%20%20B%20--%3E%7CE-R%E6%A8%A1%E5%9E%8B%7C%20C%5B%22%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%22%5D%0A%20%20%20%20C%20--%3E%7C%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%3Cbr%3E%E8%A7%86%E5%9B%BE%3Cbr%3E%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%7C%20D%5B%22%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%22%5D%0A%20%20%20%20%0A%20%20%20%20E%5B%22%E5%BD%93%E5%89%8D%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BA%94%E7%94%A8%3Cbr%3E%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A6%81%E6%B1%82%22%5D%20--%3E%20A%0A%20%20%20%20F%5B%22%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E8%A6%81%E6%B1%82%22%5D%20--%3E%20A%0A%20%20%20%20%0A%20%20%20%20G%5B%22%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%3Cbr%3E%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA%22%5D%20--%3E%20C%0A%20%20%20%20%0A%20%20%20%20H%5B%22DBMS%E7%89%B9%E6%80%A7%22%5D%20--%3E%20D%0A%20%20%20%20I%5B%22%E7%A1%AC%E4%BB%B6%E3%80%81OS%E7%89%B9%E6%80%A7%22%5D%20--%3E%20D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23f9f%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20style%20B%20fill%3A%23bbf%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20style%20C%20fill%3A%23bfb%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20style%20D%20fill%3A%23fbb%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A"})]),fallback:E(()=>l[1]||(l[1]=[e(" Loading... ")])),_:1})),l[5]||(l[5]=A("h2",{id:"e-r模型",tabindex:"-1"},[e("E-R模型 "),A("a",{class:"header-anchor",href:"#e-r模型","aria-label":'Permalink to "E-R模型"'},"​")],-1)),(a(),i(o,null,{default:E(()=>[r(t,{id:"mermaid-150",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20%25%25%20%E5%AD%A6%E7%94%9F%E5%AE%9E%E4%BD%93%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7%0A%20%20%20%20Student%5B(%22%E5%AD%A6%E7%94%9F%22)%5D%0A%20%20%20%20StudentId((%E5%AD%A6%E5%8F%B7))%0A%20%20%20%20StudentName((%E5%A7%93%E5%90%8D))%0A%20%20%20%20StudentGender((%E6%80%A7%E5%88%AB))%0A%20%20%20%20StudentAge((%E5%B9%B4%E9%BE%84))%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%BD%93%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7%0A%20%20%20%20Course%5B(%22%E8%AF%BE%E7%A8%8B%22)%5D%0A%20%20%20%20CourseId((%E8%AF%BE%E7%A8%8B%E5%8F%B7))%0A%20%20%20%20CourseName((%E8%AF%BE%E7%A8%8B%E5%90%8D))%0A%20%20%20%20CourseTeacher((%E4%BB%BB%E8%AF%BE%E6%95%99%E5%B8%88))%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E9%80%89%E8%AF%BE%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7%0A%20%20%20%20Selection%7B%E9%80%89%E8%AF%BE%7D%0A%20%20%20%20Score((%E6%88%90%E7%BB%A9))%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E8%BF%9E%E6%8E%A5%E5%AD%A6%E7%94%9F%E7%9A%84%E5%B1%9E%E6%80%A7%0A%20%20%20%20Student%20---%20StudentId%0A%20%20%20%20Student%20---%20StudentName%0A%20%20%20%20Student%20---%20StudentGender%0A%20%20%20%20Student%20---%20StudentAge%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E8%BF%9E%E6%8E%A5%E8%AF%BE%E7%A8%8B%E7%9A%84%E5%B1%9E%E6%80%A7%0A%20%20%20%20Course%20---%20CourseId%0A%20%20%20%20Course%20---%20CourseName%0A%20%20%20%20Course%20---%20CourseTeacher%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E8%BF%9E%E6%8E%A5%E9%80%89%E8%AF%BE%E5%85%B3%E7%B3%BB%0A%20%20%20%20Student%20---%20Selection%0A%20%20%20%20Selection%20---%20Course%0A%20%20%20%20Selection%20---%20Score%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E6%A0%87%E6%B3%A8%E5%85%B3%E7%B3%BB%E7%9A%84%E5%9F%BA%E6%95%B0%0A%20%20%20%20M1%5B%2F%22M%22%2F%5D%0A%20%20%20%20N1%5B%2F%22N%22%2F%5D%0A%20%20%20%20Selection%20---%20M1%0A%20%20%20%20Selection%20---%20N1%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE%0A%20%20%20%20classDef%20entity%20fill%3A%23f9f%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20classDef%20attribute%20fill%3A%23bbf%2Cstroke%3A%23333%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20relationship%20fill%3A%23bfb%2Cstroke%3A%23333%2Cstroke-width%3A2px%0A%20%20%20%20%0A%20%20%20%20class%20Student%2CCourse%20entity%0A%20%20%20%20class%20StudentId%2CStudentName%2CStudentGender%2CStudentAge%2CCourseId%2CCourseName%2CCourseTeacher%2CScore%20attribute%0A%20%20%20%20class%20Selection%20relationship%0A"})]),fallback:E(()=>l[2]||(l[2]=[e(" Loading... ")])),_:1})),l[6]||(l[6]=p('<p>实体型转为关系模式？</p><ol><li><p>实体转表：每个实体转为独立表，主键保留。</p></li><li><p>处理联系：按联系类型（1:1、1:N、M:N）合并或新建表。</p></li></ol><blockquote><p>1:1 合并 1:N 在1中添加N的属性 M:N 新建表</p></blockquote><ol start="3"><li><p>处理弱实体：添加依赖实体的主键作为外键。</p></li><li><p>处理特殊属性：拆分复合属性，多值属性单独建表。</p></li><li><p>优化冗余：合并可能冗余的表（如1:1联系）。</p></li></ol><h2 id="关系代数" tabindex="-1">关系代数 <a class="header-anchor" href="#关系代数" aria-label="Permalink to &quot;关系代数&quot;">​</a></h2><p>并、交、差、笛卡尔积、投影、选择、联接</p><p>笛卡尔积：将两个关系（表）中的每个元组（行）与另一个关系的所有元组无条件组合，生成包含所有可能行排列的新关系。 （例如：若表A有m行，表B有n行，笛卡尔积结果为m×n行，列数为两表列数之和。）</p><p>投影：选列，保留所需字段；</p><p>选择：选行，按条件过滤数据；</p><p>联接：组合表，关联匹配的行。</p><p><strong>计算 R ⋈ S (自然连接) 的结果集</strong></p><p>自然连接 (Natural Join) 的操作步骤如下：</p><ul><li>找出 R 和 S 中相同的属性名。在这个例子中，R 有属性 A1, A2, A3，S 有属性 A1, A2, A4。相同的属性是 A1 和 A2。</li><li>找出在这些共同属性 (A1, A2) 上取值都相同的元组。</li><li>将这些元组进行合并，合并时共同属性只保留一份，并加上各自关系中独有的属性。</li></ul><p><strong>计算左外连：</strong> 左外连接的元组总数 = 2 (来自自然连接) + 2 (来自R未匹配) = 4 个。</p><p><strong>计算右外连：</strong> 右外连接的元组总数 = 2 (来自自然连接) + 2 (来自S未匹配) = 4 个。</p><p><strong>计算完全外连接：</strong> |自然连接的元组| + |R中独有的元组| + |S中独有的元组| = 2 + 2 + 2 = 6</p><h2 id="规范化理论-函数依赖" tabindex="-1">规范化理论- 函数依赖 <a class="header-anchor" href="#规范化理论-函数依赖" aria-label="Permalink to &quot;规范化理论- 函数依赖&quot;">​</a></h2><p>函数依赖：</p><p>传递依赖：</p><h2 id="规范化理论-模式分解" tabindex="-1">规范化理论 - 模式分解 <a class="header-anchor" href="#规范化理论-模式分解" aria-label="Permalink to &quot;规范化理论 - 模式分解&quot;">​</a></h2><p>保持函数依赖分解</p><p>无损分解</p><p>表格法（行属性、列模式）、一分为二</p><h2 id="规范化理论-价值与用途" tabindex="-1">规范化理论 - 价值与用途 <a class="header-anchor" href="#规范化理论-价值与用途" aria-label="Permalink to &quot;规范化理论 - 价值与用途&quot;">​</a></h2><h2 id="规范化理论-键-求解候选键" tabindex="-1">规范化理论 - 键（求解候选键） <a class="header-anchor" href="#规范化理论-键-求解候选键" aria-label="Permalink to &quot;规范化理论 - 键（求解候选键）&quot;">​</a></h2><p>求解候选键：先找入度为0的节点，进行遍历</p><p>超键：包含候选键的任意集合</p><p>候选键：最小的超键</p><p>主键：任选一个候选键作为主键</p><p>外键：其他关系的主键</p><h2 id="反规范化技术" tabindex="-1">反规范化技术 <a class="header-anchor" href="#反规范化技术" aria-label="Permalink to &quot;反规范化技术&quot;">​</a></h2><p>问题：由于规范化技术不断的拆分，从而导致数据表过多。这样子虽然减少了数据冗余，提高了增、删、改、查的效率，但是会增加查询的工作量。系统需要进行多次连接，才能进行查询操作，使得系统效率大大降低。</p><p>解决方案：</p><ol><li>增加冗余列：在某些列上增加冗余列，从而减少连接次数</li><li>增加派生列：在某些列上增加派生列，从而减少连接次数</li><li>数据分片：将数据分成若干片，从而减少连接次数</li></ol><h2 id="数据库并发控制" tabindex="-1">数据库并发控制 <a class="header-anchor" href="#数据库并发控制" aria-label="Permalink to &quot;数据库并发控制&quot;">​</a></h2><p>事务：原子性、一致性、隔离性、持久性</p><p>并发存在问题：丢失更新、读脏数据、不可重复读</p><p>封锁协议：</p><p>一级封锁协议：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。可防治丢失更新</p><p>二级封锁协议：在一级的基础上，要求读取数据R之前必须先对其加S锁，读完后释放S锁。可防治读脏数据</p><p>三级封锁协议：在二级的基础上，要求事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放。可防治不可重复读</p><h2 id="数据库完整性约束" tabindex="-1">数据库完整性约束 <a class="header-anchor" href="#数据库完整性约束" aria-label="Permalink to &quot;数据库完整性约束&quot;">​</a></h2><p>实体完整性：主键不能为空</p><p>参照完整性：外键必须取值为被参照实体的主键值</p><p>用户定义完整性：根据业务规则设定</p><p>触发器：在特定事件发生时自动执行的程序</p><h2 id="数据备份" tabindex="-1">数据备份 <a class="header-anchor" href="#数据备份" aria-label="Permalink to &quot;数据备份&quot;">​</a></h2><p>冷备份（静态备份）：数据库关闭时进行备份</p><p>热备份（动态备份）：数据库运行时进行备份</p><p>完全备份：备份所有数据</p><p>差量备份：只备份自<strong>上次完全备份</strong>以来变化的数据</p><p>增量备份：只备份自<strong>上次备份</strong>以来变化的数据</p><p>转储：</p><p>静态转储：静态转储是数据库运行期间，数据库处于关闭状态，将数据库的结构和数据全部备份到磁盘上。</p><p>静态增量转储：静态增量转储是数据库运行期间，数据库处于关闭状态，将数据库的结构和数据实时备份到磁盘上。</p><p>动态转储：动态转储是数据库运行期间，数据库处于打开状态，将数据库的结构和数据实时备份到磁盘上。</p><p>动态增量转储：动态增量转储是数据库运行期间，数据库处于打开状态，将数据库的结构和数据实时备份到磁盘上。</p><p>日志文件：事务日志是针对数据库所做的任何修改操作记录，它可以记录对数据库的任何操作，并将其保存在独立的文件中。</p><h2 id="数据库恢复" tabindex="-1">数据库恢复 <a class="header-anchor" href="#数据库恢复" aria-label="Permalink to &quot;数据库恢复&quot;">​</a></h2><p>事务本身的可预期故障：</p><ul><li>事务故障：事务在运行过程中由于故障而未能正确执行，导致数据不一致</li><li>系统故障：系统在运行过程中由于故障而未能正确执行，导致数据不一致</li><li>介质故障：介质故障是指存储介质（如磁盘、磁带）损坏，导致数据丢失</li></ul><p>解决方案：</p><ul><li>事务故障：在程序中预先设置Rollback语句，在事务失败时执行Rollback语句，回滚到事务开始前的状态</li><li>系统故障：在程序中预先设置Checkpoint，在系统故障时，执行Checkpoint，将数据库恢复到最近一次Checkpoint的状态</li><li>介质故障：在程序中预先设置Redo和Undo操作，在介质故障时，执行Redo和Undo操作，将数据库恢复到介质故障前的状态</li></ul><h2 id="数据仓库与数据挖掘" tabindex="-1">数据仓库与数据挖掘 <a class="header-anchor" href="#数据仓库与数据挖掘" aria-label="Permalink to &quot;数据仓库与数据挖掘&quot;">​</a></h2><p>数据仓库：</p><ul><li>数据仓库是面向主题的、集成的、不可更新的、随时间变化的数据集合</li></ul><p>数据挖掘：</p><ul><li>数据挖掘是从大量数据中通过算法提取出有价值的信息的过程</li></ul><p>常见方法：决策树、神经网络、关联规则、聚类分析、遗传算法</p><p>常见分类：</p><ul><li>关联分析：发现数据之间的关联关系</li><li>序列模式：发现数据之间的序列关系（前后关系）</li><li>分类：根据已知样本的某些特征，判断一个新的样本属于哪种已知的样本类</li><li>聚类：将数据分成若干类，使得类内数据相似度最大，类间数据相似度最小</li><li>预测：根据已知样本的某些特征，预测新的样本的值</li></ul><h2 id="数据库安全" tabindex="-1">数据库安全 <a class="header-anchor" href="#数据库安全" aria-label="Permalink to &quot;数据库安全&quot;">​</a></h2><p>安全措施：</p><ul><li>用户标识和鉴定：最外层的安全保护措施</li><li>存取控制：对用户进行授权，包括操作类型和数据对象的权限</li><li>密码的存储和传输：对远程终端信息用密码传输</li><li>视图机制：对不同的用户定义不同的视图，从而对不同用户隐藏实际数据</li><li>审计：对用户操作进行记录和监控</li><li>数据加密：对敏感数据进行加密存储和传输</li></ul><h2 id="大数据" tabindex="-1">大数据 <a class="header-anchor" href="#大数据" aria-label="Permalink to &quot;大数据&quot;">​</a></h2><p>数据量（Volume）：数据量是指数据的大小，通常以字节（Byte）为单位。</p><p>多样性（Variety）：数据种类是指数据的类型，通常有结构化数据和非结构化数据。</p><p>数据速度（Velocity）：数据速度是指数据的增长速度，通常以每秒多少条记录为单位。</p><p>价值密度（Value）：价值密度是指数据的价值，通常以每条记录的价值为单位。</p>',79))])}const D=B(d,[["render",u]]);export{S as __pageData,D as default};
