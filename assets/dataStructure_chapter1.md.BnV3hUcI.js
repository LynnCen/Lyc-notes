import{_ as t,c as e,o as l,a8 as r}from"./chunks/framework.vmekjPwi.js";const o="/Lyc-notes/assets/1.B2_Nlrv3.png",_=JSON.parse('{"title":"第一章 绪论","description":"","frontmatter":{},"headers":[],"relativePath":"dataStructure/chapter1.md","filePath":"dataStructure/chapter1.md","lastUpdated":1716538420000}'),i={name:"dataStructure/chapter1.md"};function n(p,a,h,s,d,c){return l(),e("div",null,a[0]||(a[0]=[r('<h1 id="第一章-绪论" tabindex="-1">第一章 绪论 <a class="header-anchor" href="#第一章-绪论" aria-label="Permalink to &quot;第一章 绪论&quot;">​</a></h1><h2 id="数据结构的基本概念" tabindex="-1">数据结构的基本概念 <a class="header-anchor" href="#数据结构的基本概念" aria-label="Permalink to &quot;数据结构的基本概念&quot;">​</a></h2><h4 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h4><ol><li><p>数据</p></li><li><p>数据元素</p></li></ol><p>数据元素是数据的基本单位</p><ol start="3"><li>数据对象</li></ol><p>数据对象是具有相同性质的数据元素的集合，是数据的一个子集</p><ol start="4"><li>数据类型</li></ol><p>数据类型是 一个值的集合和定义在此集合上的 一组操作的总称。</p><ol start="5"><li><p>数据结构</p><p>1)原子类型 2)结构类型 3)抽象数据类型</p></li></ol><h4 id="数据结构三要素" tabindex="-1">数据结构三要素 <a class="header-anchor" href="#数据结构三要素" aria-label="Permalink to &quot;数据结构三要素&quot;">​</a></h4><ol><li><p>数据的逻辑结构 逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。 分为线性结构和非线性结构</p></li><li><p>数据的存储结构 存储结构是指数据结构在计算机中的表示 (又称映像)，也称物理结构。它包括数据元素的 表示和关系的表示。 1)顺序存储 2)链式存储 3)索引存储 4)散列存储</p></li><li><p>数据的运算</p></li></ol><h2 id="算法和算法评价" tabindex="-1">算法和算法评价 <a class="header-anchor" href="#算法和算法评价" aria-label="Permalink to &quot;算法和算法评价&quot;">​</a></h2><h4 id="算法的基本概念" tabindex="-1">算法的基本概念 <a class="header-anchor" href="#算法的基本概念" aria-label="Permalink to &quot;算法的基本概念&quot;">​</a></h4><p>算法(Algorithm)是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指 令表示一 个或 多个操 作</p><h4 id="算法效率的度量" tabindex="-1">算法效率的度量 <a class="header-anchor" href="#算法效率的度量" aria-label="Permalink to &quot;算法效率的度量&quot;">​</a></h4><ol><li>时间复杂度</li></ol><p>一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为 T (n )， 它是该算法问题规模 n 的函数，时间复杂度主要分析 T(n)的数量级。最深层循环中的语句。</p><p>分析规则：</p><p>1、加法规则 : T(n) = T1(n) + T2(n) = 0 (f (n ) )+ O(g(n) ) = 0 (m a x (f (n )，g (n ) ) ) 2、乘法规则: T(m)= T.(n)×T.(n)=O(f(n)×O(g(n)=0(f(n)×g(n)</p><ol start="2"><li>空间复杂度</li></ol><p>算法的空间复杂度 S(n)定义为该算法所需的存储空间，它是问题规模 n 的函数 算法原地工作是指算法所需的辅助空间为常量，即 O(I)</p><h2 id="复杂度题型分析" tabindex="-1">复杂度题型分析 <a class="header-anchor" href="#复杂度题型分析" aria-label="Permalink to &quot;复杂度题型分析&quot;">​</a></h2><p><img src="'+o+'" alt="alt text"></p>',24)]))}const m=t(i,[["render",n]]);export{_ as __pageData,m as default};
