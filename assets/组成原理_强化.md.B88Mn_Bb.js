import{_ as p,c as l,o as t,aa as o}from"./chunks/framework.CAVwB9kQ.js";const f=JSON.parse('{"title":"强化","description":"","frontmatter":{},"headers":[],"relativePath":"组成原理/强化.md","filePath":"组成原理/强化.md","lastUpdated":1729676575000}'),i={name:"组成原理/强化.md"},a=o('<h1 id="强化" tabindex="-1">强化 <a class="header-anchor" href="#强化" aria-label="Permalink to &quot;强化&quot;">​</a></h1><h2 id="第一章" tabindex="-1">第一章 <a class="header-anchor" href="#第一章" aria-label="Permalink to &quot;第一章&quot;">​</a></h2><p><strong>1. 翻译程序、解释程序、汇编程序、编译程序的区别和联系是什么?</strong></p><p>翻译程序有两种:一种是编译程序，它将高级语言源程序一次全部翻译成目标程序，只要源程序不变，就无须重新翻译。 另一种是解释程序，它将源程序的 一条语句翻译成对应的机器目标代码，并立即执行，然后翻译下一条源程序语句并执行，直至所有源程序语句全部被翻译并执行 完。所以解释程序的执行过程是翻译一句执行一句，并且不会生成目标程序。</p><p>汇编程序也是 一种语言翻译程序，它把汇编语言源程序翻译为机器语言程序。</p><p>编译程序与汇编程序的区别:若源语言是诸如C、C++、Java等“高级语言”，而目标语言是 诸如汇编语言或机器语言之类的 “ 低级语言”，则这样的一 个翻译程序称为编译程序。若源语言 是汇 编语言，而目标语言是机器语言，则这样的一 个翻译程序称为汇编程序。</p><p><strong>2. 字长、机器字长、指令字长、存储字长的区别和联系</strong></p><p>字长是指CPU内部用于整数运算的数据通路的宽度，因此字长等于CPU内部用于整数运算的运算器位数和通用寄存器宽度。</p><p>指令字长：一个指令字中包含的二进制代码的位数（半字长指令、双字长指令）</p><p>存储字长：一个存储单元存储的二进制代码的位数</p><p><strong>3. 性能指标</strong></p><p>时钟周期：CPU工作的最小时间单元</p><p>主频 = 1/时钟周期</p><p>CPI：一条指令所需要的时钟周期数</p><p>IPS：每秒执行多少条指令 IPS = 主频 / 平均CPI</p><p>MIPS：每秒执行多少百万条指令 = 主频/ (CPI x 10^6)</p><p>MIPS 百万 10^6 GIPS 十亿 10^9 TIPS 万亿 10^12 PIPS 千万亿 10^15 亿亿10^16</p><p>执行时间 = 指令条数 x CPI / 主频</p><h2 id="第二章" tabindex="-1">第二章 <a class="header-anchor" href="#第二章" aria-label="Permalink to &quot;第二章&quot;">​</a></h2><ol><li>二进制、八进制和十六进制相互转换</li></ol><p>常见的二进制和十进制数：</p><ul><li>(2^{10} = 1024) ⚠️</li><li>(2^{11} = 2048)</li><li>(2^{12} = 4096)</li><li>(2^{13} = 8192)</li><li>(2^{14} = 16,384)</li><li>(2^{15} = 32,768)</li><li>(2^{16} = 65,536) ⚠️</li><li>(2^{17} = 131,072)</li><li>(2^{18} = 262,144)</li><li>(2^{19} = 524,288)</li><li>(2^{20} = 1,048,576)</li></ul><p>注意带小数的计算：整数部分除基取余法，小数部分乘基取整法上左下右</p><ol start="2"><li>原码、补码、反码、移码</li></ol><p>表示范围（对称性）、0表示（是否唯一）、相互转换</p><p>原码表示范围：-(2^n -1) ~ (2^n -1)，关于原点对称</p><p>0表示有+0和-0之分，不唯一，一般用来表示真值</p><p>补码表示范围：-(2^n) ~ (2^n - 1)，不对称，比原码多一个-2^n</p><p>0表示唯一</p><p>反码表示范围：了解 各位取反</p><p>移码：真值+ 偏置值，0表示唯一</p><p>原码转补码：正数相同，负数原码按位取反末位+1，或者从右往左数第一个1，后续的1都改为0</p><ol start="3"><li>无符号整数和有符号整数的转换</li></ol><p>采用补码表示</p><p>char、short、int、long的位数</p><p>char默认是无符号数，其他默认带符号数，相互类型转换</p><p>大转小（截断），小转大（补位-&gt; 零拓展和符号拓展）</p><ol start="4"><li>运算器部件和加法器的组成</li></ol><p>ALU、移位器、状态寄存器（PSW）、通用寄存器</p><ol start="5"><li>逻辑移位和算术移位</li></ol><p>各自的移位规则？</p><p>带符号数和无符号数分别采用哪种移位？</p><p>移位操作的溢出判断和精度丢失问题</p><ol start="6"><li>加减运算</li></ol><p>注意题目中给的是真值还是机器数（可能为补码）</p><p>减法变加法</p><ol start="7"><li>溢出判断</li></ol><p>溢出的前提：符号相同相加、符号相异相减、</p><p>溢出判断的3种方法：一位符号位、双符号位、</p><ol start="8"><li>OF、SF、ZF、CF所表示的含义</li></ol><p>OF：溢出标志，对无符号数无意义，用于有符号数的溢出判断 OF = Cn 异或 Cn-1 符号位进位和最高数位进位异或</p><p>CF：进位标志，对有符号数无意义，用于无符号数的溢出判断 CF = Sub 异或 Cout</p><p>ZF：零标志位，均适用。</p><p>SF：符号位，对无符号数无意义</p><ol start="9"><li><p>无符号数和有符号数加减运算后CF和OF的值</p></li><li><p>乘除法运算 error❌</p></li></ol><p>乘法实现原理</p><p>乘法指令溢出判断</p><ol start="11"><li>浮点数的表示格式</li></ol><p>符号 + 尾数 + 基数^阶数</p><p>上溢和下溢判断</p><ol start="12"><li>浮点数的规格化</li></ol><p>左归：尾数左移，阶码-1</p><p>右归：尾数右移，阶码+1</p><ol start="13"><li>IEEE754标准</li></ol><p>单精度浮点数格式（32位）：1一位符号位，8位阶码，23位尾数（最高位隐含1所以拓展到24位）</p><p>双精度浮点数格式（64位）：一位符号位，11位阶码，52位尾数</p><p>阶码使用移码e表示（真值+偏置值127） 1～254，真值范围-126 ～ 127</p><p>单精度最小值和最大值</p><p>1.0 x 2^-126 1.111111... x 2^127 = (2-2^-23) x 2^127</p><p>阶码全0全1的含义（正零、负零、正无穷、负无穷）</p><p>0.23个11如何表示？ 2-2^-23</p><p>非规格化数的满足条件：阶码全0 尾数不为0</p><p>非规格化正数和负数：尾数 x 2^-126</p><ol start="14"><li>浮点数的加减运算</li></ol><p>对阶 （小阶向大阶看齐）阶码相等</p><p>尾数加减（注意隐含位）</p><p>尾数规格化（左归右归）</p><p>尾数舍入（丢失精度）不影响结果是否溢出</p><p>溢出判断</p><ol start="15"><li>类型转换后数值变化</li></ol><p>int转float：float所表示的范围比int大得多，所以float能表示int，但float23位尾数不能表示int32位尾数，存在精度丢失。</p><p>int转double或 float转double：double所表示的范围以及尾数精度都要比int和float所表示的大，故能完全表示</p><p>double转float：float所表示的范围更小，故可能发生溢出和精度丢失</p><p>float或者double转int：大范围转小范围存在溢出截断和精度丢失</p><ol start="16"><li>数据的大端小端存储</li></ol><p>大端方式：先高字节，再低字节</p><p>小端方式：先低字节，再高字节</p><ol start="17"><li>对齐方式</li></ol><p>边界对齐：</p><p>边界不对齐：</p>',90),r=[a];function e(s,n,d,_,c,h){return t(),l("div",null,r)}const u=p(i,[["render",e]]);export{f as __pageData,u as default};
