import{_ as a,c as e,o as r,a8 as o}from"./chunks/framework.BR0kJavg.js";const h=JSON.parse('{"title":"机器学习的分类","description":"","frontmatter":{},"headers":[],"relativePath":"AI/机器学习/机器学习的分类.md","filePath":"AI/机器学习/机器学习的分类.md","lastUpdated":1757601934000}'),n={name:"AI/机器学习/机器学习的分类.md"};function s(l,t,_,i,p,d){return r(),e("div",null,[...t[0]||(t[0]=[o('<h1 id="机器学习的分类" tabindex="-1">机器学习的分类 <a class="header-anchor" href="#机器学习的分类" aria-label="Permalink to &quot;机器学习的分类&quot;">​</a></h1><h2 id="机器学习分类" tabindex="-1">机器学习分类 <a class="header-anchor" href="#机器学习分类" aria-label="Permalink to &quot;机器学习分类&quot;">​</a></h2><ul><li><p><strong>监督学习</strong>:通俗的来讲，我们给计算机一堆选择题(训练样本)，并同时提供了它们的标准答案，计算机努力调整自己的模型参数，希望自己推测的答案与标准答案越致越好，使计算机学会怎么做这类题。然后再让计算机去帮我们做没有提供答案的选择题(测试样本)</p></li><li><p><strong>非监督学习</strong>:通俗的来讲，我们给计算机一堆选择题(训练样本)，但是不提供标准答案，计算机尝试分析这些题目之间的关系，对题目进行分类，计算机也不知道这几堆题的答案分别是什么，但计算机认为每一个类别内的题的答案应该是相同的。</p></li><li><p><strong>半监督学习</strong>:传统监督学习通过对大量有标记的训练样本进行学习以建立模型用于预测新的样本的标记。例如，在分类任务中标记就是样本的类别，而在回归任务中标记就是样本所对应的实值输出。随着存储数据能力的高度发展，在很多实际任务中可以容易地获取大批未标记数据，而对这些数据赋予标记则往往需要耗费大量的人力物力例如，在进行 web 网页推荐时，需请用户标记出感兴趣的网页，但很少有用户愿意花很多时间来提供标记，因此有标记的网页数据比较少，但Web 上存在着无数的网页它们都可作为未标记数据来使用。</p></li><li><p><strong>强化学习</strong>:通俗的来讲，我们给计算机一堆选择题(训练样本)，但是不提供标准答案，计算机尝试去做这些题，我们作为老师批改计算机做的对不对，对的越多，奖励越多，则计算机努力调整自己的模型参数，希望自己推测的答案能够得到更多的奖励。不严谨的讲，可以理解为先无监督后有监督学习。</p></li></ul>',3)])])}const m=a(n,[["render",s]]);export{h as __pageData,m as default};
