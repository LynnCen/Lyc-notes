import{_ as p,c as l,o as a,aa as i}from"./chunks/framework.CAVwB9kQ.js";const o="/Lyc-notes/assets/%E5%AF%B9%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%AD%A5%E9%AA%A4.CUxftUHQ.png",t="/Lyc-notes/assets/%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%93%BE%E6%8E%A5.Dmi82E50.png",r="/Lyc-notes/assets/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E8%A1%A8.DDp07ZFj.png",s="/Lyc-notes/assets/%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95.KzfvXGMV.png",e="/Lyc-notes/assets/%E5%8A%A8%E6%80%81%E9%87%8D%E5%AE%9A%E4%BD%8D.B7v15JbH.png",n="/Lyc-notes/assets/%E5%88%86%E9%A1%B5%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%98%E5%8C%96%E6%9C%BA%E6%9E%84.BXvoVlkm.png",h="/Lyc-notes/assets/%E5%85%B7%E6%9C%89%E5%BF%AB%E8%A1%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84.mNGlVoE2.png",g="/Lyc-notes/assets/%E6%AE%B5%E8%A1%A8%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84.BRNcaI-B.png",c="/Lyc-notes/assets/%E5%88%86%E6%AE%B5%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E8%BF%87%E7%A8%8B.CpAccw-h.png",d="/Lyc-notes/assets/%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84.CJfTDUs_.png",E="/Lyc-notes/assets/%E6%AE%B5%E9%A1%B5%E5%BC%8F%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84.DmzEZfpR.png",m="/Lyc-notes/assets/%E8%AF%B7%E6%B1%82%E5%88%86%E9%A1%B5%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2.DAL-KZxm.png",u="/Lyc-notes/assets/LRU%E6%A0%88.DbNIOHGe.png",A="/Lyc-notes/assets/%E6%AE%B5%E8%A1%A8%E9%A1%B9%E5%AD%97%E6%AE%B5.C0ffDZ_y.png",L=JSON.parse('{"title":"第 3 章 内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"os/chapter3.md","filePath":"os/chapter3.md","lastUpdated":1724119759000}'),b={name:"os/chapter3.md"},B=i('<h1 id="第-3-章-内存管理" tabindex="-1">第 3 章 内存管理 <a class="header-anchor" href="#第-3-章-内存管理" aria-label="Permalink to &quot;第 3 章 内存管理&quot;">​</a></h1><h2 id="内存管理概念" tabindex="-1">内存管理概念 <a class="header-anchor" href="#内存管理概念" aria-label="Permalink to &quot;内存管理概念&quot;">​</a></h2><p>内存管理的主要功能：</p><ul><li><p>内存空间的分配与回收。由操作系统负责内存空间的分配和管理，记录内存的空闲空间、内存的分配情况，并回收已结束进程所占用的内存空间。</p></li><li><p>地址转换。由于程序的逻辑地址与内存中的物理地址不可能一致，因此存储管理必须提供地址变换功能，将逻辑地址转换成相应的物理地址。</p></li><li><p>内存空间的扩充。利用虚拟存储技术从逻辑上扩充内存。</p></li><li><p>内存共享。指允许多个进程访问内存的同一部分。例如，多个合作进程可能需要访问同一 块数据，因此必须支持对内存共享区域进行受控访问。</p></li><li><p>存储保护。保证各个进程在各自的存储空间内运行，互不干扰。</p></li></ul><h3 id="存储器的层次结构" tabindex="-1">存储器的层次结构 <a class="header-anchor" href="#存储器的层次结构" aria-label="Permalink to &quot;存储器的层次结构&quot;">​</a></h3><ol><li><p>存储器的多层结构</p></li><li><p>可执行存储器</p><p>寄存器和主存储器称为可执行存储器</p></li></ol><p><strong>主存储器与寄存器</strong></p><ol><li><p>主存储器</p><p>简称内存或主存，是计算机系统中的主要部件，用于保存进程运行时的程序和数据</p></li><li><p>寄存器</p></li></ol><p><strong>高速缓存和磁盘缓存</strong></p><ol><li><p>高速缓存</p><p>介于寄存器和存储器之间（cache）</p></li><li><p>磁盘缓存</p><p>介于磁盘 I/O 与主存之间</p></li></ol><h3 id="程序的装入和链接" tabindex="-1">程序的装入和链接 <a class="header-anchor" href="#程序的装入和链接" aria-label="Permalink to &quot;程序的装入和链接&quot;">​</a></h3><p>（1）编译，有编译程序对用户源程序进行编译，形成若干目标模块</p><p>（2）链接，由链接程序将编译后形成的一组目标模块以及它们所需要的库函数链接在一起，形成一个完整的装入模块。</p><p>（3）装入，由装入程序将装入模块装入内存</p><p><img src="'+o+'" alt="34"></p><p><strong>装入方式</strong>：</p><ol><li><p><strong>绝对装入方式</strong></p><p>将物理地址装入该进程的内存起始位置，也就是装入到内存中事先指定的位置，适合单道程序环境</p></li><li><p><strong>可重定位装入方式</strong></p><p>根据内存的具体情况将装入模块装入到内存的适当位置，逻辑地址与实际装入内存后的物理地址不同。允许装入到内存中任何允许的位置</p><p>必须执行时分配其要求的全部内存空间，运行期间不能再移动</p><p>重定位：把在装入时对目标程序中指令和数据地址的修改过程称为重定位。</p><p>静态重定位：装入之后不在改变</p></li><li><p><strong>动态运行时的装入方式</strong></p><p>动态运行时的装入程序在把装入模块装入内存后，并不立即把装入模块中的逻辑地址转换为物理地址，而是把这种地址转换推迟到程序真正要执行时才运行。所以装入内存后的所有地址都是逻辑地址。可以将程序分配到不连续的存储区。</p></li></ol><p>源程序经过编译后，可得到一组目标模块。链接程序的功能就是把这组目标模块以及它们所需要的库函数装配成一个完整的装入模块。在进行链接时，根据链接的时间不同，分以下三种情况：</p><ol><li><p><strong>静态链接方式</strong></p><p>在程序运行之前，先将各模块以及它们所需的库函数链接成一个完整的装配模块，以后不再拆开。事先链接方式</p><p><img src="'+t+'" alt="35"></p></li><li><p><strong>装入时动态链接</strong></p><p>指将用户源程序编译后所得到的一组目标模块，在装入内存时，采用边装入边链接的链接方式。即在装入一个目标模块时，若发生一个外部模块调用时间，将引起装入程序去找出相应的外部目标模块，并将它装入内存</p></li><li><p><strong>运行时动态链接</strong></p><p>将对某些模块的链接推迟到程序<em>执行时</em>才进行，当执行过程总发现一个被调用的模块尚未装入内存时，立即由 OS 去找到该模块，并将之装入内存，将其链接到调用者模块上，凡事未被使用的模块都不会被装入到内存和被链接到装入模块上。</p><p>编译后，每个目标模块都从 0 号单元开始编址，这称为该目标模块的<strong>相对地址(或逻辑地址)</strong>。 当链接程序将各个模块链接成一个完整的可执行目标程序时，链接程序顺序依次按各个模块的相 对地址构成统 一的从 0 号单元开始编址的逻辑地址空间(或虚拟地址空间)。</p><p><strong>物理地址空间</strong>是指内存中物理单元的集合，它是地址转换的最终地址，进程在运行时执行指 令和访问数据，最后都要通过物理地址从主存中存取。当装入程序将可执行代码装入内存时，必须通过地址转换将逻辑地址转换成物理地址，这个过程称<strong>地址重定位</strong>。</p><p>操作系统通过*内存管理部件(MMU)*将进程使用的逻辑地址转换为物理地址</p></li></ol><p><strong>进程中的内存映像</strong></p><ul><li><p>代码段:即程序的二进制代码，代码段是只读的，可以被多个进程共享。</p></li><li><p>数据段:即程序运行时加工处理的对象，包括全局变量和静态变量。</p></li><li><p>进程控制块(PCB):存放在系统区。操作系统通过 PCB 来控制和管理进程。</p></li><li><p>堆:用来存放动态分配的变量。通过调用 malloc 函数动态地向高地址分配空间。</p></li><li><p>栈:用来实现函数调用。从用户空间的最大地址往低地址方向增长</p></li></ul><p><strong>内存保护</strong></p><p>根据一个地址判断是否越界，内存保护可采取两种方法：</p><ul><li><p>在 CPU 中设置<strong>一对上、下限寄存器</strong>，存放用户进程在主存中的下限和上限地址，每当 CPU 要访问一个地址时，分别和两个寄存器的值相比，判断有无越界。</p></li><li><p>采用**重定位寄存器 (也称基地址寄存器)和界地址寄存器 (也称限长寄存器)**进行越界捡查。重定位寄存器中存放的是进程的起始物理地址（装入方式采用动态重定位装入），界地址寄存器中存放的是进程的最大逻辑地址。内存管理部件将逻辑地址与界地址寄存器进行比较，若未发生地址越界，则加上重定位寄存器的值后映射成物理地址，再送交内存单元。</p></li></ul><p>实现内存保护需要重定位寄存器和界地址寄存器，因此要注意两者的区别。重定位寄存器是用来<strong>加</strong>的，逻辑地址加上重定位寄存器中的值就能得到物理地址;界地址寄存器是用来<strong>比</strong>的，通过比较界地址寄存器中的值与逻辑地址的值来判断是否越界。</p><h3 id="连续分配存储管理方式" tabindex="-1">连续分配存储管理方式 <a class="header-anchor" href="#连续分配存储管理方式" aria-label="Permalink to &quot;连续分配存储管理方式&quot;">​</a></h3><ol><li><strong>单一连续分配</strong></li></ol><p>在单一连续分配方式中，内存被分为系统区和用户区，系统区仅供操作系统使用，通常在低 地址部分;用户区内存中仅有一道用户程序，即用户程序独占整个用户区。不存在外部碎片</p><ol start="2"><li><strong>固定分区分配</strong></li></ol><p>将用户空间划分成若干个固定大小的区域，在每个分区装入一道作业。</p><p>划分分区的方法：</p><ul><li><p>分区大小相等</p></li><li><p>分区大小不等。</p></li></ul><p>内存的分配： 建立分区使用表管理分区</p><p>问题：程序太大而放不进任何一个分区;当程序小于固定分区大小时， 也要占用一个完整的内存分区，这样分区内部就存在空间浪费，这种现象称为<strong>内部碎片</strong>；</p><ol start="3"><li><strong>动态分区分配</strong></li></ol><p>又称为可变分区分配，它是根据进程的实际需要，动态地为之分配内存空间。内存中会产生越来越多的小内存块，内存的利用率也随之下降。这些小内存块被称为<strong>外部碎片</strong>，外部碎片可通过紧凑技术来克服，即操作系统不时地对进程进行移动和整理。但是，这需要动态重定位寄存器的支持，且相对费时。紧凑过程实际上类似于 Windows 系统中的磁盘碎片整理程序，只不过后者是对外存空间的紧凑。 <img src="'+r+'" alt="36"></p><p>（1）<strong>基于顺序搜索的动态分区分配算法</strong></p><p>为了实现动态分区分配，通常是将系统中的空闲分区链接成一个链。所谓顺序搜索，是指一次搜索空闲分区链上的空闲分区，去寻找一个其大小满足要求的分区。</p><ul><li><p><em>首次适应（First Fit）算法</em></p><p>FF 要求空闲分区链以<strong>地址递增</strong>的次序链接，再分配内存时，从链首开始顺序查找，直至找到一个大小能满足要求的空闲分区。优先利用内存中低地址部分，保留高地址的大空闲区，缺点就是低址部分不断被划分，会留下许多难以利用的、很小的空闲分区，称为碎片。而每次又是头开始查找。</p></li><li><p><em>循环首次适应（NF）算法（邻近适应算法）</em></p><p>在 FF 算法上改进，不是每次都是从链首开始查找，而是从上次找到的空闲分区的下<strong>一个空闲分区开始查找</strong>。</p><p>优点：能使内存中的空闲分区分布更加均匀，从而减少了查找空闲分区时的开销，</p><p>缺点：会缺乏大的空闲分区</p></li><li><p><em>最佳适应（BF）算法</em></p><p>空闲分区按<strong>容量递增</strong>的次序排列。所谓“最佳”是指，每次为作业分配内存时，总是把能满足要求、又是最小的空闲分区分配给作业，避免大材小用。要求所有空闲分区按其容量以从小到大的顺序形成-空闲分区链。会存在碎片问题。</p></li><li><p><em>最坏适应算法（WF）</em></p><p>与最佳适应相反，总是挑选一个<strong>最大</strong>的空闲区，从中分割一部分存储空间给作业使用，以至于存储器中缺乏大的空闲分区，故把它称为是最坏适应算法。</p><p>要求按<strong>容量</strong>的从大到小的顺序排列。</p><p>优点：可使剩下的空闲区不至于太小，产生碎片的可能性最小，对中、小作业有利。</p></li></ul><p>（2）<strong>基于索引搜索的动态分区分配算法</strong></p><p>索引分配算法的思想是，根据其大小对空闲分区分类，对于每类 (大小相同)空闲分区，单独设立一个空闲分区链，并设置一张索引表来管理这些空闲分区链。 当为进程分配空间时，在索引表中查找所需空间大小对应的表项，并从中得到对应的空闲分区链的头指针，从而获得一个空闲分区 。索引分配算法有以下三种：</p><ul><li><p><em>快速适应算法</em></p><p>又称为分类搜索算法，将空闲分区根据其容量大小进行分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链表，内存中设立一个管理索引表，其中的每一个索引项对应了一种空闲分区类型，并记录了该类型空闲分区链表表头的指针。空闲分区的分类是按照进程常用的空间大小进行划分的。分配时，不会对分区进行分割。不会产生碎片</p><p>缺点：为了有效合并分区，在分区归还主存时的算法复杂，系统开销大。</p></li><li><p><em>伙伴系统</em></p><p><img src="'+s+'" alt="37"></p></li><li><p><em>哈希算法</em></p><p>利用哈希快速查找的优点，以及空闲分区在可利用空闲区标中的分布规律，建立哈希函数，构造一张以空闲分区大小为关键字的哈希表，该表的每一个表项记录了一个对应的空闲分区链表表头指针。</p><p>当进行空闲分区分配时，根据所需空闲分区大小，通过哈希函数计算，即得到在哈希表中的位置，从中得到相应的空闲分区链表，实现最佳分配策略。</p></li></ul><h3 id="动态可重定位分区分配" tabindex="-1">动态可重定位分区分配 <a class="header-anchor" href="#动态可重定位分区分配" aria-label="Permalink to &quot;动态可重定位分区分配&quot;">​</a></h3><ol><li><p>紧凑</p><p>将原来多个分散的小分区拼接成一个大分区的方法，称为“拼接”或“紧凑”</p><p>问题：紧凑后的用户程序在内存中的位置发生了变化，必须对移动了的程序或数据进行重定位。</p></li><li><p>动态重定位</p><p>重定位寄存器，用来存放程序在内存中的起始地址，真正访问的地址是相对地址与重定位寄存器中的地址想加而形成的。</p><p><img src="'+e+'" alt="38"></p></li><li><p>动态重定位分区分配算法</p><p>与动态分区分配算法基本相同，只是增加紧凑功能。</p></li></ol><h3 id="对换技术" tabindex="-1">对换技术 <a class="header-anchor" href="#对换技术" aria-label="Permalink to &quot;对换技术&quot;">​</a></h3><p>内存紧张时，换出某些进程以腾出内存空间，再换入某些进程</p><p>磁盘分为文件区和对换区，换出的进程放在对换区</p><ol><li><strong>多道程序环境下的对换技术：</strong></li></ol><ul><li><p>对换的引入</p><p>兑换：指把内存中暂时不能运行的进程或者暂时不用的程序和数据换出到外存上，以便腾出足够的内存空间，再把已具备运行条件的进程或进程所需的程序和数据换入内存。改善内存利用率的有效措施，它可以直接提高处理机的利用率和系统的吞吐量。</p></li><li><p>对换的类型</p><p>（1）整体对换</p><p>（2）页面（分段）对换</p></li></ul><ol start="2"><li><strong>对换空间的管理</strong></li></ol><ul><li><p>兑换空间管理的主要目标</p><p>磁盘空间分为：文件区和对换区</p><p>1）对文件区的管理和目标</p><p>2）对对换区空间的管理的主要目标</p></li><li><p>对换区空闲盘块管理中的数据结构</p></li><li><p>对换空间的分配与回收</p></li></ul><ol start="3"><li><strong>覆盖技术</strong></li></ol><ul><li><p>一个固定区</p><p>存放最活跃的程序段</p><p>固定区中的程序段在运行过程中不会调入调出</p></li><li><p>若干覆盖区</p><p>不可能同时被访问程序段可共享一个覆盖区</p><p>覆盖区中的程序段在运行过程中会根据需要调入调出</p></li></ul><p>必须由程序猿声明覆盖结构，OS 完成自动覆盖</p><p>缺点：对用户不透明，增加了用户编程负担</p><ol start="4"><li><strong>覆盖与对换的区别</strong></li></ol><p>覆盖是在同一个程序或进程中</p><p>交换是在不同进程（或作业）之间的</p><h2 id="分页存储管理方式" tabindex="-1">分页存储管理方式 <a class="header-anchor" href="#分页存储管理方式" aria-label="Permalink to &quot;分页存储管理方式&quot;">​</a></h2><p>对内存进行离散分配</p><h3 id="分页存储管理的基本方法" tabindex="-1">分页存储管理的基本方法 <a class="header-anchor" href="#分页存储管理的基本方法" aria-label="Permalink to &quot;分页存储管理的基本方法&quot;">​</a></h3><ol><li><p><strong>页面和物理块</strong></p><p>（1）页面</p><p>将进程的逻辑地址空间分成若干个页，并为各页加以编号，内存的物理地址空间分成若干块，在进程分配内存时，以块为单位，将进程中的若干页分别装入到多个可以不相邻的物理块中</p><p>页内碎片：由于进程的最后一页经常装不满一块，而形成了不可利用的碎片，称为页内碎片。</p><p>内存： 页框 = 页帧 = 内存块 = 物理块= 物理页面</p><p>进程：页 、页面</p></li></ol><p>进程的页面与内存的页框具有一一对应的关系</p><p>（2）页面大小</p><p>页面的大小应适当选择，太小，可以减少内存碎片，提高内存利用率，但会导致进程的页表过长，占用大量内存。太大，可以减少页表的长度，提高页面换入换出的速度，但会使页内碎片增大。通常为 2 的幂。</p><ol start="2"><li><p><strong>地址结构</strong></p><p><em>页号 P 位移量 W（页内地址）</em></p></li><li><p><strong>页表</strong></p><p>一进程对应一张页表，进程的每个页面对应一个页表项，每个页表项：页号+ 块号，记录着进程页面和实际存放的内存块之间的映射关系。</p><p>页号与物理块号的映射表</p><p>页表项至少占多少字节？</p></li></ol><p>页号 = 逻辑地址 / 页面大小</p><p>页内偏移量 = 逻辑地址 % 页面大小</p><p>物理地址 = 页面在内存中的起始地址 + 页内偏移量</p><ol start="4"><li><strong>地址变化机构</strong></li></ol><p>将用户地址空间中的逻辑地址转为内存空间中的物理地址</p><p>页内地址和物理地址是一一对应的，无需转换，所以地址变换机构的任务实际上只是将逻辑地址中页号变换为内存中的物理块号，可以借助页表来实现。</p><ul><li><p><em>基本的地址变换机构</em></p><p>页表寄存器：存放页表再内存的<strong>起始地址</strong>和<strong>页表的长度</strong></p><p>逻辑地址 -&gt; 物理地址：将逻辑地址中的页号取出，将页号与页表寄存器中的页表长度进行比较，检测是否越界，将页号*页表项长度 + 页表起始地址 = 该页表项在页表中的位置，读出页表项的数据，取物理块号，再拼接上页内地址，得到物理地址。</p><p>页表长度指的是这个页表总共有几个页表项，即共有几个页。</p><p>页表项长度指的是每个页表项占多大的存储空间</p><p>页面大小指的是一个页面占多大的存储空间</p><p>页式管理中地址是一维的，也就是说只用告诉 CPU 一个逻辑地址就可以得到物理地址</p><p><img src="'+n+'" alt="39"></p></li><li><p><em>具有快表的地址变换机构</em></p><p>由于页表是存放在内存中的，这使得 CPU 在每存取一次数据，都要访问两次内存。第一次，将逻辑地址转为物理地址。第二次，从第一次得到的地址中获取所需数据（或写入数据）。快表（TLB）就是为了解决这个问题，快表位于 CPU 中，用以存放当前访问的那些页表项（最近访问页表项的副本）</p><p><img src="'+h+'" alt="40"></p></li></ul><p><strong>有效访问时间</strong>：从进程发出指定逻辑地址的访问请求，经过地址变化，到在内存中找到对应的物理地址单元并取出数据，所需要花费的总时间。</p><h2 id="分段存储管理方式" tabindex="-1">分段存储管理方式 <a class="header-anchor" href="#分段存储管理方式" aria-label="Permalink to &quot;分段存储管理方式&quot;">​</a></h2><h3 id="分段存储管理方式的引入" tabindex="-1">分段存储管理方式的引入 <a class="header-anchor" href="#分段存储管理方式的引入" aria-label="Permalink to &quot;分段存储管理方式的引入&quot;">​</a></h3><ol><li><p><strong>方便编程</strong></p></li><li><p><strong>信息共享</strong></p></li><li><p><strong>信息保护</strong></p></li><li><p><strong>动态增长</strong></p></li><li><p><strong>动态链接</strong></p></li></ol><h3 id="分段系统的基本原理" tabindex="-1">分段系统的基本原理 <a class="header-anchor" href="#分段系统的基本原理" aria-label="Permalink to &quot;分段系统的基本原理&quot;">​</a></h3><ol><li><p><strong>分段</strong></p><p>作业的地址空间被划分为若干个段，每个段定义了一组逻辑信息。</p></li><li><p><strong>段表</strong></p><p><img src="'+g+'" alt="41"></p></li><li><p><strong>地址变化机构</strong></p><p>段表放在内存中，每访问一个数据，都须访问两次内存 <img src="'+c+'" alt="42"></p></li><li><p><strong>分页和分段的主要区别</strong></p><p>（1）页是信息的物理单位。</p><p>（2）页的大小固定且由系统决定。</p><p>（3）分页的用户程序地址空间是一维的。</p></li></ol><h3 id="段页式存储管理方式" tabindex="-1">段页式存储管理方式 <a class="header-anchor" href="#段页式存储管理方式" aria-label="Permalink to &quot;段页式存储管理方式&quot;">​</a></h3><p>结合分页系统和分段系统的优点</p><ol><li><p><strong>基本原理</strong></p><p>将用户程序进行分段，再把每个段分成若干页，并为每个段赋予一个段名。</p><p>地址结构 段号 段内页号 页内地址</p><p><img src="'+d+'" alt="42"></p></li><li><p><strong>地址变换过程</strong></p></li></ol><ul><li><p>从逻辑地址 A 中取出前几位为段号 S，后几位为段内偏移量</p></li><li><p>判断段号是否越界，若段号 S ≥ 段表长度 M，则产生越界中断，否则继续执行。</p></li><li><p>在段表中查询段号对应的段表项，段号 S 对应的段表项地址= 段表始址 F +段号 Sx 段 表项长度。取出段表项中该段的段长 C，若 W ≥ C，则产生越界中断，否则继续执行。</p></li><li><p>取出段表项中该段的始址 b，计算物理地址 E = b +W，用物理地址 E 去访存。</p><p><img src="'+E+'" alt="43"></p></li></ul><h2 id="虚拟存储区概述" tabindex="-1">虚拟存储区概述 <a class="header-anchor" href="#虚拟存储区概述" aria-label="Permalink to &quot;虚拟存储区概述&quot;">​</a></h2><p>从逻辑上实现对内存容量的扩充</p><h3 id="常规存储管理方式的特征和局部性原理" tabindex="-1">常规存储管理方式的特征和局部性原理 <a class="header-anchor" href="#常规存储管理方式的特征和局部性原理" aria-label="Permalink to &quot;常规存储管理方式的特征和局部性原理&quot;">​</a></h3><ol><li><p><strong>常规存储器管理方式的特征</strong></p><p>（1）一次性，指作业必须一次性地全部装入内存后方能开始运行。</p><p>（2）驻留性，装入之后，一直停留在内存中，任何部分都不会被换出，直到作业运行结束</p></li><li><p><strong>局部性原理</strong></p><p>在很短时间内，程序的执行仅限于某个部分。</p><p>（1）程序顺序执行，除开少数转移和过程调用指令</p><p>（2）过程调用</p><p>（3）程序中存在许多的循环结构</p><p>（4）对数数组的处理</p><p>（1）<strong>时间局部性</strong>：程序中的某条指令被执行，则不久以后该指令可能再次执行。（循环结构）</p><p>（2）<strong>空间局部性</strong>：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问到（程序的顺序执行、向量、数组、表等）</p></li><li><p><strong>虚拟存储器的基本工作情况</strong></p><p>由局部性原理可知，程序在执行的时候，没有必要全部装入内存，而是仅将那些当前需要运行的少数页面或段先装入内存便可执行，其余部分停留在盘上。如果访问的页或段不再内存中，便发出缺页中断，如果内存已满，通过页面置换算法，换入换出一些页面。</p></li></ol><h3 id="虚拟存储器的定义和特征" tabindex="-1">虚拟存储器的定义和特征 <a class="header-anchor" href="#虚拟存储器的定义和特征" aria-label="Permalink to &quot;虚拟存储器的定义和特征&quot;">​</a></h3><ol><li><p><strong>虚拟存储器的定义</strong></p><p>用户感觉到的内存容量比实际内存容量大得多</p><p>指具有<em>请求调入功能</em>和<em>置换功能</em>，能从逻辑上对内存容量进行扩充的一种存储器系统。</p></li><li><p><strong>虚拟存储器的特征</strong></p><p>（1）多次性。一个作业无需全部装入内存，而是分为多次调入，只将当前运行需要的那部分程序和数据装入内存即可开始运行。</p><p>（2）对换性。一个作业中的程序和数据无需一直常驻内存，允许在作业运行过程中进行对换。</p><p>（3）虚拟性。从逻辑上进行扩充内存容量，使用户看到的内存容量远大于实际内存容量。</p></li></ol><h3 id="虚拟存储器的实现方法" tabindex="-1">虚拟存储器的实现方法 <a class="header-anchor" href="#虚拟存储器的实现方法" aria-label="Permalink to &quot;虚拟存储器的实现方法&quot;">​</a></h3><p>虚拟内存的实现需要建立在<strong>离散分配</strong>的内存管理方式的基础上</p><ul><li><p>分页请求系统</p><p>在分页系统的基础上增加了请求调页功能和页面置换功能所形成的页式虚拟系统。</p></li><li><p>请求分段系统</p></li><li><p>请求段页式系统</p></li></ul><p>硬件支持：</p><ul><li><p>一定容量的内存和外存。</p></li><li><p>地址变换机构，</p></li><li><p>请求页表机制 页表项： 页号 物理块号 状态为 P 访问字段 A 修改为 M 外存地址</p><p>状态位：是否已调入内存</p><p>访问字段 A：用于记录在一段时间内被访问的次数（页面置换算法需要）</p><p>修改位 M：标识该页在调入内存之后是否被修改过。（写入写出时需要）</p><p>外存地址：用于指出该页在外存上的地址，通常是物理块号，（调入该页时需要）</p></li><li><p>缺页中断机构</p><p>缺页中断和一般中断的区别：</p><p>（1）在指令执行期间产生和处理中断信号。</p><p>（2）一条指令在执行期间可能产生多次缺页中断。</p></li><li><p>地址变换机构</p></li></ul><p>逻辑地址到物理地址的变换 <img src="'+m+'" alt="44"></p><h3 id="请求分页存储管理方式" tabindex="-1">请求分页存储管理方式 <a class="header-anchor" href="#请求分页存储管理方式" aria-label="Permalink to &quot;请求分页存储管理方式&quot;">​</a></h3><h4 id="请求分页中的硬件支持" tabindex="-1">请求分页中的硬件支持 <a class="header-anchor" href="#请求分页中的硬件支持" aria-label="Permalink to &quot;请求分页中的硬件支持&quot;">​</a></h4><h4 id="请求分页中的内存分配" tabindex="-1">请求分页中的内存分配 <a class="header-anchor" href="#请求分页中的内存分配" aria-label="Permalink to &quot;请求分页中的内存分配&quot;">​</a></h4><ol><li>最小物理块数的确定 指能保证进程正常执行所需的最小物理块数</li><li>内存分配策略 （1）固定分配局部置换 固定分配：为每个进程分配一组固定数目的物理块，在进程运行期间不再改变 局部置换：如果进程在运行过程中发现缺页，则只能从分配给该进程的 n 个页面中选出一页换出，然后再调入一页，以保证分配给该进程的内存空间不变。 （2）可变分配全局置换 可变分配：指先为每个进程分配一定数目的物理块，在运行期间，可根据情况适当的增加或减少。 全局置换：如果发现缺页，从<strong>空闲物理块中</strong>选出一块分配给该进程。 （3）可变分配局部置换 不存在固定分配全局置换</li><li>物理块分配算法 （1）平均分配算法。将系统中所有可供分配的物理块平均分配给各个进程 （2）按比例分配算法。根据进程的大小按比例分配物理块。 （3）考虑优先权的分配算法。</li></ol><h4 id="页面调入策略" tabindex="-1">页面调入策略 <a class="header-anchor" href="#页面调入策略" aria-label="Permalink to &quot;页面调入策略&quot;">​</a></h4><ol><li>何时调入页面 （1）预调页策略 （2）请求调页策略</li><li>从何处调入页面 外存：用于存放文件的文件区和用于存放对换页面的对换区</li><li>页面调入过程</li><li>缺页率 缺页率 = 访问页面失败的次数 / 访问页面总次数 缺页率受到以下几个因素的影响： （1）页面大小。 （2）进程所分配的物理块的数目。 （3）页面置换算法。 （4）程序固有特性。</li></ol><h2 id="页面置换算法" tabindex="-1">页面置换算法 <a class="header-anchor" href="#页面置换算法" aria-label="Permalink to &quot;页面置换算法&quot;">​</a></h2><p>抖动：即刚被换出的页又要被访问，需要将它重新调入，此时又需要再选一页调出；而此刚被调出的页很快又被访问，又需将它调入，如此频繁地更换页面，以致一个进程在运行中大部分时间都花费在页面置换工作上，称为该进程的抖动。</p><h4 id="最佳置换算法和先进先出置换算法" tabindex="-1">最佳置换算法和先进先出置换算法 <a class="header-anchor" href="#最佳置换算法和先进先出置换算法" aria-label="Permalink to &quot;最佳置换算法和先进先出置换算法&quot;">​</a></h4><ol><li>最佳置换算法（OPT） 其所选择的被淘汰的页面将是以后永不使用的，或许是在最长（未来）时间内不再被访问的页面。 发生缺页中断不一定发生页面置换</li><li>先进先出页面置换算法（FIFO） 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面予以淘汰。 队列 Belady 异常： 物理块数增加 缺页次数不减反增 （只有 FIFO 才会出现）</li></ol><h4 id="最近最久未使用-lru-和最少使用-lfu-置换算法" tabindex="-1">最近最久未使用（LRU）和最少使用（LFU）置换算法 <a class="header-anchor" href="#最近最久未使用-lru-和最少使用-lfu-置换算法" aria-label="Permalink to &quot;最近最久未使用（LRU）和最少使用（LFU）置换算法&quot;">​</a></h4><ol><li>LRU 置换算法 选出最近最久未使用的页面予以淘汰</li><li>LRU 置换算法的硬件支持 1）寄存器 2）栈 <img src="'+u+'" alt="45"></li><li>最少使用置换算法 选择在最近时期使用最少的页面作为淘汰页。需要继续访问该页的次数（采用移位寄存器）</li></ol><h4 id="clock-置换算法" tabindex="-1">Clock 置换算法 <a class="header-anchor" href="#clock-置换算法" aria-label="Permalink to &quot;Clock 置换算法&quot;">​</a></h4><ol><li>简单的 Clock 置换算法（最近未使用算法 NRU） 需为每页设置一位访问位，再将内存中的所有页面都通过链接指针链接成一个循环队列。 实现：当某页被访问时，其访问位被置 1。置换算法在选择一页淘汰时，只需要检查页的访问位。如果是 0，就选择该页换出；若为 1，则重新将它置 0，不换出，再按照 FIFO 算法检查下一个页面。当检查到队列中的最后一个页面时，若其访问位仍为 1，再返回队首检查第一个页面。</li><li>改进型 Clock 置换算法 考虑置换代价、访问代价 4 中类型的页面（A 访问位，M 修改为）： 1 类（A=0，M=0）:表示未访问过，未被修改过，最佳淘汰页 2 类（A=0，M=1）：表示该页未被访问，但已被修改，不是很好的淘汰页 3 类（A=1，M=0）：已被访问，未被修改，可能再次访问。 4 类（A=1，M=1）:已被访问且已被修改，可能再次访问。 算法执行过程： （1）从当前位置扫描循环队列，找到 A=0，M=0 淘汰。不改变访问位 （2）第一步失败，找到 A=0 M=1 的页面淘汰，并将所有扫描过的页面的访问位都置 0 （3）第二步失败，重复第一步，寻找 A=0 M=0 的页面，如果失败再执行第二步，此时一定能找到 A=0 M=1 的页面</li></ol><h4 id="页面缓冲算法-pba" tabindex="-1">页面缓冲算法（PBA） <a class="header-anchor" href="#页面缓冲算法-pba" aria-label="Permalink to &quot;页面缓冲算法（PBA）&quot;">​</a></h4><ol><li>影响页面换进换出效率的因素 （1）页面置换算法 （2）写回磁盘的频率 （3）读入内存的频率</li><li>页面缓冲算法 PBA （1）空闲页面链表 该链表是一个空闲物理块链表，是系统掌握的空闲物理块，用于分配给频繁发生缺页的进程，以降低该进程的缺页率。 （2）修改页面链表 已修改的页面形成的链表。为了减少已修改页面换出的次数</li></ol><h4 id="访问内存的有效时间" tabindex="-1">访问内存的有效时间 <a class="header-anchor" href="#访问内存的有效时间" aria-label="Permalink to &quot;访问内存的有效时间&quot;">​</a></h4><p>（1）被访问的页在内存中，对应的页表项在快表中 有效时间 = 查找快表的时间 + 实际访问物理地址的时间 （2）被访问页在内存中，不在快表中 需要访问两次内存，一次访问页表，一次读取数据，还需要更新快表 有效时间 = 查找快表时间 + 查找页表时间 + 修改快表时间 + 访问实际物理地址时间</p><p>（3）被访问页不在内存中 产生缺页中断， 有效访问时间 = 查找快表时间 + 查找页表时间 + 处理缺页中断时间 + 更新快表时间 + 更新页表时间 + 访问实际物理地址时间</p><p>若有快表的命中率和缺页率</p><h2 id="抖动-与工作集" tabindex="-1">“抖动”与工作集 <a class="header-anchor" href="#抖动-与工作集" aria-label="Permalink to &quot;“抖动”与工作集&quot;">​</a></h2><h4 id="多道程序度与-抖动" tabindex="-1">多道程序度与“抖动” <a class="header-anchor" href="#多道程序度与-抖动" aria-label="Permalink to &quot;多道程序度与“抖动”&quot;">​</a></h4><ol><li>多道程序度与处理机的利用率</li><li>产生抖动的原因 根本原因：同时在系统中的进程太多，由此分配给每一个进程的物理块太少，不能满足进程正常运行的基本要求，致使每个进程在运行时，频繁地出现缺页，必须请求系统将所缺之页调入内存。</li></ol><h4 id="工作集" tabindex="-1">工作集 <a class="header-anchor" href="#工作集" aria-label="Permalink to &quot;工作集&quot;">​</a></h4><ol><li>工作集的基本概念 进程发生缺页率的时间间隔与进程所获的物理块数有关。</li><li>工作集的定义 所谓工作集，是指在某段时间间隔 t 里，进程实际所要访问页面的集合。</li></ol><h4 id="抖动-的预防方法" tabindex="-1">“抖动”的预防方法 <a class="header-anchor" href="#抖动-的预防方法" aria-label="Permalink to &quot;“抖动”的预防方法&quot;">​</a></h4><ol><li>采取局部置换策略 只允许在分配给自己的内存空间内进行置换，不允许从其他进程去获得新的物理块。</li><li>把工作集算法融入到处理机调度中</li><li>利用“L=S”准测调节缺页率</li><li>选择暂停的进程</li></ol><h2 id="请求分段存储管理的方式" tabindex="-1">请求分段存储管理的方式 <a class="header-anchor" href="#请求分段存储管理的方式" aria-label="Permalink to &quot;请求分段存储管理的方式&quot;">​</a></h2><h4 id="请求分段中的硬件支持" tabindex="-1">请求分段中的硬件支持 <a class="header-anchor" href="#请求分段中的硬件支持" aria-label="Permalink to &quot;请求分段中的硬件支持&quot;">​</a></h4><ol><li>请求段表机制 <img src="'+A+'" alt="46"></li><li>缺段中断机构</li><li>地址变化机构</li></ol><h4 id="分段的共享与保护" tabindex="-1">分段的共享与保护 <a class="header-anchor" href="#分段的共享与保护" aria-label="Permalink to &quot;分段的共享与保护&quot;">​</a></h4>',126),q=[B];function _(P,f,k,x,C,F){return a(),l("div",null,q)}const U=p(b,[["render",_]]);export{L as __pageData,U as default};
