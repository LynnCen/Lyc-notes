import{_ as s,C as o,c as n,o as E,a8 as D,b as a,j as B,w as l,a as i,G as t,a9 as r}from"./chunks/framework.5lfeZbzV.js";const m=JSON.parse('{"title":"绪论","description":"","frontmatter":{},"headers":[],"relativePath":"softExam/架构师/01绪论.md","filePath":"softExam/架构师/01绪论.md","lastUpdated":1756137480000}'),f={name:"softExam/架构师/01绪论.md"};function d(p,A,u,h,C,g){const e=o("Mermaid");return E(),n("div",null,[A[5]||(A[5]=D('<h1 id="绪论" tabindex="-1">绪论 <a class="header-anchor" href="#绪论" aria-label="Permalink to &quot;绪论&quot;">​</a></h1><blockquote><p>目的：本章首先从架构定义、发展历程、典型架构和未来发展等方面概要说明，给读者建立一个架构的整体概念；然后对系统架构设计师的定义、职责、范围和工作内容等进行讲解，并说明了对于一名合格的系统架构设计师的要求。</p></blockquote><h2 id="_1-1-系统架构概述" tabindex="-1">1.1 系统架构概述 <a class="header-anchor" href="#_1-1-系统架构概述" aria-label="Permalink to &quot;1.1 系统架构概述&quot;">​</a></h2><p>发展历史：冯诺依曼计算机</p><p>系统架构是什么：**系统架构(System Architecture)**是系统的一种整体的高层次的结构表示，是系统的骨架和根基，也决定了系统的健壮性和生命周期的长短。</p><p>系统架构设计师是什么：</p><ul><li>系统架构设计师是承担系统架构设计的核心角色，他不仅是连接用户需求和系统进一步设计与实现的桥梁，也是系统开发早期阶段质量保证的关键角色。</li><li>他要确认和评估系统需求，给出开发规范，搭建系统实现的核心构架，并澄清技术细节、扫清主要难点的技术人员；他要掌握技术团队的能力需要，给出项目管理方法，采用合适生命周期模型，具备以自身为核心形成团队的能力，并在项目进度计划和经费分配等方面开展评估，以预防项目风险。</li></ul><h3 id="_1-1-1-系统架构的定义及发展历程" tabindex="-1">1.1.1 系统架构的定义及发展历程 <a class="header-anchor" href="#_1-1-1-系统架构的定义及发展历程" aria-label="Permalink to &quot;1.1.1 系统架构的定义及发展历程&quot;">​</a></h3><h4 id="_1-系统架构的定义" tabindex="-1">1. 系统架构的定义 <a class="header-anchor" href="#_1-系统架构的定义" aria-label="Permalink to &quot;1. 系统架构的定义&quot;">​</a></h4><p>定义：系统架构 (System Architecture) 是系统的一种整体的高层次的结构表示，是系统的骨架和根基，支撑和链接各个部分，包括组件、连接件、约束规范以及指导这些内容设计与演化的原理，它是刻画系统整体抽象结构的一种手段。</p><h4 id="_2-发展历程" tabindex="-1">2. 发展历程 <a class="header-anchor" href="#_2-发展历程" aria-label="Permalink to &quot;2. 发展历程&quot;">​</a></h4><ol><li><strong>基础研究阶段</strong></li></ol><p>模块化开发方法原则：</p><p>(1) 最高模块内聚。也就是在一个模块内部的元素最大限度地关联，只实现一种功能的模块是高内聚的，具有三种以上功能的模块则是低内聚的。</p><p>(2) 最低耦合。也就是不同模块之间的关系尽可能弱，以利于软件的升级和扩展。</p><p>(3) 模块大小适度。颗粒过大会造成模块内部维护困难，而颗粒过小又会导致模块间的耦合增加。</p><p>(4) 模块调用链的深度(嵌套层次)不可过多。</p><p>(5) 接口简单、精炼(扇入扇出数不宜太大),具有信息隐蔽能力。</p><p>(6) 尽可能地复用已有模块。</p><ol start="2"><li><strong>概念体系和核心技术形成阶段(1999—2000年)</strong></li></ol><p>逐步形成软件架构的形式化标准、软件组件化</p><ol start="3"><li><strong>理论体系完善与发展阶段(1996年至今)</strong></li></ol><p>深入研究组件软件架构：软件架构描述与表示、软件架构分析、设计与测试、软件架构发现、演化与重用、给予软件架构开发方法、软件架构风格、动态软件架构；</p><ol start="4"><li><strong>普及应用阶段（2000年至今）</strong></li></ol><h3 id="_1-1-2-软件架构的常用分类及建模方法" tabindex="-1">1.1.2 软件架构的常用分类及建模方法 <a class="header-anchor" href="#_1-1-2-软件架构的常用分类及建模方法" aria-label="Permalink to &quot;1.1.2 软件架构的常用分类及建模方法&quot;">​</a></h3><h4 id="_1-软件架构的常用分类" tabindex="-1">1.软件架构的常用分类 <a class="header-anchor" href="#_1-软件架构的常用分类" aria-label="Permalink to &quot;1.软件架构的常用分类&quot;">​</a></h4><p>典型的架构：分层架构、事件驱动架构、微核架构、微服务架构和云架构（还存在C/S架构、B/S架构、管道-过滤器架构和PAC架构）</p><ol><li><strong>分层架构</strong></li></ol><p>分层架构 (Layered Architecture) 是最常见的软件架构，也是事实上的标准架构。这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口进行通信。分层架构通常明确约定软件一定要分成多少层，但是，最常见的是四层结构，</p><ul><li>表现层：用户页面、负责视觉和用户互动</li><li>业务层：实现业务逻辑</li><li>持久层：提供数据，SQL语句就在这一层</li><li>数据层：保存数据</li></ul>',30)),(E(),a(r,null,{default:l(()=>[t(e,{id:"mermaid-140",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22%E8%A1%A8%E7%8E%B0%E5%B1%82%22%0A%20%20%20%20%20%20%20%20A1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20A2%5B%E7%BB%84%E4%BB%B62%5D%20%0A%20%20%20%20%20%20%20%20A3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E4%B8%9A%E5%8A%A1%E5%B1%82%22%0A%20%20%20%20%20%20%20%20B1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20B2%5B%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20B3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%8C%81%E4%B9%85%E5%B1%82%22%0A%20%20%20%20%20%20%20%20C1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20C2%5B%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20C3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%95%B0%E6%8D%AE%E5%BA%93%22%0A%20%20%20%20%20%20%20%20D1%5B(%E6%95%B0%E6%8D%AE%E5%BA%931)%5D%0A%20%20%20%20%20%20%20%20D2%5B(%E6%95%B0%E6%8D%AE%E5%BA%932)%5D%0A%20%20%20%20%20%20%20%20D3%5B(%E6%95%B0%E6%8D%AE%E5%BA%933)%5D%0A%20%20%20%20%20%20%20%20D4%5B(%E6%95%B0%E6%8D%AE%E5%BA%934)%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A1%20--%3E%20B1%0A%20%20%20%20A2%20--%3E%20B2%0A%20%20%20%20A3%20--%3E%20B3%0A%20%20%20%20%0A%20%20%20%20B1%20--%3E%20C1%0A%20%20%20%20B2%20--%3E%20C2%0A%20%20%20%20B3%20--%3E%20C3%0A%20%20%20%20%0A%20%20%20%20C1%20--%3E%20D1%0A%20%20%20%20C2%20--%3E%20D2%0A%20%20%20%20C3%20--%3E%20D3%0A%20%20%20%20C3%20--%3E%20D4%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%23e3f2fd%0A%20%20%20%20style%20A2%20fill%3A%23e3f2fd%0A%20%20%20%20style%20A3%20fill%3A%23e3f2fd%0A%20%20%20%20style%20B1%20fill%3A%23f1f8e9%0A%20%20%20%20style%20B2%20fill%3A%23f1f8e9%0A%20%20%20%20style%20B3%20fill%3A%23f1f8e9%0A%20%20%20%20style%20C1%20fill%3A%23fff3e0%0A%20%20%20%20style%20C2%20fill%3A%23fff3e0%0A%20%20%20%20style%20C3%20fill%3A%23fff3e0%0A"})]),fallback:l(()=>[...A[0]||(A[0]=[i(" Loading... ",-1)])]),_:1})),A[6]||(A[6]=B("ol",{start:"2"},[B("li",null,[B("strong",null,"事件驱动架构")])],-1)),A[7]||(A[7]=B("p",null,"事件 (Event) 是状态发生变化时软件发出的通知。事件驱动架构 (Event-driven Architecture)是通过事件进行通信的软件架构，它分成四个部分。",-1)),A[8]||(A[8]=B("p",null,"● 事件队列 (Event Queue): 接收事件的入口； ● 分发器 (Event Mediator): 将不同的事件分发到不同的业务逻辑单元； ● 事件通道 (Event Channel): 分发器与处理器之间的联系渠道； ● 事件处理器 (Event Processor): 实现业务逻辑，处理完成后会发出事件，触发下一步操作。",-1)),(E(),a(r,null,{default:l(()=>[t(e,{id:"mermaid-154",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E4%BA%8B%E4%BB%B6%5D%20--%3E%20B%5B%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97%5D%0A%20%20%20%20B%20--%3E%20C%5B%E5%88%86%E5%8F%91%E5%99%A8%5D%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20D1%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%931%5D%0A%20%20%20%20C%20--%3E%20D2%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%932%5D%20%0A%20%20%20%20C%20--%3E%20D3%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%933%5D%0A%20%20%20%20%0A%20%20%20%20D1%20--%3E%20E1%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A81%5D%0A%20%20%20%20D2%20--%3E%20E2%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A82%5D%0A%20%20%20%20D3%20--%3E%20E3%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A83%5D%0A%20%20%20%20%0A%20%20%20%20E1%20--%3E%20F1%5B%E6%A8%A1%E5%9D%97%E7%BB%841%5D%0A%20%20%20%20E2%20--%3E%20F2%5B%E6%A8%A1%E5%9D%97%E7%BB%842%5D%0A%20%20%20%20E3%20--%3E%20F3%5B%E6%A8%A1%E5%9D%97%E7%BB%843%5D%0A%20%20%20%20%0A%20%20%20%20subgraph%20F1%20%5B%E6%A8%A1%E5%9D%97%E7%BB%841%5D%0A%20%20%20%20%20%20%20%20G1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20G2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20G3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20G4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20F2%20%5B%E6%A8%A1%E5%9D%97%E7%BB%842%5D%0A%20%20%20%20%20%20%20%20H1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20H2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20H3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20H4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20F3%20%5B%E6%A8%A1%E5%9D%97%E7%BB%843%5D%0A%20%20%20%20%20%20%20%20I1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20I2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20I3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20I4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%234fc3f7%0A%20%20%20%20style%20B%20fill%3A%234fc3f7%0A%20%20%20%20style%20C%20fill%3A%23e8f5e8%0A%20%20%20%20style%20D1%20fill%3A%234fc3f7%0A%20%20%20%20style%20D2%20fill%3A%234fc3f7%0A%20%20%20%20style%20D3%20fill%3A%234fc3f7%0A%20%20%20%20style%20E1%20fill%3A%23e8f5e8%0A%20%20%20%20style%20E2%20fill%3A%23e8f5e8%0A%20%20%20%20style%20E3%20fill%3A%23e8f5e8%0A"})]),fallback:l(()=>[...A[1]||(A[1]=[i(" Loading... ",-1)])]),_:1})),A[9]||(A[9]=B("ol",{start:"3"},[B("li",null,[B("strong",null,"微核架构")])],-1)),A[10]||(A[10]=B("p",null,"微核架构 (Microkernel Architecture) 又称为插件架构(Plug-in Architecture), 是指软件的内核相对较小，主要功能和业务逻辑都通过插件实现。",-1)),A[11]||(A[11]=B("p",null,"内核 (Core) 通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。",-1)),(E(),a(r,null,{default:l(()=>[t(e,{id:"mermaid-168",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A1%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B61%5D%20--%3E%20B%5B%E5%86%85%E6%A0%B8%E7%B3%BB%E7%BB%9F%5D%0A%20%20%20%20A2%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B62%5D%20--%3E%20B%0A%20%20%20%20A3%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B63%5D%20--%3E%20B%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20C1%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20B%20--%3E%20C2%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20B%20--%3E%20C3%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%234fc3f7%0A%20%20%20%20style%20A2%20fill%3A%234fc3f7%0A%20%20%20%20style%20A3%20fill%3A%234fc3f7%0A%20%20%20%20style%20B%20fill%3A%23f5f5f5%0A%20%20%20%20style%20C1%20fill%3A%234fc3f7%0A%20%20%20%20style%20C2%20fill%3A%234fc3f7%0A%20%20%20%20style%20C3%20fill%3A%234fc3f7%0A"})]),fallback:l(()=>[...A[2]||(A[2]=[i(" Loading... ",-1)])]),_:1})),A[12]||(A[12]=B("ol",{start:"4"},[B("li",null,[B("strong",null,"微服务架构")])],-1)),A[13]||(A[13]=B("p",null,"微服务架构 (Microservices Architecture) 是服务导向架构(Service-Oriented Architecture,SOA)的升级。每一个服务就是一个独立的部署单元 (Separately Deployed Unit)。 这些单元都是分布式的，互相解耦，通过远程通信协议(比如 REST、SOAP)联系.",-1)),A[14]||(A[14]=B("p",null,"微服务架构分成三种实现模式：",-1)),A[15]||(A[15]=B("p",null,"● RESTfulAPI模式：服务通过API提供，云服务就属于这一类；",-1)),A[16]||(A[16]=B("p",null,"● RESTful应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部；",-1)),A[17]||(A[17]=B("p",null,"● 集中消息模式：采用消息代理 (Message Broker) 可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群。",-1)),(E(),a(r,null,{default:l(()=>[t(e,{id:"mermaid-191",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A1%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%821%5D%20--%3E%20B%5B%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3%E5%B1%82%5D%0A%20%20%20%20A2%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%822%5D%20--%3E%20B%0A%20%20%20%20A3%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%823%5D%20--%3E%20B%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20C1%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20B%20--%3E%20C2%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20B%20--%3E%20C3%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%0A%20%20%20%20subgraph%20C1%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20D1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20D2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20D3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20D4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20C2%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20E1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20E2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20C3%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20F1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20F2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20F3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%23f5f5f5%0A%20%20%20%20style%20A2%20fill%3A%23f5f5f5%0A%20%20%20%20style%20A3%20fill%3A%23f5f5f5%0A%20%20%20%20style%20B%20fill%3A%234fc3f7%0A%20%20%20%20style%20C1%20fill%3A%23e8f5e8%0A%20%20%20%20style%20C2%20fill%3A%23e8f5e8%0A%20%20%20%20style%20C3%20fill%3A%23e8f5e8%0A"})]),fallback:l(()=>[...A[3]||(A[3]=[i(" Loading... ",-1)])]),_:1})),A[18]||(A[18]=D('<ol start="4"><li><strong>云架构</strong></li></ol><p>云架构 (Cloud Architecture) 主要解决<strong>扩展性</strong>和<strong>并发</strong>的问题，是最容易扩展的架构。</p><p>它的高扩展性体现在将数据都复制到内存中，变成可复制的内存数据单元，然后将业务处理能力封装成一个个处理单元 (Processing Unit)。 若访问量增加，就新建处理单元；若访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，需要进行数据持久化。</p><p>云架构主要分成两部分：处理单元 (ProcessingUnit) 和虚拟中间件(Virtualized Middleware)。</p><p>处理单元：实现业务逻辑。</p><p>虚拟中间件：负责通信、保持会话控制、数据复制、分布式处理和处理单元的部署</p>',6)),(E(),a(r,null,{default:l(()=>[t(e,{id:"mermaid-214",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20subgraph%20PU1%20%5B%22Processing%20Unit%201%22%5D%0A%20%20%20%20%20%20%20%20A1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20A2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20A3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20A4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20A5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20PU2%20%5B%22Processing%20Unit%202%22%5D%0A%20%20%20%20%20%20%20%20B1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20B2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20B3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20B4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20B5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20PU3%20%5B%22Processing%20Unit%203%22%5D%0A%20%20%20%20%20%20%20%20C1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20C2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20C3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20C4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20C5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20PU1%20--%3E%20VM%0A%20%20%20%20PU2%20--%3E%20VM%0A%20%20%20%20PU3%20--%3E%20VM%0A%20%20%20%20%0A%20%20%20%20subgraph%20VM%20%5B%22Virtualized%20Middleware%22%5D%0A%20%20%20%20%20%20%20%20D1%5BMessaging%20Grid%5D%0A%20%20%20%20%20%20%20%20D2%5BData%20Grid%5D%0A%20%20%20%20%20%20%20%20D3%5BProcessing%20Grid%5D%0A%20%20%20%20%20%20%20%20D4%5BDeployment%20Manager%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20PU1%20fill%3A%23e3f2fd%0A%20%20%20%20style%20PU2%20fill%3A%23e3f2fd%0A%20%20%20%20style%20PU3%20fill%3A%23e3f2fd%0A%20%20%20%20style%20VM%20fill%3A%23f1f8e9%0A"})]),fallback:l(()=>[...A[4]||(A[4]=[i(" Loading... ",-1)])]),_:1})),A[19]||(A[19]=D('<h4 id="_2-系统架构的常用建模方法" tabindex="-1">2. 系统架构的常用建模方法 <a class="header-anchor" href="#_2-系统架构的常用建模方法" aria-label="Permalink to &quot;2. 系统架构的常用建模方法&quot;">​</a></h4><p>将软件架构的模型分成4种：结构模型、框架模型、动态模型和过程模型。</p><p>● 结构模型：这是一个最直观、最普遍的建模方法。此方法以架构的构件、连接件和其他概念来刻画结构。并力图通过结构来反映系统的重要语义内容，包括系统的配置、约 束、隐含的假设条件、风格和性质。研究结构模型的核心是架构描述语言。</p><p>● 框架模型：框架模型与结构模型类似，但它不太侧重描述结构的细节，而更侧重整体的结构。框架模型主要以一些特殊的问题为目标建立只针对和适应问题的结构。</p><p>● 动态模型：动态模型是对结构或框架模型的补充，主要研究系统的“大颗粒”行为的性质。例如，描述系统的重新配置或演化。这里的动态可以是指系统总体结构的配置、建 立或拆除通信或计算的过程，这类系统模型常是激励型的。</p><p>● 过程模型：过程模型是研究构造系统的步骤和过程，其结构是遵循某些过程脚本的结果。</p><h3 id="_1-1-3-软件架构的应用场景" tabindex="-1">1.1.3 软件架构的应用场景 <a class="header-anchor" href="#_1-1-3-软件架构的应用场景" aria-label="Permalink to &quot;1.1.3 软件架构的应用场景&quot;">​</a></h3><h3 id="_1-1-4-软件架构的发展未来" tabindex="-1">1.1.4 软件架构的发展未来 <a class="header-anchor" href="#_1-1-4-软件架构的发展未来" aria-label="Permalink to &quot;1.1.4 软件架构的发展未来&quot;">​</a></h3><h2 id="_1-2-架构设计师概述" tabindex="-1">1.2 架构设计师概述 <a class="header-anchor" href="#_1-2-架构设计师概述" aria-label="Permalink to &quot;1.2 架构设计师概述&quot;">​</a></h2><p>从组织上划分：</p><ul><li>业务架构师</li><li>主题领域架构师</li><li>技术架构师</li><li>项目架构师</li><li>系统架构师</li></ul><p>关注领域划分：</p><ul><li>企业架构师</li><li>基础结构架构师</li><li>特定技术架构师</li><li>解决方案架构师</li></ul><h3 id="_1-1-1-架构设计师的定义、职责和任务" tabindex="-1">1.1.1 架构设计师的定义、职责和任务 <a class="header-anchor" href="#_1-1-1-架构设计师的定义、职责和任务" aria-label="Permalink to &quot;1.1.1 架构设计师的定义、职责和任务&quot;">​</a></h3><ol><li>架构设计师的定义</li></ol><p>执行架构设计，生成架构。</p><ol start="2"><li>架构设计师的职责</li></ol><p>主要职责：技术领导（技能+领导能力）。</p><ol start="3"><li>架构设计师的任务与组成</li></ol><p>(1)领导与协调整个项目中的技术活动(分析、设计和实施等)。</p><p>(2)推动主要的技术决策并最终表达为系统架构。</p><p>(3)确定系统架构，并促使其架构设计的文档化，这里的文档化应包括需求、设计、实施和部署等“视图”。</p><h3 id="_1-2-2-架构设计师应具备的专业素质" tabindex="-1">1.2.2 架构设计师应具备的专业素质 <a class="header-anchor" href="#_1-2-2-架构设计师应具备的专业素质" aria-label="Permalink to &quot;1.2.2 架构设计师应具备的专业素质&quot;">​</a></h3><ol><li>掌握业务领域的知识</li><li>掌握技术知识</li><li>掌握设计技能</li><li>具备编程技能</li><li>具备沟通能力</li><li>具备决策能力</li><li>知道组织策略</li><li>应是谈判专家</li></ol><h3 id="_1-2-3-架构设计师的知识结构" tabindex="-1">1.2.3 架构设计师的知识结构 <a class="header-anchor" href="#_1-2-3-架构设计师的知识结构" aria-label="Permalink to &quot;1.2.3 架构设计师的知识结构&quot;">​</a></h3><p>(1)战略规划能力。 (2)业务流程建模能力。 (3)信息数据架构能力。 (4)技术架构设计和实现能力。 (5)应用系统架构的解决和实现能力。 (6)基础 IT 知识及基础设施、资源调配的能力。 (7)信息安全技术支持与管理保障能力。 (8)IT 审计、治理与基本需求的分析和获取能力。 (9)面向软件系统可靠性与系统生命周期的质量保障服务能力。 (10)对新技术与新概念的理解、掌握和分析能力。</p><h2 id="_1-3-如何成为一名好的系统架构设计师" tabindex="-1">1.3 如何成为一名好的系统架构设计师 <a class="header-anchor" href="#_1-3-如何成为一名好的系统架构设计师" aria-label="Permalink to &quot;1.3 如何成为一名好的系统架构设计师&quot;">​</a></h2><h3 id="_1-3-1-如何衡量一名优秀架构设计师" tabindex="-1">1.3.1 如何衡量一名优秀架构设计师 <a class="header-anchor" href="#_1-3-1-如何衡量一名优秀架构设计师" aria-label="Permalink to &quot;1.3.1 如何衡量一名优秀架构设计师&quot;">​</a></h3><ul><li>领导者</li><li>开发者</li><li>系统综合者</li><li>具备企业家思维</li><li>具备战略结束专家的权衡思维与战术思维</li><li>具备良好的沟通能力</li></ul><h3 id="_1-3-2-从工程师到系统架构设计师的演化" tabindex="-1">1.3.2 从工程师到系统架构设计师的演化 <a class="header-anchor" href="#_1-3-2-从工程师到系统架构设计师的演化" aria-label="Permalink to &quot;1.3.2 从工程师到系统架构设计师的演化&quot;">​</a></h3>',30))])}const _=s(f,[["render",d]]);export{m as __pageData,_ as default};
