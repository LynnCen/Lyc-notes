import{_ as a,c as r,o,a8 as t}from"./chunks/framework.B1-gFi6y.js";const d=JSON.parse('{"title":"基于lerna+dumi搭建多包管理实践","description":"","frontmatter":{},"headers":[],"relativePath":"project/lerna_monorepo.md","filePath":"project/lerna_monorepo.md","lastUpdated":1737705639000}'),n={name:"project/lerna_monorepo.md"};function l(i,e,p,c,s,m){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="基于lerna-dumi搭建多包管理实践" tabindex="-1">基于lerna+dumi搭建多包管理实践 <a class="header-anchor" href="#基于lerna-dumi搭建多包管理实践" aria-label="Permalink to &quot;基于lerna+dumi搭建多包管理实践&quot;">​</a></h1><blockquote><p><a href="https://github.com/MrXujiang/best-cps/tree/main" target="_blank" rel="noreferrer">https://github.com/MrXujiang/best-cps/tree/main</a></p></blockquote><h2 id="lerna是什么" tabindex="-1">Lerna是什么？ <a class="header-anchor" href="#lerna是什么" aria-label="Permalink to &quot;Lerna是什么？&quot;">​</a></h2><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><blockquote><p>在开发大型项目时, 我们通常会遇到同一工程依赖不同组件包, 同时不同的组件包之间还会相互依赖的问题, 那么如何管理组织这些依赖包就是一个迫在眉睫的问题.</p></blockquote><p>现有方案：Multirepo（多仓库独立管理）和Monorepo（单一仓库统一管理）；</p><p>Monorepo 模式下, 我们需要将所有组件包放在同一个仓库中, 并且需要通过脚本来管理组件包的版本, 避免组件包之间的依赖冲突.它可以方便的管理具有多个包的 JavaScript 项目。同时对于组件包的开发者和维护者, 为了让团队其他成员更好的理解和使用我们开发的组件, 搭建组件文档和 demo 就显得格外重要.</p><p>总结：</p><ul><li>大型项目统一管理包版本和依赖</li><li>能够高效低成本搭建组件文档</li><li>配置统一的eslint和代码提交规范</li></ul><h2 id="lerna的作用" tabindex="-1">Lerna的作用 <a class="header-anchor" href="#lerna的作用" aria-label="Permalink to &quot;Lerna的作用&quot;">​</a></h2><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/165f9e765a7547c2bfb7304c42cbb033~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp">',11)]))}const h=a(n,[["render",l]]);export{d as __pageData,h as default};
