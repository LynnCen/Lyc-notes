import{_ as s,C as a,c as f,o as l,a8 as n,b as D,j as B,w as E,a as e,G as r,a9 as i}from"./chunks/framework.CrIyVKdD.js";const b=JSON.parse('{"title":"绪论","description":"","frontmatter":{},"headers":[],"relativePath":"softExam/架构师/01绪论.md","filePath":"softExam/架构师/01绪论.md","lastUpdated":1755875989000}'),o={name:"softExam/架构师/01绪论.md"};function d(u,A,p,C,g,m){const t=a("Mermaid");return l(),f("div",null,[A[5]||(A[5]=n("",30)),(l(),D(i,null,{default:E(()=>[r(t,{id:"mermaid-140",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22%E8%A1%A8%E7%8E%B0%E5%B1%82%22%0A%20%20%20%20%20%20%20%20A1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20A2%5B%E7%BB%84%E4%BB%B62%5D%20%0A%20%20%20%20%20%20%20%20A3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E4%B8%9A%E5%8A%A1%E5%B1%82%22%0A%20%20%20%20%20%20%20%20B1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20B2%5B%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20B3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%8C%81%E4%B9%85%E5%B1%82%22%0A%20%20%20%20%20%20%20%20C1%5B%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20C2%5B%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20C3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%95%B0%E6%8D%AE%E5%BA%93%22%0A%20%20%20%20%20%20%20%20D1%5B(%E6%95%B0%E6%8D%AE%E5%BA%931)%5D%0A%20%20%20%20%20%20%20%20D2%5B(%E6%95%B0%E6%8D%AE%E5%BA%932)%5D%0A%20%20%20%20%20%20%20%20D3%5B(%E6%95%B0%E6%8D%AE%E5%BA%933)%5D%0A%20%20%20%20%20%20%20%20D4%5B(%E6%95%B0%E6%8D%AE%E5%BA%934)%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A1%20--%3E%20B1%0A%20%20%20%20A2%20--%3E%20B2%0A%20%20%20%20A3%20--%3E%20B3%0A%20%20%20%20%0A%20%20%20%20B1%20--%3E%20C1%0A%20%20%20%20B2%20--%3E%20C2%0A%20%20%20%20B3%20--%3E%20C3%0A%20%20%20%20%0A%20%20%20%20C1%20--%3E%20D1%0A%20%20%20%20C2%20--%3E%20D2%0A%20%20%20%20C3%20--%3E%20D3%0A%20%20%20%20C3%20--%3E%20D4%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%23e3f2fd%0A%20%20%20%20style%20A2%20fill%3A%23e3f2fd%0A%20%20%20%20style%20A3%20fill%3A%23e3f2fd%0A%20%20%20%20style%20B1%20fill%3A%23f1f8e9%0A%20%20%20%20style%20B2%20fill%3A%23f1f8e9%0A%20%20%20%20style%20B3%20fill%3A%23f1f8e9%0A%20%20%20%20style%20C1%20fill%3A%23fff3e0%0A%20%20%20%20style%20C2%20fill%3A%23fff3e0%0A%20%20%20%20style%20C3%20fill%3A%23fff3e0%0A"})]),fallback:E(()=>[...A[0]||(A[0]=[e(" Loading... ",-1)])]),_:1})),A[6]||(A[6]=B("ol",{start:"2"},[B("li",null,[B("strong",null,"事件驱动架构")])],-1)),A[7]||(A[7]=B("p",null,"事件 (Event) 是状态发生变化时软件发出的通知。事件驱动架构 (Event-driven Architecture)是通过事件进行通信的软件架构，它分成四个部分。",-1)),A[8]||(A[8]=B("p",null,"● 事件队列 (Event Queue): 接收事件的入口； ● 分发器 (Event Mediator): 将不同的事件分发到不同的业务逻辑单元； ● 事件通道 (Event Channel): 分发器与处理器之间的联系渠道； ● 事件处理器 (Event Processor): 实现业务逻辑，处理完成后会发出事件，触发下一步操作。",-1)),(l(),D(i,null,{default:E(()=>[r(t,{id:"mermaid-154",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E4%BA%8B%E4%BB%B6%5D%20--%3E%20B%5B%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97%5D%0A%20%20%20%20B%20--%3E%20C%5B%E5%88%86%E5%8F%91%E5%99%A8%5D%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20D1%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%931%5D%0A%20%20%20%20C%20--%3E%20D2%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%932%5D%20%0A%20%20%20%20C%20--%3E%20D3%5B%E4%BA%8B%E4%BB%B6%E9%80%9A%E9%81%933%5D%0A%20%20%20%20%0A%20%20%20%20D1%20--%3E%20E1%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A81%5D%0A%20%20%20%20D2%20--%3E%20E2%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A82%5D%0A%20%20%20%20D3%20--%3E%20E3%5B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A83%5D%0A%20%20%20%20%0A%20%20%20%20E1%20--%3E%20F1%5B%E6%A8%A1%E5%9D%97%E7%BB%841%5D%0A%20%20%20%20E2%20--%3E%20F2%5B%E6%A8%A1%E5%9D%97%E7%BB%842%5D%0A%20%20%20%20E3%20--%3E%20F3%5B%E6%A8%A1%E5%9D%97%E7%BB%843%5D%0A%20%20%20%20%0A%20%20%20%20subgraph%20F1%20%5B%E6%A8%A1%E5%9D%97%E7%BB%841%5D%0A%20%20%20%20%20%20%20%20G1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20G2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20G3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20G4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20F2%20%5B%E6%A8%A1%E5%9D%97%E7%BB%842%5D%0A%20%20%20%20%20%20%20%20H1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20H2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20H3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20H4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20F3%20%5B%E6%A8%A1%E5%9D%97%E7%BB%843%5D%0A%20%20%20%20%20%20%20%20I1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20I2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20I3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20I4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%234fc3f7%0A%20%20%20%20style%20B%20fill%3A%234fc3f7%0A%20%20%20%20style%20C%20fill%3A%23e8f5e8%0A%20%20%20%20style%20D1%20fill%3A%234fc3f7%0A%20%20%20%20style%20D2%20fill%3A%234fc3f7%0A%20%20%20%20style%20D3%20fill%3A%234fc3f7%0A%20%20%20%20style%20E1%20fill%3A%23e8f5e8%0A%20%20%20%20style%20E2%20fill%3A%23e8f5e8%0A%20%20%20%20style%20E3%20fill%3A%23e8f5e8%0A"})]),fallback:E(()=>[...A[1]||(A[1]=[e(" Loading... ",-1)])]),_:1})),A[9]||(A[9]=B("ol",{start:"3"},[B("li",null,[B("strong",null,"微核架构")])],-1)),A[10]||(A[10]=B("p",null,"微核架构 (Microkernel Architecture) 又称为插件架构(Plug-in Architecture), 是指软件的内核相对较小，主要功能和业务逻辑都通过插件实现。",-1)),A[11]||(A[11]=B("p",null,"内核 (Core) 通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信应该减少到最低，避免出现互相依赖的问题。",-1)),(l(),D(i,null,{default:E(()=>[r(t,{id:"mermaid-168",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A1%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B61%5D%20--%3E%20B%5B%E5%86%85%E6%A0%B8%E7%B3%BB%E7%BB%9F%5D%0A%20%20%20%20A2%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B62%5D%20--%3E%20B%0A%20%20%20%20A3%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B63%5D%20--%3E%20B%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20C1%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20B%20--%3E%20C2%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20B%20--%3E%20C3%5B%E5%8D%B3%E6%8F%92%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%234fc3f7%0A%20%20%20%20style%20A2%20fill%3A%234fc3f7%0A%20%20%20%20style%20A3%20fill%3A%234fc3f7%0A%20%20%20%20style%20B%20fill%3A%23f5f5f5%0A%20%20%20%20style%20C1%20fill%3A%234fc3f7%0A%20%20%20%20style%20C2%20fill%3A%234fc3f7%0A%20%20%20%20style%20C3%20fill%3A%234fc3f7%0A"})]),fallback:E(()=>[...A[2]||(A[2]=[e(" Loading... ",-1)])]),_:1})),A[12]||(A[12]=B("ol",{start:"4"},[B("li",null,[B("strong",null,"微服务架构")])],-1)),A[13]||(A[13]=B("p",null,"微服务架构 (Microservices Architecture) 是服务导向架构(Service-Oriented Architecture,SOA)的升级。每一个服务就是一个独立的部署单元 (Separately Deployed Unit)。 这些单元都是分布式的，互相解耦，通过远程通信协议(比如 REST、SOAP)联系.",-1)),A[14]||(A[14]=B("p",null,"微服务架构分成三种实现模式：",-1)),A[15]||(A[15]=B("p",null,"● RESTfulAPI模式：服务通过API提供，云服务就属于这一类；",-1)),A[16]||(A[16]=B("p",null,"● RESTful应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部；",-1)),A[17]||(A[17]=B("p",null,"● 集中消息模式：采用消息代理 (Message Broker) 可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群。",-1)),(l(),D(i,null,{default:E(()=>[r(t,{id:"mermaid-191",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A1%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%821%5D%20--%3E%20B%5B%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3%E5%B1%82%5D%0A%20%20%20%20A2%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%822%5D%20--%3E%20B%0A%20%20%20%20A3%5B%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%823%5D%20--%3E%20B%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20C1%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20B%20--%3E%20C2%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20B%20--%3E%20C3%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%0A%20%20%20%20subgraph%20C1%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B61%5D%0A%20%20%20%20%20%20%20%20D1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20D2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20D3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20%20%20%20%20D4%5B%E6%A8%A1%E5%9D%97D%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20C2%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B62%5D%0A%20%20%20%20%20%20%20%20E1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20E2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20C3%20%5B%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20F1%5B%E6%A8%A1%E5%9D%97A%5D%0A%20%20%20%20%20%20%20%20F2%5B%E6%A8%A1%E5%9D%97B%5D%0A%20%20%20%20%20%20%20%20F3%5B%E6%A8%A1%E5%9D%97C%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20A1%20fill%3A%23f5f5f5%0A%20%20%20%20style%20A2%20fill%3A%23f5f5f5%0A%20%20%20%20style%20A3%20fill%3A%23f5f5f5%0A%20%20%20%20style%20B%20fill%3A%234fc3f7%0A%20%20%20%20style%20C1%20fill%3A%23e8f5e8%0A%20%20%20%20style%20C2%20fill%3A%23e8f5e8%0A%20%20%20%20style%20C3%20fill%3A%23e8f5e8%0A"})]),fallback:E(()=>[...A[3]||(A[3]=[e(" Loading... ",-1)])]),_:1})),A[18]||(A[18]=B("ol",{start:"4"},[B("li",null,[B("strong",null,"云架构")])],-1)),A[19]||(A[19]=B("p",null,"云架构 (Cloud Architecture) 主要解决扩展性和并发的问题，是最容易扩展的架构。",-1)),A[20]||(A[20]=B("p",null,"它的高扩展性体现在将数据都复制到内存中，变成可复制的内存数据单元，然后将业务处理能力封装成一个个处理单元 (Processing Unit)。 若访问量增加，就新建处理单元；若访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，需要进行数据持久化。",-1)),A[21]||(A[21]=B("p",null,"云架构主要分成两部分：处理单元 (ProcessingUnit) 和虚拟中间件(Virtualized Middleware)。",-1)),A[22]||(A[22]=B("p",null,"处理单元：实现业务逻辑。",-1)),A[23]||(A[23]=B("p",null,"虚拟中间件：负责通信、保持会话控制、数据复制、分布式处理和处理单元的部署",-1)),(l(),D(i,null,{default:E(()=>[r(t,{id:"mermaid-214",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20subgraph%20PU1%20%5B%22Processing%20Unit%201%22%5D%0A%20%20%20%20%20%20%20%20A1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20A2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20A3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20A4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20A5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20PU2%20%5B%22Processing%20Unit%202%22%5D%0A%20%20%20%20%20%20%20%20B1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20B2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20B3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20B4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20B5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20PU3%20%5B%22Processing%20Unit%203%22%5D%0A%20%20%20%20%20%20%20%20C1%5B%E7%BB%84%E4%BB%B61%5D%20--%3E%20C2%5B%E7%BB%84%E4%BB%B62%5D%20--%3E%20C3%5B%E7%BB%84%E4%BB%B63%5D%0A%20%20%20%20%20%20%20%20C4%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20%20%20%20%20%20%20C5%5B%E7%BC%93%E5%AD%98%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20PU1%20--%3E%20VM%0A%20%20%20%20PU2%20--%3E%20VM%0A%20%20%20%20PU3%20--%3E%20VM%0A%20%20%20%20%0A%20%20%20%20subgraph%20VM%20%5B%22Virtualized%20Middleware%22%5D%0A%20%20%20%20%20%20%20%20D1%5BMessaging%20Grid%5D%0A%20%20%20%20%20%20%20%20D2%5BData%20Grid%5D%0A%20%20%20%20%20%20%20%20D3%5BProcessing%20Grid%5D%0A%20%20%20%20%20%20%20%20D4%5BDeployment%20Manager%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20style%20PU1%20fill%3A%23e3f2fd%0A%20%20%20%20style%20PU2%20fill%3A%23e3f2fd%0A%20%20%20%20style%20PU3%20fill%3A%23e3f2fd%0A%20%20%20%20style%20VM%20fill%3A%23f1f8e9%0A"})]),fallback:E(()=>[...A[4]||(A[4]=[e(" Loading... ",-1)])]),_:1})),A[24]||(A[24]=B("h4",{id:"_2-系统架构的常用建模方法",tabindex:"-1"},[e("2. 系统架构的常用建模方法 "),B("a",{class:"header-anchor",href:"#_2-系统架构的常用建模方法","aria-label":'Permalink to "2. 系统架构的常用建模方法"'},"​")],-1)),A[25]||(A[25]=B("p",null,"将软件架构的模型分成4种：结构模型、框架模型、动态模型和过程模型。",-1)),A[26]||(A[26]=B("p",null,"● 结构模型：这是一个最直观、最普遍的建模方法。此方法以架构的构件、连接件和其他概念来刻画结构。并力图通过结构来反映系统的重要语义内容，包括系统的配置、约 束、隐含的假设条件、风格和性质。研究结构模型的核心是架构描述语言。",-1)),A[27]||(A[27]=B("p",null,"● 框架模型：框架模型与结构模型类似，但它不太侧重描述结构的细节，而更侧重整体的结构。框架模型主要以一些特殊的问题为目标建立只针对和适应问题的结构。",-1)),A[28]||(A[28]=B("p",null,"● 动态模型：动态模型是对结构或框架模型的补充，主要研究系统的“大颗粒”行为的性质。例如，描述系统的重新配置或演化。这里的动态可以是指系统总体结构的配置、建 立或拆除通信或计算的过程，这类系统模型常是激励型的。",-1)),A[29]||(A[29]=B("p",null,"● 过程模型：过程模型是研究构造系统的步骤和过程，其结构是遵循某些过程脚本的结果。",-1))])}const P=s(o,[["render",d]]);export{b as __pageData,P as default};
