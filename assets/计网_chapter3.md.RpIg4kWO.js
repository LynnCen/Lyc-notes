import{_ as a,c as e,o as t,aa as r}from"./chunks/framework.CAVwB9kQ.js";const m=JSON.parse('{"title":"第 3 章 数据链路层","description":"","frontmatter":{},"headers":[],"relativePath":"计网/chapter3.md","filePath":"计网/chapter3.md","lastUpdated":1724840371000}'),l={name:"计网/chapter3.md"},o=r('<h1 id="第-3-章-数据链路层" tabindex="-1">第 3 章 数据链路层 <a class="header-anchor" href="#第-3-章-数据链路层" aria-label="Permalink to &quot;第 3 章 数据链路层&quot;">​</a></h1><h2 id="数据链路层的功能" tabindex="-1">数据链路层的功能 <a class="header-anchor" href="#数据链路层的功能" aria-label="Permalink to &quot;数据链路层的功能&quot;">​</a></h2><p>有三个基本问题则是共同的，即封装成帧、透明传输和差错检测。</p><p>数据链路层使用的信道主要有两种:</p><p>1️⃣ 点对点信道，使用一对一的通信方式。PPP协议则是目前使用最广泛的点对点协议。</p><p>2️⃣ 广播信道，这种信道上连接的主机很多，使用 一对多的广播通信方式。采用共享广播信 道的有线局域网普遍使用CSMA/CD协议，而无线局域网则使用CSMA/CA协议。</p><ol><li>数据链路层所处的地位</li></ol><p>链路、数据链路、帧</p><ol start="2"><li>链路管理</li></ol><p>数据链路层连接的建立、维持和释放过程称力链路管理</p><ol start="3"><li><p>封装成帧与透明传输</p></li><li><p>为网络层提供服务</p></li><li><p>流量控制</p></li><li><p>差错检测</p></li></ol><h2 id="组帧" tabindex="-1">组帧 <a class="header-anchor" href="#组帧" aria-label="Permalink to &quot;组帧&quot;">​</a></h2><p>发送方依据一定的规则将网络层递交的分组封装成帧(也称组帧)。组帧主要解决帧定界、帧同步、透明传输等问题。</p><h3 id="字符计数法" tabindex="-1">字符计数法 <a class="header-anchor" href="#字符计数法" aria-label="Permalink to &quot;字符计数法&quot;">​</a></h3><p>字符计数法是指在帧首部使用一个计数字段来记录该帧所含的字节数(包括计数字段自身所占用的1个字节)</p><h3 id="字节填充法" tabindex="-1">字节填充法 <a class="header-anchor" href="#字节填充法" aria-label="Permalink to &quot;字节填充法&quot;">​</a></h3><p>控制字符SOH放在帧的最前面，表示帧的开始，控制字符EOT表示帧的结束。在特殊字符之前填充一个转义字符ESC来加以区</p><h3 id="零比特填充法" tabindex="-1">零比特填充法 <a class="header-anchor" href="#零比特填充法" aria-label="Permalink to &quot;零比特填充法&quot;">​</a></h3><p>使用一个特定的比特串01111110来标志一帧的开始和结束，每遇到5个连续的“1”，就自动在其后插入一个“0”。</p><h3 id="违规编码法" tabindex="-1">违规编码法 <a class="header-anchor" href="#违规编码法" aria-label="Permalink to &quot;违规编码法&quot;">​</a></h3><p>在物理层进行比特编码时，常采用违规编码法。例如，曼彻斯特编码方法将数据比特“ 1” 编码成“高-低” 电平对，将数据比特 “0” 编码成“ 低-高” 电平对，而“高-高” 电平对和“低 - 低” 电平对在数据比特中是违规的(即没有采用)，因此可借用这些违规编码序列来定界帧的起 始和终止。</p>',21),i=[o];function p(h,n,s,c,d,_){return t(),e("div",null,i)}const f=a(l,[["render",p]]);export{m as __pageData,f as default};
