import{_ as t,c as a,o as e,aa as o}from"./chunks/framework.CAVwB9kQ.js";const F=JSON.parse('{"title":"2018","description":"","frontmatter":{},"headers":[],"relativePath":"408/2018.md","filePath":"408/2018.md","lastUpdated":1733813284000}'),r={name:"408/2018.md"},h=o(`<h1 id="_2018" tabindex="-1">2018 <a class="header-anchor" href="#_2018" aria-label="Permalink to &quot;2018&quot;">​</a></h1><h2 id="_1-完全二叉树结点分析" tabindex="-1">1. 完全二叉树结点分析 <a class="header-anchor" href="#_1-完全二叉树结点分析" aria-label="Permalink to &quot;1. 完全二叉树结点分析&quot;">​</a></h2><p><strong>设一棵非空完全二叉树T的所有叶结点均位于同一层，且每个非叶结点都有2个子结点。若T有k个叶结点，则T的结点总数是_。</strong></p><pre><code>结点总数 = 边数 + 1 = 各节点度数之和 

法一：画图法
</code></pre><p>非叶结点的度均为 2，且所有叶结点都位于同一层的完全二叉树就是满二叉树。对于一棵高度为h的满二叉树（空树h=0），其最后一层全部是叶结点，数量为2^h；总结点数为2^h - 1。因此当2^h-1 = k 时，可以得到2^h - 1 = 2k - 1。</p><h2 id="_2-b树关键字个数分析" tabindex="-1">2. B树关键字个数分析 <a class="header-anchor" href="#_2-b树关键字个数分析" aria-label="Permalink to &quot;2. B树关键字个数分析&quot;">​</a></h2><p><strong>高度为5的3阶B树含有的关键字个数至少是</strong></p><p>3阶b树的关键字书 = <code>[1,2]</code></p><p>每个结点的关键字都为1可以达到最少的情况，形成高度为5的满二叉树，2^5 - 1 = 31</p><h2 id="_3-平均查找长度" tabindex="-1">3. 平均查找长度 <a class="header-anchor" href="#_3-平均查找长度" aria-label="Permalink to &quot;3. 平均查找长度&quot;">​</a></h2><ul><li><a href="/Lyc-notes/408/2013#_24-平均查找长度">2013-平均查找长度</a></li><li><a href="/Lyc-notes/dataStructure/chapter7#散列-hash-表">散列表</a></li></ul><p><strong>现有长度为7、初始为空的散列表HT，散列函数H(k)=k%7，用线性探测再散列法解决冲突。将关键字 22，43，15依次插入到 HT后，查找成功的平均查找长度是</strong></p><p>22%7 =1 、43%7 = 1、15%7 = 1</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td></td><td>22</td><td>43</td><td>15</td><td></td><td></td><td></td></tr></tbody></table><p>查找22 查找1次、查找43 查找2次、查找15 查找3次</p><p>平均查找长度 = 1 + 2 + 3 / 3 = 2</p><h2 id="_4-ieee最小规格化正数" tabindex="-1">4. IEEE最小规格化正数 <a class="header-anchor" href="#_4-ieee最小规格化正数" aria-label="Permalink to &quot;4. IEEE最小规格化正数&quot;">​</a></h2><ul><li><a href="/Lyc-notes/组成原理/强化#_13-ieee754标准">IEEE</a></li><li><a href="/Lyc-notes/408/2017#_17-数的运算-ieee754-️">2017</a></li><li><a href="/Lyc-notes/408/2013#_6-ieee浮点数格式-补码的表示范围-️">2013</a></li><li><a href="/Lyc-notes/408/2012#_7-ieee754单精度浮点数">2012</a></li><li><a href="/Lyc-notes/408/2014#_7-ieee754浮点数比较大小">2014</a></li></ul><p>IEEE最小规格化正数 = 1.0 * 2^-126</p><p>最大 = 1.1111111(23个1) *2^127= (2-2^-23) x 2^127 = 2^128 - 2^104</p><h2 id="_5-小端存储" tabindex="-1">5. 小端存储 <a class="header-anchor" href="#_5-小端存储" aria-label="Permalink to &quot;5. 小端存储&quot;">​</a></h2><ul><li><a href="/Lyc-notes/408/2016#_7-小端存储">2016</a></li><li></li></ul><p><strong>-64 表示成 32 位的十六进制数是FFFFFF CO, 根据小端方式的特点，高字节存储在低地址， 就是CO FF FF FF</strong></p><h2 id="_6-变址寻址-数组" tabindex="-1">6. 变址寻址（数组） <a class="header-anchor" href="#_6-变址寻址-数组" aria-label="Permalink to &quot;6. 变址寻址（数组）&quot;">​</a></h2><p><strong>按字节编址的计算机中，某double 型数组A的首地址为2000H，使用变址寻址和循环结构访问数组 A，保存数组下标的变址寄存器初值为0，每次循环取一个数组元素，其偏移地址为变址值乘以 sizeof（double），取完后变址寄存器内容自动加 1。若某次循环所取元素的地址为2100H，则进入该次循环时变址寄存器的内容是。</strong></p><p>double 64位 = 8字节</p><p>2100H = 2000H + sizeof(double) * k</p><p>k = 256 / 8 = 32</p><h2 id="_7-cf-of" tabindex="-1">7. CF&amp;OF <a class="header-anchor" href="#_7-cf-of" aria-label="Permalink to &quot;7. CF&amp;OF&quot;">​</a></h2><ul><li><a href="/Lyc-notes/408/2011#_9-条件转移的标志位信息">2011-条件转移的标志位信息</a></li><li></li></ul><p><strong>减法指令 “sub RI, R2, R3” 的功能为“（RI） -（R2）-&gt; R3”，该指令执行后将生成进位/借位标志 CF 和溢出标志OF。若（R1） =FFFF FFFFH，（R2） = FFFF FFFOH，则该减法指令执行后，CF 与 OF分别为_。</strong></p><p>R2补码 = 0000 0010H R1 - R2 = R1 + R2补码 = FFFF FFFF + 0000 0010 =</p><p>最高位进位=1，次高位进位=1，sub = 1</p><p>CF = 最高位进位 异或 次高位进位 = 0</p><p>OF = 最高位进位 异或 sub = 0</p><p>异或 =&gt; 同0异1</p><h2 id="_8-平均周转时间-️" tabindex="-1">8. 平均周转时间(‼️) <a class="header-anchor" href="#_8-平均周转时间-️" aria-label="Permalink to &quot;8. 平均周转时间(‼️)&quot;">​</a></h2><blockquote><p>周转时间：指从作业被提交给系统开始，到作业完成为之的这段时间间隔称为作业周转时间。</p></blockquote><blockquote><p>包括四个时间：作业在外存后备队列上等待调度的时间，进程在就绪队列上等待进程调度的时间，进程在 CPU 上执行的时间，以及进程等待 I/O 操作完成的时间。</p></blockquote><blockquote><p>带权周转时间：作业的周转时间 T 与系统为它提供服务的时间 Ts 之比</p></blockquote><p><strong>某系统采用基于优先权的非抢占式进程调度策略，完成一次进程调度和进程切换的系统时间开销为 1us。在t时刻就绪队列中有3个进程P1、P2和 P3，其在就绪队列中的等待时间、需要的 CPU 时间和优先权如下表所示。</strong></p><table><thead><tr><th>进程</th><th>等待时间</th><th>需要的 CPU 时间</th><th>优先权</th></tr></thead><tbody><tr><td>P1</td><td>30us</td><td>12us</td><td>10</td></tr><tr><td>P2</td><td>15us</td><td>24us</td><td>30</td></tr><tr><td>P3</td><td>18us</td><td>36us</td><td>20</td></tr></tbody></table><p><strong>为若优先权值大的进程优先获得CPU，从T时刻起系统开始进程调度，系统的平均周转时间</strong></p><p>优先级: p2 &gt; p3 &gt; p1</p><p>p2: 1us调度 + 15us等待 + 24us执行 = 40us</p><p>p3: 1usp2调度 + 24usp2执行 + 1us调度 + 18us等待 + 36us执行 = 80us</p><p>p1: 1usp2调度 + 24usp2执行 + 1usp3调度 + 36usp3执行 + 1us调度 + 30us等待 + 12us执行 = 105us</p><p>平均周转时间 = (40 + 80 + 105) / 3 = 75us</p><h2 id="_9-时钟中断服务程序" tabindex="-1">9. 时钟中断服务程序 <a class="header-anchor" href="#_9-时钟中断服务程序" aria-label="Permalink to &quot;9. 时钟中断服务程序&quot;">​</a></h2><p>时钟中断的主要工作是处理和时间有关的信息以及决定是否执行调度程序，和时间有关的所有信息，包括系统时间、进程的时间片、延时、使用CPU的时间、各种定时器。</p><h2 id="_10-磁臂黏着-磁盘调度算法" tabindex="-1">10. 磁臂黏着(磁盘调度算法) <a class="header-anchor" href="#_10-磁臂黏着-磁盘调度算法" aria-label="Permalink to &quot;10. 磁臂黏着(磁盘调度算法)&quot;">​</a></h2><p><strong>磁臂黏着：系统总是访问磁盘的某个磁道而不响应对其他磁道的访问请求</strong></p><p>当系统总是持续出现某个磁道的访问请求时， 均持续满足最短寻道时间优先、 扫描算法和循环扫描算法的访问条件，会 一直服务该访问请求。因此，先来先服务按照请求次序进行调度， 比较公平。</p><h2 id="_11-让权等待" tabindex="-1">11. 让权等待 <a class="header-anchor" href="#_11-让权等待" aria-label="Permalink to &quot;11. 让权等待&quot;">​</a></h2><ul><li><a href="/Lyc-notes/os/强化#_14-实现互斥的方法">实现互斥的方法</a></li><li><a href="/Lyc-notes/408/2016#_11-tsl">2016-TSL</a></li></ul><p>**让权等待：**即当进程不能进入临界区时， 应立即释放处理器， 防止进程忙等待</p><p>只有信号量才能实现让权等待</p><h2 id="_12-csma-ca预约信道" tabindex="-1">12. CSMA/CA预约信道 <a class="header-anchor" href="#_12-csma-ca预约信道" aria-label="Permalink to &quot;12. CSMA/CA预约信道&quot;">​</a></h2><ul><li><a href="/Lyc-notes/408/2011#_16-mac协议">MAC协议</a></li></ul><p>所有站完成发送后，必须等待一段很短的时间(继续监听)才能发送下一帧。这段时间称为帧间间隔(InterFrameSpace,IFS)。帧间间隔的长短取决于该站要发送的帧的类型。802.11标准使用了下列三种IFS。</p><p>1️⃣ SIFS(短IFS):最短的IFS，用来分隔属于一次对话的各帧，使用SIFS的帧类型有ACK帧、CTS帧、分片后的数据帧，以及所有回答AP探询的帧等。</p><p>2️⃣ PIFS(点协调IFS):中等长度的IFS，在PCF操作中使用。</p><p>3️⃣ DIFS(分布式协调IFS):最长的IFS，用于异步帧竞争访问的时延。</p><p><strong>CSMA/CA协议进行信道预约的方法：</strong></p><p>源站要发送数据帧之前，先监听信道，若信道空闲，则等待时间DIFS后，广播一个请求发送**RTS(RequestToSend)**控制帧，它包括源地址、目的地址和这次通信所需的持续时间。</p><p>若AP正确收到RTS帧，且信道空闲，则等待时间SIFS后，向源站发送一个允许发<strong>CTS(ClearToSend)控制帧</strong>，它也包括这次通信所需的持续时间，源站收到CTS帧后，再等待时间SIFS，就可发送数据帧。</p><h2 id="_13-最小正整数" tabindex="-1">13. 最小正整数 <a class="header-anchor" href="#_13-最小正整数" aria-label="Permalink to &quot;13. 最小正整数&quot;">​</a></h2>`,67),l=[h];function s(p,d,i,n,u,c){return e(),a("div",null,l)}const b=t(r,[["render",s]]);export{F as __pageData,b as default};
